



(defun flyspell-buffer-buffer ()
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (flyspell-buffer)
    (let ((cb (current-buffer))
	  (ov (ov-next 'face 'flyspell-incorrect))
	  (sp '()))
      (while ov
	(goto-char (ov-beg ov))
	(push (list (buffer-substring (ov-beg ov) (ov-end ov))
		    (point)
		    (line-number-at-pos))
	      sp)
        (goto-char (ov-end ov))
	(setq ov (ov-next 'face 'flyspell-incorrect)))
      (reverse sp))))




(defun fbb-jump ()
  "Jump to position of typo."
  (interactive)
  (let ((buf (get-text-property (line-beginning-position) 'ov-buffer))
	(pos (get-text-property (line-beginning-position) 'ov-position)))
    (switch-to-buffer-other-window buf)
    (goto-char pos)))

(defvar fbb-mode-map
  (let ((map (make-sparse-key-map)))
    (define-key map (kbd "o") 'fbb-jump)
    map))

(defun fbb-refresh-list ()
  (let ((entries (flyspell-buffer-buffer)))
    (loop for (word pos ln) in entries
	  collect
	  (list
	   nil
	   (vector
	    (cons word (list 'ov-buffer (current-buffer)
			     'ov-position pos))))

	  )

    )

  )


(define-derived-mode flyspell-buffer-buffer-mode
  tabulated-list-mode "fbb"
  "Mode for viewing flyspell-buffer-buffer candidates as a tabular list.
\\{flyspell-buffer-buffer-mode-map}"
  (setq tabulated-list-sort-key nil)
  (add-hook 'tabulated-list-revert-hook
	    #'fbb-refresh-list))
