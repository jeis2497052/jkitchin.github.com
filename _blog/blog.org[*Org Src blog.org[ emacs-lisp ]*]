;; (let ((level-counters '()))
;;   (if-let ((lc (assoc 1 level-counters)))
;;       (setf (cdr lc) (incf (cdr lc)))
;;     (add-to-list 'level-counters (cons 1 1))))


(defun overlay-numbered-headings ()
  (interactive)
  (loop for (p lv) in (let ((current-level 1)
			    last-level
			    (level-vector '(1))
			    (level-counters '()))
			(switch-to-buffer "blog.org")
			(org-map-entries
			 (lambda ()
			   (let* ((hl (org-element-context))
				  (level (org-element-property :level hl)))
			     (setq last-level current-level
				   current-level level)

					;(message "%s - %s" last-level current-level)
			     (cond
			      ;; no level change, increment last value
			      ((= last-level current-level)
			       (incf (nth (- current-level 1) level-vector))
			       (message "= %s" level-vector))
			      ;; increase in level, add an entry
			      ((> current-level last-level)
			       (add-to-list 'level-vector 1 t)
			       (message " > %s" level-vector))
			      ;; decrease in level, remove last entry, increment last entry
			      (t
			       (pop level-vector)
			       (incf (nth (- current-level 1) level-vector))
			       (message " t %s" level-vector)))

			     (list (point) level-vector)))))
	do

	))

)
