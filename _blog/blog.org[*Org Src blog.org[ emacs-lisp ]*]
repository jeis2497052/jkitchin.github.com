(defmacro default-dict (var &optional default &rest key-vals)
  "Bind a callable plist to VAR that contains KEY-VALS."
  (let ()
    `(let ((sym ,(gensym))
	   (,(gensym) ',key-vals))
       (defalias ',var
	 (lambda (&rest key-vals)
	   (message "%s" key-vals)
	   (cond
	    ;; no args, return data
	    ((= 0 (length key-vals))
	     ,data)
	    ;; just a key, get val
	    ((= 1 (length key-vals))
	     (or  (plist-get ,data (car key-vals)) default))
	    (t
	     (loop for key in (-slice key-vals 0 nil 2)
		   for val in (-slice key-vals 1 nil 2)
		   do
		   (plist-put ,data key val))
	     ,data)))))))

(dict d2 "None" :key1 4 :key2 "tree")
