<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <atom:link href="http://kitchingroup.cheme.cmu.edu/blog/feed/index.xml" rel="self" type="application/rss+xml" />
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Sun, 09 Apr 2017 14:56:51 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    
    <item>
      <title>A better return in org-mode</title>
      <link>http://jkitchin.github.io/blog/2017/04/09/A-better-return-in-org-mode</link>
      <pubDate>Sun, 09 Apr 2017 10:56:42 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[orgmode]]></category>
      <guid isPermaLink="false">0iu8sLfQQWT9g84NGKEsM4n2ffg=</guid>
      <description>A better return in org-mode</description>
      <content:encoded><![CDATA[


&lt;p&gt;
Over on &lt;a href="http://emacs.stackexchange.com/questions/24574/org-mode-default-to-alt-enter-for-bullets"&gt;Stackoverflow&lt;/a&gt; someone wanted a better return in org-mode. They wanted return to add items in a list (instead of M-Ret).	Someone posted a partial solution, and here I improve on it to add new items to lists, new headings after a heading, and new rows to tables. In each case, a double return on an empty item, headline or table row will delete that line, and terminate the list, headlines or table. You can still use M-Ret, and this function falls through to org-return like it did before.
&lt;/p&gt;

&lt;p&gt;
Here is the function. Give it a try. It is a small but helpful addition I think. I have not used it for long, so if you come across issues leave a comment!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax/org-return&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Add new list or headline "&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
   ((org-in-item-p)
    (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (org-element-property &lt;span style="color: #006FE0;"&gt;:contents-begin&lt;/span&gt; (org-element-context))
        (org-insert-heading)
      (beginning-of-line)
      (kill-line)
      (org-return)))
   ((org-at-heading-p)
    (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (not (string= &lt;span style="color: #008000;"&gt;""&lt;/span&gt; (org-element-property &lt;span style="color: #006FE0;"&gt;:title&lt;/span&gt; (org-element-context))))
        (&lt;span style="color: #0000FF;"&gt;progn&lt;/span&gt; (org-end-of-meta-data)
               (org-insert-heading))
      (beginning-of-line)
      (kill-line)))
   ((org-at-table-p)
    (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (-any?
         (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (x) (not (string= &lt;span style="color: #008000;"&gt;""&lt;/span&gt; x)))
         (nth
          (- (org-table-current-dline) 1)
          (org-table-to-lisp)))
        (org-return)
      &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;empty row&lt;/span&gt;
      (beginning-of-line)
      (kill-line)
      (org-return)))
   (t
    (org-return))))

(define-key org-mode-map (kbd &lt;span style="color: #008000;"&gt;"RET"&lt;/span&gt;)
  'scimax/org-return)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/09/A-better-return-in-org-mode.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Object-oriented font-locking in emacs-lisp</title>
      <link>http://jkitchin.github.io/blog/2017/04/07/Object-oriented-font-locking-in-emacs-lisp</link>
      <pubDate>Fri, 07 Apr 2017 15:00:54 EDT</pubDate>
      <category><![CDATA[fontlock]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">1WygBs0ML7IO8fyyXao5G7m0YWQ=</guid>
      <description>Object-oriented font-locking in emacs-lisp</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga752041"&gt;1. Font-locking the elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4b6ed31"&gt;2. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I have been interested in functional text for a long time. With functional text you can read it, but also interact with it &lt;a class='org-ref-reference' href="#kitchin-2015-examp"&gt;kitchin-2015-examp&lt;/a&gt;. Lately I have been thinking about how to use some features of object-oriented programming to functional text. The premise is to use an object hierarchy to encapsulate some knowledge, and provide &lt;i&gt;functionality&lt;/i&gt; on the objects. We can use inheritance to customize some of this knowledge and functionality.
&lt;/p&gt;

&lt;p&gt;
The example I will work out here is to provide functional text for chemical elements. The goal is to define some objects that represent elements, and construct font-lock rules from the objects to make the text functional in Emacs. Functional here means it stands out so we know there is something special about it, it has a tooltip to get some information (like what type of element it is, and its atomic mass), and it is clickable to get more functionality.
&lt;/p&gt;

&lt;p&gt;
This post will make a lot more sense in this video: &lt;a href="https://www.youtube.com/watch?v=IWxCj5cr8rY"&gt;https://www.youtube.com/watch?v=IWxCj5cr8rY&lt;/a&gt;
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/IWxCj5cr8rY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
First, we create a base class of an Element. I use an instance tracker for this to make book keeping easy later. The base class will have a name, synonyms for the name, and a default face to color it. We define a few methods to get an atomic mass and search google for the element. Finally, we provide a function to generate a tooltip, and a font-lock rule.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defvar&lt;/span&gt; &lt;span style="color: #BA36A5;"&gt;atomic-masses&lt;/span&gt; '((&lt;span style="color: #008000;"&gt;"Hydrogen"&lt;/span&gt; . 1.008)
                        (&lt;span style="color: #008000;"&gt;"Argon"&lt;/span&gt; . 39.948)
                        (&lt;span style="color: #008000;"&gt;"Sodium"&lt;/span&gt; . 22.989)
                        (&lt;span style="color: #008000;"&gt;"Palladium"&lt;/span&gt; . 106.42))
  &lt;span style="color: #036A07;"&gt;"a-list of atomic masses."&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defvar&lt;/span&gt; &lt;span style="color: #BA36A5;"&gt;elements&lt;/span&gt; '() &lt;span style="color: #036A07;"&gt;"List of known elements"&lt;/span&gt;)
(&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; elements '()) &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;this is to start over&lt;/span&gt;

(&lt;span style="color: #0000FF;"&gt;defclass&lt;/span&gt; &lt;span style="color: #6434A3;"&gt;element&lt;/span&gt; (eieio-instance-tracker)
  ((tracking-symbol &lt;span style="color: #006FE0;"&gt;:initform&lt;/span&gt; elements
                    &lt;span style="color: #006FE0;"&gt;:documentation&lt;/span&gt; &lt;span style="color: #036A07;"&gt;"Variable that holds all class instances."&lt;/span&gt;)
   (name &lt;span style="color: #006FE0;"&gt;:initarg&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt;
         &lt;span style="color: #006FE0;"&gt;:documentation&lt;/span&gt; &lt;span style="color: #036A07;"&gt;"The name of the element"&lt;/span&gt;)
   (synonyms &lt;span style="color: #006FE0;"&gt;:initarg&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:synonyms&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:initform&lt;/span&gt; '()
             &lt;span style="color: #006FE0;"&gt;:documentation&lt;/span&gt; &lt;span style="color: #036A07;"&gt;"List of regular expressions that match the element."&lt;/span&gt;)
   (face &lt;span style="color: #006FE0;"&gt;:initarg&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:initform&lt;/span&gt; 'font-lock-type-face
         &lt;span style="color: #006FE0;"&gt;:documentation&lt;/span&gt; &lt;span style="color: #036A07;"&gt;"The face to use with font-lock."&lt;/span&gt;))
  &lt;span style="color: #036A07;"&gt;"Base class for a chemical element."&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;element-atomic-mass&lt;/span&gt; ((x element))
  &lt;span style="color: #036A07;"&gt;"Return atomic mass from `&lt;/span&gt;&lt;span style="color: #D0372D;"&gt;atomic-masses&lt;/span&gt;&lt;span style="color: #036A07;"&gt;'."&lt;/span&gt;
  (cdr (assoc (&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt;) atomic-masses)))

(&lt;span style="color: #0000FF;"&gt;defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;element-help-echo&lt;/span&gt; ((x element))
  &lt;span style="color: #036A07;"&gt;"A tooltip for the element.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;It will look like class (inherited classes) mass=atomic-mass"&lt;/span&gt;
  (format &lt;span style="color: #008000;"&gt;"%s %s: mass=%s"&lt;/span&gt;
          (eieio-object-class x)
          (mapcar 'eieio-class-name (eieio-class-parents (eieio-object-class x)))
          (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; (element-atomic-mass x) &lt;span style="color: #008000;"&gt;"unknown"&lt;/span&gt;)))

(&lt;span style="color: #0000FF;"&gt;defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;element-search&lt;/span&gt; ((x element))
  &lt;span style="color: #036A07;"&gt;"Search google for the element"&lt;/span&gt;
  (google-this-string nil (&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt;) t))

(&lt;span style="color: #0000FF;"&gt;defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;element-font-lock-rule&lt;/span&gt; ((x element))
  &lt;span style="color: #036A07;"&gt;"Return font-lock rule for the element."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((map (make-sparse-keymap)))
    (define-key map [mouse-1]
      (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; ()
        &lt;span style="color: #036A07;"&gt;"Construct the object and run `&lt;/span&gt;&lt;span style="color: #D0372D;"&gt;element-search&lt;/span&gt;&lt;span style="color: #036A07;"&gt;' on it."&lt;/span&gt;
        (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
        (element-search
         (eieio-instance-tracker-find
          (get-text-property (point) 'element-name)
          &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt; 'elements))))

    (list
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Construct the pattern to match&lt;/span&gt;
     (rx-to-string `(: bow
                       (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt;  ,(&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt;)
                            ,@(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for sy in (&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:synonyms&lt;/span&gt;)
                                    collect `(regexp ,sy)))
                       eow))
     0  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;font-lock the whole match&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;These are the properties to put on the matches&lt;/span&gt;
     `(&lt;span style="color: #0000FF;"&gt;quote&lt;/span&gt; (face ,(&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt;)
                   element-name ,(&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt;)
                   local-map ,map
                   mouse-face 'highlight
                   help-echo ,(element-help-echo x))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now, we can define some sub-classes. These are families of elements. For a metal, we change the face. For noble gases, we override the help-echo function, and for alkali metals we override the search function. The point is that we can customize the behavior for different classes.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defclass&lt;/span&gt; &lt;span style="color: #6434A3;"&gt;metal&lt;/span&gt; (element)
  ((face &lt;span style="color: #006FE0;"&gt;:initform&lt;/span&gt; '(&lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; &lt;span style="color: #008000;"&gt;"orange"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:underline&lt;/span&gt; t)))
  &lt;span style="color: #036A07;"&gt;"Metal"&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defclass&lt;/span&gt; &lt;span style="color: #6434A3;"&gt;noble-gas&lt;/span&gt; (element)
  ()
  &lt;span style="color: #036A07;"&gt;"A noble gas"&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;element-help-echo&lt;/span&gt; ((x noble-gas))
  &lt;span style="color: #036A07;"&gt;"I am not a common element."&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defclass&lt;/span&gt; &lt;span style="color: #6434A3;"&gt;alkali&lt;/span&gt; (element metal)
  ()
  &lt;span style="color: #036A07;"&gt;"Alkali metal"&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;element-search&lt;/span&gt; ((x alkali))
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((visible-bell t))
    (beep)
    (message &lt;span style="color: #008000;"&gt;"You clicked on an alkali metal: %s."&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt;))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now we can define some elements. These are all instances of each class. For some, we define synonyms, and alternate appearances. Note the synonyms are regular expressions.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(element &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Hydrogen"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:synonyms&lt;/span&gt; '(&lt;span style="color: #008000;"&gt;"H"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"[hH]ydrogen"&lt;/span&gt;))

(noble-gas &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Argon"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:synonyms&lt;/span&gt; '(&lt;span style="color: #008000;"&gt;"Ar"&lt;/span&gt;))

(alkali &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Sodium"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:synonyms&lt;/span&gt; '(&lt;span style="color: #008000;"&gt;"Na"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"[nN]atrium"&lt;/span&gt;))
(alkali &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Potassium"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:synonyms&lt;/span&gt; '(&lt;span style="color: #008000;"&gt;"K"&lt;/span&gt;) &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt; '(&lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; &lt;span style="color: #008000;"&gt;"red"&lt;/span&gt;))

(metal &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Palladium"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The instance tracker shows us the defined objects.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;elements
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga752041" class="outline-2"&gt;
&lt;h2 id="orga752041"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Font-locking the elements&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Here we generate font-lock rules from the set of objects. Each object will return its font-lock rule, so we just map over each object to get the list of rules.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(font-lock-add-keywords
 nil
 (mapcar 'element-font-lock-rule elements))

(font-lock-fontify-buffer)
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
Now any time we have Palladium or Hydrogen it will be highlighted.  And Sodium and Argon.
&lt;/p&gt;

&lt;p&gt;
Here are some synonyms: hydrogen H Natrium natrium.
&lt;/p&gt;

&lt;p&gt;
Potassium has a different color than Na.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4b6ed31" class="outline-2"&gt;
&lt;h2 id="org4b6ed31"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
This seems like a pretty useful way to encapsulate functionality for functional text. Clearly most of the work should go in the base class, and the inheritance model, so you do not have to repeat things unnecessarily. Some features are missing, like conveniently adding synonyms and regenerating the font-lock rules. It is also the case that we do not persist these objects. They could be written to disk so that they can be reloaded later.
&lt;/p&gt;

&lt;p&gt;
The actions you can use on a highlighted word are pretty limited in this implementation. It would be nice if you got a menu of options that was user extendable and dynamic. Either a popup menu, or a hydra would be fine.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/07/Object-oriented-font-locking-in-emacs-lisp.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>A better defun for emacs-lisp</title>
      <link>http://jkitchin.github.io/blog/2017/03/22/A-better-defun-for-emacs-lisp</link>
      <pubDate>Wed, 22 Mar 2017 16:30:33 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[elisp]]></category>
      <category><![CDATA[macro]]></category>
      <guid isPermaLink="false">RoQ2wpVtnKbGMQqdpFrDLjXCPWw=</guid>
      <description>A better defun for emacs-lisp</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org56963be"&gt;1. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I have been thinking of better ways to write code that is more likely to have decent docstrings that are up to date, and maybe that enable automatic validation. One strategy is to keep documentation and code together, and by together I mean &lt;i&gt;close together&lt;/i&gt;. The closer the better.  I made some interesting progress in the &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/03/19/A-Hy-macro-for-defining-functions-with-docstrings-on-each-argument/"&gt;last post&lt;/a&gt;, where I used a macro to let me put argument specific documentation in the same place that the argument is defined. Here I expand the idea to also provide argument default values, and validation code where the argument is defined inside the function, in addition to generating docstrings. This post is written in Emacs-lisp, mostly because I am more familiar with the macro language. The idea should apply to other lisps too.
&lt;/p&gt;

&lt;p&gt;
Let's consider this prototypical, vanilla function definition, usage, and docstring.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;f1&lt;/span&gt; (arg1 arg2)
  &lt;span style="color: #036A07;"&gt;"Add two numbers."&lt;/span&gt;
  (+ arg1 arg2))

&lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;usage&lt;/span&gt;
(f1 3 4)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here is what the help looks like from emacs.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(describe-function 'f1)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It is clear I was lazy in writing the docstring; it does not even mention the arguments. There is also no validation of the arguments so if you pass a string and a number, you will get an error. There are no defaults either, so you have to provide both arguments. It seems like there could be significant room for improvement. Of course, I could bite the bullet and write a better function like this one:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;f1a&lt;/span&gt; (arg1 &lt;span style="color: #6434A3;"&gt;&amp;amp;optional&lt;/span&gt; arg2)
  &lt;span style="color: #036A07;"&gt;"Add ARG1 and ARG2 together.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;ARG1 and  ARG2 should both be numbers."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (null arg2) (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; arg2 2))
  (&lt;span style="color: #0000FF;"&gt;unless&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (numberp arg1) (numberp arg2)) (&lt;span style="color: #ff0000; font-weight: bold;"&gt;error&lt;/span&gt; &lt;span style="color: #008000;"&gt;"arg1 and arg2 should both be numbers"&lt;/span&gt;))
  (+ arg1 arg2))

(list (f1a 3 4) (f1a 3))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Yes, I could do that, but it is tedious to do it all the time. And it still leaves something to be desired for me. The docstring does not say what the default value is for example, and that is hard-coded in the code, i.e. not introspectible until you look at the code.  Next we consider an alternative way to write the function. Compare that to this function definition, usage and documentation. The function definition is a little more verbose. Providing documentation, defaults and validation code in any form would make it that way no matter what.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defn&lt;/span&gt; f2 ((arg1 &lt;span style="color: #008000;"&gt;"A number"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:validate&lt;/span&gt; numberp)
          (arg2 &lt;span style="color: #008000;"&gt;"A number"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:validate&lt;/span&gt; numberp &lt;span style="color: #006FE0;"&gt;:default&lt;/span&gt; 2))
  &lt;span style="color: #008000;"&gt;"Add the arguments."&lt;/span&gt;
  (+ arg1 arg2))

&lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;usage&lt;/span&gt;
(list (f2 3 4) (f2 3))
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(describe-function 'f2)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The documentation is built up from the information in the function definition, in a form that is mostly consistent with emacs-lisp documentation standards. &lt;code&gt;defn&lt;/code&gt; is not a regular emacs-lisp function; it is a macro I developed to generate the function code. It turned out to be long, but the gist of it is that before defining the function I loop through the arguments and collect the docstrings, along with any information about default values and/or validation functions. Then I build up the list of arguments to put in the function. Then if any default values are set, I generate some code to set those values if they are not set in the function call, and finally a similar block of validation code. At the end, I construct the defun and return it. You can check out the code if you want here: &lt;a href="https://github.com/jkitchin/scimax/blob/master/scimax-macros.el"&gt;https://github.com/jkitchin/scimax/blob/master/scimax-macros.el&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Let's take a look at what this code expands to.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(macroexpand-1
 '(defn f2 ((arg1 &lt;span style="color: #008000;"&gt;"A number"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:validate&lt;/span&gt; numberp)
            (arg2 &lt;span style="color: #008000;"&gt;"A number"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:validate&lt;/span&gt; numberp &lt;span style="color: #006FE0;"&gt;:default&lt;/span&gt; 2))
    &lt;span style="color: #008000;"&gt;"Add the arguments."&lt;/span&gt;
    (+ arg1 arg2)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You can see it expands to a regular defun, with a generated docstring, generated default settings code block, and generated validation code. Pretty nice.
&lt;/p&gt;

&lt;p&gt;
Let's see what happens with a function that fails the validation. We should get an error. Here we capture the error so we can see it in the post.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;condition-case&lt;/span&gt; err
    (f2 &lt;span style="color: #008000;"&gt;"oak"&lt;/span&gt;)
  (&lt;span style="color: #ff0000; font-weight: bold;"&gt;error&lt;/span&gt;
   (error-message-string err)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
So we even get a useful error message when the wrong type of argument is provided. Compare that to the error message from the original version of this function. It tells us we got the wrong type, but not which argument.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;condition-case&lt;/span&gt; err
    (f1 &lt;span style="color: #008000;"&gt;"oak"&lt;/span&gt; 4)
  (&lt;span style="color: #ff0000; font-weight: bold;"&gt;error&lt;/span&gt;
   (error-message-string err)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
One last example to check out the &amp;amp;rest argument, with validation that every arg is a number.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defn&lt;/span&gt; f4 ((rarg &lt;span style="color: #006FE0;"&gt;:rest&lt;/span&gt;
                &lt;span style="color: #006FE0;"&gt;:validate&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (x)
                            (-all-p 'identity (mapcar 'numberp x)))))
  &lt;span style="color: #008000;"&gt;"multiply all the arguments."&lt;/span&gt;
  (apply '* rarg))

(f4 1 2 3)
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;condition-case&lt;/span&gt; err
    (f4 &lt;span style="color: #008000;"&gt;"oak"&lt;/span&gt; 4)
  (&lt;span style="color: #ff0000; font-weight: bold;"&gt;error&lt;/span&gt;
   (error-message-string err)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(describe-function 'f4)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
That looks ok too.
&lt;/p&gt;

&lt;div id="outline-container-org56963be" class="outline-2"&gt;
&lt;h2 id="org56963be"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
The motivation for this was to help me write better code with better documentation. Better code in the sense that it can provide run-time validation, with better feedback, and automatic documentation, including that there is none if that is the case. It is basically compatible with the regular defun, but enhances what kind of documentation is possible with less work on my part. I think it will make it easier to keep documentation in sync, since the argument documentation would be kept near the argument, and you can build in validation if you want to.
&lt;/p&gt;

&lt;p&gt;
It is no news to lispers that macros are good for this kind of application.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/03/22/A-better-defun-for-emacs-lisp.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>A Hy macro for defining functions with docstrings on each argument</title>
      <link>http://jkitchin.github.io/blog/2017/03/19/A-Hy-macro-for-defining-functions-with-docstrings-on-each-argument</link>
      <pubDate>Sun, 19 Mar 2017 19:47:22 EDT</pubDate>
      <category><![CDATA[hylang]]></category>
      <category><![CDATA[python]]></category>
      <guid isPermaLink="false">NqXI-d5MIhdrEMrRoS82Q6yAc8U=</guid>
      <description>A Hy macro for defining functions with docstrings on each argument</description>
      <content:encoded><![CDATA[


&lt;p&gt;
For functions with a lot of arguments, python style docstrings leave something to be desired. For one, they are not that close to the arguments, so if you have a function with say 20 arguments, the docstring might take up a whole page! That means they are hard to keep synchronized too. Let's not argue now over the merits of a function with 20+ arguments, it is enough that they exist, and are a problem.
&lt;/p&gt;

&lt;p&gt;
So what are typical documentation standards? Here is a Numpy style doc string:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;func&lt;/span&gt;(arg1, arg2):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #036A07;"&gt;"""multiply arg1 and arg2&lt;/span&gt;

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   Parameters&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   ----------&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   arg1 : a number&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   arg2 : a number&lt;/span&gt;

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   """&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; arg1 * arg2
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It works well for a small number of arguments with limited descriptions. This is a proper docstring that is accessible by introspection and pydoc. With much longer argument lists, this falls apart. I will not pick on any code in particular here, but suffice it to say I was inspired today to think of a better way. There are some other documentation solutions at &lt;a href="http://stackoverflow.com/questions/9195455/how-to-document-a-method-with-parameters"&gt;http://stackoverflow.com/questions/9195455/how-to-document-a-method-with-parameters&lt;/a&gt;, but None of them are better in my opinion. I want accessible docstrings by instrospection, and only if that is unavailable do I want to read the code! Finally, if I have to read the code, I want it to be easy to figure out, which means the documentation is close to the arguments.
&lt;/p&gt;

&lt;p&gt;
There is bad news, I do not have one for vanilla python. Python does not even give you a way to deal with this. But, if we had a lisp, we could make a macro to help us out. In fact, we &lt;i&gt;have&lt;/i&gt; a lisp with &lt;a href="http://docs.hylang.org/en/latest/"&gt;hy&lt;/a&gt;! And we can use a macro to make a  syntax that lets us keep the docstring close to the argument, &lt;i&gt;and&lt;/i&gt; that constructs a real docstring so we get help later!
&lt;/p&gt;

&lt;p&gt;
Here it is:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-jupyter-hy"&gt;(&lt;span style="color: #0000FF;"&gt;defmacro&lt;/span&gt; &lt;span style="color: #006699;"&gt;mydef&lt;/span&gt; [func args &lt;span style="color: #6434A3;"&gt;&amp;amp;optional&lt;/span&gt; docstring &lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; body]
  `(&lt;span style="color: #0000FF;"&gt;defn&lt;/span&gt; &lt;span style="color: #006699;"&gt;~func&lt;/span&gt; [~@(&lt;span style="color: #006FE0;"&gt;map&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; [x] (&lt;span style="color: #006FE0;"&gt;nth&lt;/span&gt; x 0)) args)]
     ~(&lt;span style="color: #006FE0;"&gt;+&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; docstring (&lt;span style="color: #006FE0;"&gt;+&lt;/span&gt; docstring &lt;span style="color: #008000;"&gt;"\n\n"&lt;/span&gt;) &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)
         &lt;span style="color: #008000;"&gt;"Parameters\n----------\n"&lt;/span&gt;
         (.join &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt; (&lt;span style="color: #006FE0;"&gt;map&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; [x]
                            (.format &lt;span style="color: #008000;"&gt;"{} : {}"&lt;/span&gt;
                                     (&lt;span style="color: #006FE0;"&gt;nth&lt;/span&gt; x 0)
                                     (&lt;span style="color: #006FE0;"&gt;nth&lt;/span&gt; x 1))) args)))
     ~@body))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We can checkout how it expands like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-jupyter-hy"&gt;(&lt;span style="color: #006FE0;"&gt;print&lt;/span&gt; (&lt;span style="color: #006FE0;"&gt;macroexpand&lt;/span&gt; '(mydef f [(a &lt;span style="color: #008000;"&gt;"an int"&lt;/span&gt;)
                               (b &lt;span style="color: #008000;"&gt;"an int"&lt;/span&gt;)]
                            &lt;span style="color: #008000;"&gt;"some doc"&lt;/span&gt;
                            (&lt;span style="color: #006FE0;"&gt;*&lt;/span&gt; a b))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
('setv' 'f' ('fn' ['a' 'b'] 'some doc\n\nParameters\n----------\na : an int\nb : an int' ('*' 'a' 'b')))
&lt;/pre&gt;

&lt;p&gt;
That looks ok. Now, for an example of using that. Here is the same function we defined before, but I put the documentation for each argument with the argument.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-jupyter-hy"&gt;(mydef func ((arg1 &lt;span style="color: #008000;"&gt;"a number"&lt;/span&gt;)
             (arg2 &lt;span style="color: #008000;"&gt;"a number"&lt;/span&gt;))
  &lt;span style="color: #008000;"&gt;"Multiply arg1 by arg2"&lt;/span&gt;
  (&lt;span style="color: #006FE0;"&gt;*&lt;/span&gt; arg1 arg2))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We can use the function now like a regular function.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-jupyter-hy"&gt;(&lt;span style="color: #006FE0;"&gt;print&lt;/span&gt; (func 24 3))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
72
&lt;/pre&gt;

&lt;p&gt;
And now for the help.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-jupyter-hy"&gt;(help func)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Help on function func in module __main__:

func(arg1, arg2)
    Multiply arg1 by arg2

    Parameters
    ----------
    arg1 : a number
    arg2 : a number
&lt;/pre&gt;

&lt;p&gt;
Now, that should amaze and astonish you if you are a vanilla Pythonista! We have our cake, and we eat it too. You just can not make up your own syntax that way in Python. Imagine, we could add type information, validation code, etc&amp;#x2026; into that macro. Maybe it could even be possible to store argument dependent documentation on the function, say in the function dictionary. That would require some conventions I guess,  but they could become introspectable then. For example, in this vanilla Python:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;f&lt;/span&gt;(x): &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; x*x
&lt;span style="color: #BA36A5;"&gt;f.__dict__&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'args'&lt;/span&gt;] = {&lt;span style="color: #008000;"&gt;'x'&lt;/span&gt;: &lt;span style="color: #008000;"&gt;'A number'&lt;/span&gt;}
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(f.__dict__)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
{'args': {'x': 'A number'}}
&lt;/p&gt;

&lt;p&gt;
In the end, this does not really solve all the problems I have with current docstrings in Python. It does solve a problem with writing and reading the code by keeping documentation close to the arguments, but ultimately the docstring from Python's point of view will basically look the same. It is pretty awesome that it is even possible. Hy lisp for the win here (again!).
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/03/19/A-Hy-macro-for-defining-functions-with-docstrings-on-each-argument.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Modeling a Cu dimer by EMT, nonlinear regression and neural networks</title>
      <link>http://jkitchin.github.io/blog/2017/03/18/Modeling-a-Cu-dimer-by-EMT-nonlinear-regression-and-neural-networks</link>
      <pubDate>Sat, 18 Mar 2017 15:47:55 EDT</pubDate>
      <category><![CDATA[molecular-simulation]]></category>
      <category><![CDATA[machine-learning]]></category>
      <category><![CDATA[python]]></category>
      <category><![CDATA[neural-network]]></category>
      <guid isPermaLink="false">YF7pYoEPLUP4Of_3TO50RTAKQhM=</guid>
      <description>Modeling a Cu dimer by EMT, nonlinear regression and neural networks</description>
      <content:encoded><![CDATA[


&lt;p&gt;
In this post we consider a Cu&lt;sub&gt;2&lt;/sub&gt; dimer and how its energy varies with the separation of the atoms. We assume we have a way to calculate this, but that it is expensive, and that we want to create a simpler model that is as accurate, but cheaper to run. A simple way to do that is to regress a physical model, but we will illustrate some challenges with that. We then show a neural network can be used as an accurate regression function without needing to know more about the physics.
&lt;/p&gt;

&lt;p&gt;
We will use an &lt;a href="https://wiki.fysik.dtu.dk/ase/ase/calculators/emt.html"&gt;effective medium theory&lt;/a&gt; calculator to demonstrate this. The calculations are not expected to be very accurate or relevant to any experimental data, but they are fast, and will illustrate several useful points that are independent of that. We will take as our energy zero the energy of two atoms at a large separation, in this case about 10 angstroms. Here we plot the energy as a function of the distance between the two atoms, which is the only degree of freedom that matters in this example.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np
%matplotlib inline
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt

&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; ase.calculators.emt &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; EMT
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; ase &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Atoms

&lt;span style="color: #BA36A5;"&gt;atoms&lt;/span&gt; = Atoms(&lt;span style="color: #008000;"&gt;'Cu2'&lt;/span&gt;,[[0, 0, 0], [10, 0, 0]], pbc=[&lt;span style="color: #D0372D;"&gt;False&lt;/span&gt;, &lt;span style="color: #D0372D;"&gt;False&lt;/span&gt;, &lt;span style="color: #D0372D;"&gt;False&lt;/span&gt;])
atoms.set_calculator(EMT())

&lt;span style="color: #BA36A5;"&gt;e0&lt;/span&gt; = atoms.get_potential_energy()

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Array of bond lengths to get the energy for&lt;/span&gt;
&lt;span style="color: #BA36A5;"&gt;d&lt;/span&gt; = np.linspace(1.7, 3, 30)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;get_e&lt;/span&gt;(distance):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;a&lt;/span&gt; = atoms.copy()
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   a[1]&lt;span style="color: #BA36A5;"&gt;.x&lt;/span&gt; = distance
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   a.set_calculator(EMT())
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;e&lt;/span&gt; = a.get_potential_energy()
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; e

&lt;span style="color: #BA36A5;"&gt;e&lt;/span&gt; = np.array([get_e(dist) &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; dist &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; d])
&lt;span style="color: #BA36A5;"&gt;e&lt;/span&gt; -=  e0  &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;set the energy zero&lt;/span&gt;

plt.plot(d, e, &lt;span style="color: #008000;"&gt;'bo '&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #008000;"&gt;'d (&amp;#197;)'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'energy (eV)'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/ob-ipython-82aeda9421056689d5212f9033da900a.png"&gt; 
&lt;/p&gt;


&lt;p&gt;
We see there is a minimum, and the energy is asymmetric about the minimum. We have no functional form for the energy here, just the data in the plot. So to get another energy, we have to run another calculation. If that was expensive, we might prefer an analytical equation to evaluate instead.  We will get an analytical form by fitting a function to the data. A classic one is the &lt;a href="https://en.wikipedia.org/wiki/Buckingham_potential"&gt;Buckingham potential&lt;/a&gt;: \(E = A \exp(-B r) - \frac{C}{r^6}\). Here we perform the regression.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;model&lt;/span&gt;(r, A, B, C):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; A * np.exp(-B * r) - C / r**6

&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; pycse &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; nlinfit
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pprint

&lt;span style="color: #BA36A5;"&gt;p0&lt;/span&gt; = [-80, 1, 1]
&lt;span style="color: #BA36A5;"&gt;p&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;pint&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;se&lt;/span&gt; = nlinfit(model, d, e, p0, 0.05)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'Parameters = '&lt;/span&gt;, p)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'Confidence intervals = '&lt;/span&gt;)
pprint.pprint(pint)
plt.plot(d, e, &lt;span style="color: #008000;"&gt;'bo '&lt;/span&gt;, label=&lt;span style="color: #008000;"&gt;'calculations'&lt;/span&gt;)

&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = np.linspace(&lt;span style="color: #006FE0;"&gt;min&lt;/span&gt;(d), &lt;span style="color: #006FE0;"&gt;max&lt;/span&gt;(d))
plt.plot(x, model(x, *p), label=&lt;span style="color: #008000;"&gt;'fit'&lt;/span&gt;)
plt.legend(loc=&lt;span style="color: #008000;"&gt;'best'&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #008000;"&gt;'d (&amp;#197;)'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'energy (eV)'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Parameters =  [ -83.21072545    1.18663393 -266.15259507]
Confidence intervals =
array([[ -93.47624687,  -72.94520404],
       [   1.14158438,    1.23168348],
       [-280.92915682, -251.37603331]])
&lt;img src="/media/ob-ipython-a05811588d06f090a2462ba9f48dccb3.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
That fit is ok, but not great. We would be better off with a spline for this simple system! The trouble is how do we get anything better? If we had a better equation to fit to we might get better results.  While one might come up with one for this dimer, how would you extend it to more complex systems, even just a trimer? There have been decades of research dedicated to that, and we are not smarter than those researchers so, it is time for a new approach.
&lt;/p&gt;

&lt;p&gt;
We will use a Neural Network regressor. The input will be \(d\) and we want to regress a function to predict the energy.
&lt;/p&gt;

&lt;p&gt;
There are a couple of important points to make here.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;This is just another kind of regression.&lt;/li&gt;
&lt;li&gt;We need a lot more data to do the regression. Here we use 300 data points.&lt;/li&gt;
&lt;li&gt;We need to specify a network architecture. Here we use one hidden layer with 10 neurons, and the tanh activation function on each neuron. The last layer is just the output layer. I do not claim this is any kind of optimal architecture. It is just one that works to illustrate the idea.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Here is the code that uses a neural network regressor, which is lightly adapted from &lt;a href="http://scikit-neuralnetwork.readthedocs.io/en/latest/guide_model.html"&gt;http://scikit-neuralnetwork.readthedocs.io/en/latest/guide_model.html&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; sknn.mlp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Regressor, Layer

&lt;span style="color: #BA36A5;"&gt;D&lt;/span&gt; = np.linspace(1.7, 3, 300)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;get_e&lt;/span&gt;(distance):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;a&lt;/span&gt; = atoms.copy()
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   a[1]&lt;span style="color: #BA36A5;"&gt;.x&lt;/span&gt; = distance
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   a.set_calculator(EMT())
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;e&lt;/span&gt; = a.get_potential_energy()
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; e

&lt;span style="color: #BA36A5;"&gt;E&lt;/span&gt; = np.array([get_e(dist) &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; dist &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; D])
&lt;span style="color: #BA36A5;"&gt;E&lt;/span&gt; -=  e0  &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;set the energy zero&lt;/span&gt;

&lt;span style="color: #BA36A5;"&gt;X_train&lt;/span&gt; = np.row_stack(np.array(D))

&lt;span style="color: #BA36A5;"&gt;N&lt;/span&gt; = 10
&lt;span style="color: #BA36A5;"&gt;nn&lt;/span&gt; = Regressor(layers=[Layer(&lt;span style="color: #008000;"&gt;"Tanh"&lt;/span&gt;, units=N),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  Layer(&lt;span style="color: #008000;"&gt;'Linear'&lt;/span&gt;)])
nn.fit(X_train, E)

&lt;span style="color: #BA36A5;"&gt;dfit&lt;/span&gt; = np.linspace(&lt;span style="color: #006FE0;"&gt;min&lt;/span&gt;(d), &lt;span style="color: #006FE0;"&gt;max&lt;/span&gt;(d))

&lt;span style="color: #BA36A5;"&gt;efit&lt;/span&gt; = nn.predict(np.row_stack(dfit))

plt.plot(d, e, &lt;span style="color: #008000;"&gt;'bo '&lt;/span&gt;)
plt.plot(dfit, efit)
plt.legend([&lt;span style="color: #008000;"&gt;'calculations'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'neural network'&lt;/span&gt;])
plt.xlabel(&lt;span style="color: #008000;"&gt;'d (&amp;#197;)'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'energy (eV)'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/ob-ipython-025c1b30f565c5806510804582e91242.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
This fit looks pretty good, better than we got for the Buckingham potential. Well, it probably should look better, we have many more parameters that were fitted! It is not perfect, but it could be systematically improved by increasing the number of hidden layers, and neurons in each layer. I am being a little loose here by relying on a visual assessment of the fit. To systematically improve it you would need a quantitative analysis of the errors. I also note though, that if I run the block above several times in succession, I get different fits each time. I suppose that is due to some random numbers used to initialize the fit, but sometimes the fit is about as good as the result you see above, and sometimes it is terrible.
&lt;/p&gt;

&lt;p&gt;
Ok, what is the point after all? We developed a neural network that pretty accurately captures the energy of a Cu dimer &lt;i&gt;with no knowledge&lt;/i&gt; of the physics involved. Now, EMT is not that expensive, but suppose this required 300 DFT calculations at 1 minute or more a piece? That is five hours just to get the data! With this neural network, we can quickly compute energies. For example, this shows we get about 10000 energy calculations in just 287 ms.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%%timeit

&lt;span style="color: #BA36A5;"&gt;dfit&lt;/span&gt; = np.linspace(&lt;span style="color: #006FE0;"&gt;min&lt;/span&gt;(d), &lt;span style="color: #006FE0;"&gt;max&lt;/span&gt;(d), 10000)
&lt;span style="color: #BA36A5;"&gt;efit&lt;/span&gt; = nn.predict(np.row_stack(dfit))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
1 loop, best of 3: 287 ms per loop
&lt;/p&gt;

&lt;p&gt;
Compare that to the time it took to compute the 300 energies with EMT
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%%timeit
&lt;span style="color: #BA36A5;"&gt;E&lt;/span&gt; = np.array([get_e(dist) &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; dist &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; D])
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
1 loop, best of 3: 230 ms per loop
&lt;/p&gt;

&lt;p&gt;
The neural network is a lot faster than the way we get the EMT energies!
&lt;/p&gt;

&lt;p&gt;
It is true in this case we could have used a spline, or interpolating function and it would likely be even better than this Neural Network. We are aiming to get more complicated soon though. For a trimer, we will have three dimensions to worry about, and that can still be worked out in a similar fashion I think. Past that, it becomes too hard to reduce the dimensions, and this approach breaks down. Then we have to try something else. We will get to that in another post.
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/03/18/Modeling-a-Cu-dimer-by-EMT,-nonlinear-regression-and-neural-networks.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>New publication in Calphad</title>
      <link>http://jkitchin.github.io/blog/2017/02/05/New-publication-in-Calphad</link>
      <pubDate>Sun, 05 Feb 2017 12:28:51 EST</pubDate>
      <category><![CDATA[publication]]></category>
      <category><![CDATA[news]]></category>
      <guid isPermaLink="false">hKkG7zpChJDHVJZerlUd83Y44I0=</guid>
      <description>New publication in Calphad</description>
      <content:encoded><![CDATA[


&lt;p&gt;
Alloys can have rich, complex phase behavior. Cu-Pd alloys for example show an unusual behavior where a BCC lattice forms for some compositions, even though the alloy is made from two metals that are exclusively FCC in structure! Being able to model and predict this kind of behavior is a major challenge. In this work, we use cluster expansions to model the configurational degrees of freedom in the FCC and BCC lattices and show qualitatively that we can predict the region where the B2 phase (the BCC one) forms. The agreement with experiment is not quantitative though, and we show that part this disagreement is due to the lack of vibrational entropy in the cluster expansion. When we include vibrational entropy, the qualitative agreement improves.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;geng-2017-first-princ&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       "Feiyang Geng and Jacob R. Boes and John R. Kitchin",
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {First-Principles Study of the Cu-Pd Phase Diagram},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      "Calphad ",
  &lt;span style="color: #BA36A5;"&gt;volume&lt;/span&gt; =       56,
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        "224 - 229",
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2017,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1016/j.calphad.2017.01.009&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =
                  {https://doi.org/http://dx.doi.org/10.1016/j.calphad.2017.01.009},
  &lt;span style="color: #BA36A5;"&gt;abstract&lt;/span&gt; =     "Abstract The equilibrium phase diagram of a Cu-Pd alloy has
                  been computed using cluster expansion and Monte Carlo
                  simulation methods combined with density functional theory.
                  The computed phase boundaries show basic features that are
                  consistent with the experimentally reported phase diagram.
                  Without vibrational free energy contributions, the
                  order-disorder transition temperature is underestimated by 100
                  K and the critical point is inconsistent with experimental
                  result. The addition of vibrational free energy contributions
                  yields a more qualitatively correct Cu-Pd phase diagram in the
                  Cu rich region. ",
  &lt;span style="color: #BA36A5;"&gt;issn&lt;/span&gt; =         "0364-5916",
  &lt;span style="color: #BA36A5;"&gt;keywords&lt;/span&gt; =     "Density functional theory",
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1016/j.calphad.2017.01.009'&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/02/05/New-publication-in-Calphad.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>New publication in Molecular Simulation</title>
      <link>http://jkitchin.github.io/blog/2017/02/01/New-publication-in-Molecular-Simulation</link>
      <pubDate>Wed, 01 Feb 2017 19:22:46 EST</pubDate>
      <category><![CDATA[publication]]></category>
      <category><![CDATA[news]]></category>
      <guid isPermaLink="false">4c2Cj3YeUKNCFDPd8t-cmFKQL0o=</guid>
      <description>New publication in Molecular Simulation</description>
      <content:encoded><![CDATA[


&lt;p&gt;
Molecules interact with each other when they adsorb on surfaces and these interactions are coverage dependent. Modeling these interactions is a challenge though, because there are many configurations of adsorbates on the surface, and the surface changes due to the interactions. To mitigate these challenges, one often simplifies the model, e.g. by using a cluster expansion or lattice gas Hamiltonian. These approaches have their own limitations though, and are not that useful for modeling dynamic processes like diffusion. Using molecular potentials enables the dynamic simulations, but not at the same level of accuracy as density functional theory. In this work we use density functional theory to train a neural network, and then use the neural network to model coverage-dependent adsorption isotherms and the dynamics of oxygen diffusion on a Pd(111) surface. We show the neural network can capture the onset of surface oxidation, and that the simulation results have comparable accuracy to the DFT calculations it was trained from.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;boes-2017-neural-networ&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       {Jacob R. Boes and John R. Kitchin},
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {Neural Network Predictions of Oxygen Interactions on a Dynamic
                  Pd Surface},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      {Molecular Simulation},
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        {1-9},
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2017,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1080/08927022.2016.1274984&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;https://doi.org/10.1080/08927022.2016.1274984&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;keywords&lt;/span&gt; =     {CBET-1506770},
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1080/08927022.2016.1274984'&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/02/01/New-publication-in-Molecular-Simulation.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>New publication in J. Phys. Chem. C</title>
      <link>http://jkitchin.github.io/blog/2017/01/31/New-publication-in-J-Phys-Chem-C</link>
      <pubDate>Tue, 31 Jan 2017 09:30:16 EST</pubDate>
      <category><![CDATA[publication]]></category>
      <category><![CDATA[news]]></category>
      <guid isPermaLink="false">UY3zYBAfRur5kO5Ev9KQFx4czBE=</guid>
      <description>New publication in J. Phys. Chem. C</description>
      <content:encoded><![CDATA[


&lt;p&gt;
The surface composition of an alloy is rarely the same as the bulk composition due to segregation, and it changes with changing reaction conditions. Segregation is a ubiquitous issue in alloy catalysis, and makes modeling alloy surfaces a challenge, because we need to know the surface composition to model them! In this work, we take a first step in using density functional theory to build a neural network potential that we can use with Monte Carlo simulations to predict the temperature dependent surface composition of an Au-Pd bulk alloy in a vacuum. This approach yielded quantitative predictions in good agreement with experimental measurements over the entire bulk composition range. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;boes-2017-model-segreg&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       {Boes, Jacob Russell and Kitchin, John R.},
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {Modeling Segregation on {AuPd}(111) Surfaces With Density
                  Functional Theory and Monte Carlo Simulations},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      {The Journal of Physical Chemistry C},
  &lt;span style="color: #BA36A5;"&gt;volume&lt;/span&gt; =       0,
  &lt;span style="color: #BA36A5;"&gt;number&lt;/span&gt; =       {ja},
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        {null},
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2017,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1021/acs.jpcc.6b12752&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;https://doi.org/10.1021/acs.jpcc.6b12752&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;eprint&lt;/span&gt; =       { http://dx.doi.org/10.1021/acs.jpcc.6b12752 },
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/acs.jpcc.6b12752'&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/31/New-publication-in-J.-Phys.-Chem.-C.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>ob-ipython and inline figures in org-mode</title>
      <link>http://jkitchin.github.io/blog/2017/01/29/ob-ipython-and-inline-figures-in-org-mode</link>
      <pubDate>Sun, 29 Jan 2017 16:05:22 EST</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[ipython]]></category>
      <guid isPermaLink="false">pPhlgLpnvw7lbCFbahsNhbl5Nyk=</guid>
      <description>ob-ipython and inline figures in org-mode</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org36f9eed"&gt;1. code for getting output and inline figures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; provides some nice support for inline images, but it is a little limited. You can only have one inline plot, and you cannot capture the printed output. I often want both, and use more than one figure in a code block. So, here I look at a way to get that. 
&lt;/p&gt;

&lt;p&gt;
When ob-ipython executes a cell, it gets two things internally: the output and a list of result elements. The output is all the stuff that is printed, and the result contains result cells. So, we just have to check these for images, and append them to the output in an appropriate way.  I will do that using file links so that org automatically renders them. We will save the images as temp files, since they are regenerated each time you run the cell. 
&lt;/p&gt;

&lt;p&gt;
I want output and inline figures. This ipython block should output some text and two figures. Note we do not define file names anywhere! See &lt;a href="#org36f9eed"&gt;this section&lt;/a&gt; for details on how to get ob-ipython to do this.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%matplotlib inline
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;t&lt;/span&gt; = np.linspace(0, 20 * np.pi, 350)
&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = np.exp(-0.1 * t) * np.sin(t)
&lt;span style="color: #BA36A5;"&gt;y&lt;/span&gt; = np.exp(-0.1 * t) * np.cos(t)

plt.plot(x, y)
plt.axis(&lt;span style="color: #008000;"&gt;'equal'&lt;/span&gt;)

plt.figure()
plt.plot(y, x)
plt.axis(&lt;span style="color: #008000;"&gt;'equal'&lt;/span&gt;)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'Length of t = {}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;len&lt;/span&gt;(t)))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'x .dot. y = {}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(x @ y))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Length of t = 350
x .dot. y = 1.3598389888491538
&lt;img src="/media/ob-ipython-86557tr2.png"&gt; 
&lt;img src="/media/ob-ipython-86557f1F.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
Nice, success! Now my code blocks &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks/"&gt;export more cleanly to jupyter notebooks&lt;/a&gt;. Speaking of which, if you liked the post on that, there is a new library for it in scimax: &lt;a href="https://github.com/jkitchin/scimax/blob/master/ox-ipynb.el"&gt;https://github.com/jkitchin/scimax/blob/master/ox-ipynb.el&lt;/a&gt;. Yes, one day I will put it in its own repo, and probably put it up on MELPA. If it turns out to be useful over the next semester. 
&lt;/p&gt;



&lt;div id="outline-container-org36f9eed" class="outline-2"&gt;
&lt;h2 id="org36f9eed"&gt;&lt;a id="ID-44FC1FFF-A6EA-466E-B61C-85B22E58781D"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; code for getting output and inline figures&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I wrote one new function that writes the base64 data out to a temporary file and returns a link to it. Then, I modified the org-babel-execute:ipython function to append these links onto the output. It seems like you need to use a header like this in your ob-ipython block, notably the results need to be in a drawer like this if you want org-mode to render the images. They do not show up in the results that have colons starting them.
&lt;/p&gt;

&lt;pre class="example"&gt;
#+BEGIN_SRC ipython :session :results output drawer
&lt;/pre&gt;

&lt;p&gt;
Here is the code.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;ob-ipython-inline-image&lt;/span&gt; (b64-string)
  &lt;span style="color: #036A07;"&gt;"Write the b64-string to a temporary file.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;Returns an org-link to the file."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((tfile (make-temp-file &lt;span style="color: #008000;"&gt;"ob-ipython-"&lt;/span&gt; nil &lt;span style="color: #008000;"&gt;".png"&lt;/span&gt;))
         (link (format &lt;span style="color: #008000;"&gt;"[[file:%s]]"&lt;/span&gt; tfile)))
    (ob-ipython--write-base64-string tfile b64-string)
    link))


(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;org-babel-execute:ipython&lt;/span&gt; (body params)
  &lt;span style="color: #036A07;"&gt;"Execute a block of IPython code with Babel.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;This function is called by `&lt;/span&gt;&lt;span style="color: #D0372D;"&gt;org-babel-execute-src-block&lt;/span&gt;&lt;span style="color: #036A07;"&gt;'."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((file (cdr (assoc &lt;span style="color: #006FE0;"&gt;:file&lt;/span&gt; params)))
         (session (cdr (assoc &lt;span style="color: #006FE0;"&gt;:session&lt;/span&gt; params)))
         (result-type (cdr (assoc &lt;span style="color: #006FE0;"&gt;:result-type&lt;/span&gt; params))))
    (org-babel-ipython-initiate-session session params)
    (&lt;span style="color: #0000FF;"&gt;-when-let&lt;/span&gt; (ret (ob-ipython--eval
                     (ob-ipython--execute-request
                      (org-babel-expand-body:generic (encode-coding-string body 'utf-8)
                                                     params (org-babel-variable-assignments:python params))
                      (ob-ipython--normalize-session session))))
      (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((result (cdr (assoc &lt;span style="color: #006FE0;"&gt;:result&lt;/span&gt; ret)))
            (output (cdr (assoc &lt;span style="color: #006FE0;"&gt;:output&lt;/span&gt; ret))))
        (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (eq result-type 'output)
            (concat
             output 
             (format &lt;span style="color: #008000;"&gt;"%s"&lt;/span&gt;
                     (mapconcat 'identity
                                (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for res in result
                                      if (eq 'image/png (car res))
                                      collect (ob-ipython-inline-image (cdr res)))
                                &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt;)))
          (ob-ipython--create-stdout-buffer output)
          (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt; ((&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; file (string= (f-ext file) &lt;span style="color: #008000;"&gt;"png"&lt;/span&gt;))
                 (&lt;span style="color: #0000FF;"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; result (assoc 'image/png) cdr (ob-ipython--write-base64-string file)))
                ((&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; file (string= (f-ext file) &lt;span style="color: #008000;"&gt;"svg"&lt;/span&gt;))
                 (&lt;span style="color: #0000FF;"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; result (assoc 'image/svg+xml) cdr (ob-ipython--write-string-to-file file)))
                (file (&lt;span style="color: #ff0000; font-weight: bold;"&gt;error&lt;/span&gt; &lt;span style="color: #008000;"&gt;"%s is currently an unsupported file extension."&lt;/span&gt; (f-ext file)))
                (t (&lt;span style="color: #0000FF;"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; result (assoc 'text/plain) cdr))))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
org-babel-execute:ipython
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/29/ob-ipython-and-inline-figures-in-org-mode.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Exporting org-mode to Jupyter notebooks</title>
      <link>http://jkitchin.github.io/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks</link>
      <pubDate>Sat, 21 Jan 2017 19:51:23 EST</pubDate>
      <category><![CDATA[jupyter]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[python]]></category>
      <category><![CDATA[orgmode]]></category>
      <guid isPermaLink="false">zZOrvYL2jKCFugy8FnPHFwU_I_Y=</guid>
      <description>Exporting org-mode to Jupyter notebooks</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orge344b68"&gt;1. Solve a nonlinear problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgdcea869"&gt;2. Benefits of export to ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org26076b0"&gt;3. Limitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgfe4c8f7"&gt;4. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I am going to use Jupyter notebooks to teach from this semester. I really dislike preparing notebooks though. A browser is a really poor editor, and I really dislike Markdown. Notebooks do not seem to have any real structure in them, e.g. the collapsible outline that I am used to in org-mode, so for long notebooks, it is difficult to get a sense for the structure. I am anticipating spending up to 80 hours preparing notebooks this semester, so today I worked out some code to export org-mode to an ipython notebook! 
&lt;/p&gt;

&lt;p&gt;
This will let me use the power tools I am accustomed to for the creation of IPython notebooks for my students, and perhaps others who do not use org-mode. 
&lt;/p&gt;

&lt;p&gt;
Jupyter notebooks are just json files, so all we need to do is generate it from an org document. The basic strategy was to build up a lisp data structure that represents the notebook and then just convert that data structure to json. I split the document up into sequential markdown and code cells, and then encode those in the format required for the notebook (json).
&lt;/p&gt;

&lt;p&gt;
So, here is an example of what can be easily written in org-mode, posted to this blog, and exported to an IPython notebook, all from one org-document.
&lt;/p&gt;

&lt;p&gt;
Check out the notebook:  &lt;a href="/media/exporting-orgmode-to-ipynb.ipynb"&gt;exporting-orgmode-to-ipynb.ipynb&lt;/a&gt; . 
&lt;/p&gt;

&lt;div id="outline-container-orge344b68" class="outline-2"&gt;
&lt;h2 id="orge344b68"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Solve a nonlinear problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Consider the equation \(x^2 = 4\). Find a solution to it in Python using a nonlinear solver. 
&lt;/p&gt;

&lt;p&gt;
To do that, we need to define an objective function that will be equal to zero at the solution. Here is the function:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;objective&lt;/span&gt;(x):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; x**2 - 4
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Next, we use fsolve with an initial guess. We get fsolve from &lt;a href="https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve"&gt;scipy.optimize&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; scipy.optimize &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; fsolve

&lt;span style="color: #BA36A5;"&gt;ans&lt;/span&gt; = fsolve(objective, 3)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[ 2.]
&lt;/pre&gt;

&lt;p&gt;
That should have been an obvious answer. The answer is in brackets because fsolve returns an array. In the next block we will unpack the solution into the answer using the comma operator. Also, we can see that using a different guess leads to a different answer. There are, of course, two answers: \(x = \pm 2\)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;ans, = fsolve(objective, -3)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
-2.0
&lt;/pre&gt;

&lt;p&gt;
Now you see we get a float answer!
&lt;/p&gt;

&lt;p&gt;
Here are some other ways to get a float:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #BA36A5;"&gt;ans&lt;/span&gt; = fsolve(objective, -3)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;float&lt;/span&gt;(ans))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans[0])
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
-2.0000000000000084
-2.0
&lt;/pre&gt;

&lt;p&gt;
It is worth noting from the first result that fsolve is iterative and stops when it reaches zero within a tolerance. That is why it is not exactly -2.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdcea869" class="outline-2"&gt;
&lt;h2 id="orgdcea869"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Benefits of export to ipynb&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;I can use org-mode&lt;/li&gt;
&lt;li&gt;And emacs&lt;/li&gt;
&lt;li&gt;and ipynb for teaching.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The export supports org-markup: &lt;b&gt;bold&lt;/b&gt;, &lt;i&gt;italic&lt;/i&gt;, &lt;span class="underline"&gt;underlined&lt;/span&gt;, and ~~strike~~.
&lt;/p&gt;

&lt;p&gt;
We can use tables:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;
&lt;caption class="t-above"&gt;&lt;span class="table-number"&gt;Table 1:&lt;/span&gt; A table of squares.&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;x&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
We can make plots.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;t&lt;/span&gt; = np.linspace(0, 2 * np.pi)

&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = np.cos(t)
&lt;span style="color: #BA36A5;"&gt;y&lt;/span&gt; = np.sin(t)

&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
plt.plot(x, y)
plt.axis(&lt;span style="color: #008000;"&gt;'equal'&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #008000;"&gt;'x'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'y'&lt;/span&gt;)
plt.savefig(&lt;span style="color: #008000;"&gt;'circle.png'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/circle.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
Even include HTML:
&amp;lt;font color="red"&amp;gt;Pay special attention to the axis labels!&amp;lt;/font&amp;gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org26076b0" class="outline-2"&gt;
&lt;h2 id="org26076b0"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Limitations&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Only supports iPython blocks&lt;/li&gt;
&lt;li&gt;Does not do inline images in results&lt;/li&gt;
&lt;li&gt;Will not support src-block variables&lt;/li&gt;
&lt;li&gt;Currently only supports vanilla output results&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgfe4c8f7" class="outline-2"&gt;
&lt;h2 id="orgfe4c8f7"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
The code that does this is here: &lt;a href="/media/ox-ipynb.el"&gt;ox-ipynb.el&lt;/a&gt; . After I use it a while I will put it in scimax. There are some tricks in it to fix up some markdown export of latex fragments and links with no descriptions.
&lt;/p&gt;

&lt;p&gt;
I just run this command in Emacs to get the notebook. Even it renders reasonably in the notebook.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(export-ipynb-buffer)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Overall, this looks extremely promising to develop lecture notes and assignments in org-mode, but export them to Ipython notebooks for the students.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content:encoded>
    </item>
  </channel>
</rss>
