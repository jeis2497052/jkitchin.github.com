<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <atom:link href="http://kitchingroup.cheme.cmu.edu/blog/feed/index.xml" rel="self" type="application/rss+xml" />
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Fri, 07 Apr 2017 19:01:03 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    
    <item>
      <title>ob-ipython and inline figures in org-mode</title>
      <link>http://jkitchin.github.io/blog/2017/01/29/ob-ipython-and-inline-figures-in-org-mode</link>
      <pubDate>Sun, 29 Jan 2017 16:05:22 EST</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[ipython]]></category>
      <guid isPermaLink="false">pPhlgLpnvw7lbCFbahsNhbl5Nyk=</guid>
      <description>ob-ipython and inline figures in org-mode</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org36f9eed"&gt;1. code for getting output and inline figures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; provides some nice support for inline images, but it is a little limited. You can only have one inline plot, and you cannot capture the printed output. I often want both, and use more than one figure in a code block. So, here I look at a way to get that. 
&lt;/p&gt;

&lt;p&gt;
When ob-ipython executes a cell, it gets two things internally: the output and a list of result elements. The output is all the stuff that is printed, and the result contains result cells. So, we just have to check these for images, and append them to the output in an appropriate way.  I will do that using file links so that org automatically renders them. We will save the images as temp files, since they are regenerated each time you run the cell. 
&lt;/p&gt;

&lt;p&gt;
I want output and inline figures. This ipython block should output some text and two figures. Note we do not define file names anywhere! See &lt;a href="#org36f9eed"&gt;this section&lt;/a&gt; for details on how to get ob-ipython to do this.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%matplotlib inline
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;t&lt;/span&gt; = np.linspace(0, 20 * np.pi, 350)
&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = np.exp(-0.1 * t) * np.sin(t)
&lt;span style="color: #BA36A5;"&gt;y&lt;/span&gt; = np.exp(-0.1 * t) * np.cos(t)

plt.plot(x, y)
plt.axis(&lt;span style="color: #008000;"&gt;'equal'&lt;/span&gt;)

plt.figure()
plt.plot(y, x)
plt.axis(&lt;span style="color: #008000;"&gt;'equal'&lt;/span&gt;)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'Length of t = {}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;len&lt;/span&gt;(t)))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'x .dot. y = {}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(x @ y))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Length of t = 350
x .dot. y = 1.3598389888491538
&lt;img src="/media/ob-ipython-86557tr2.png"&gt; 
&lt;img src="/media/ob-ipython-86557f1F.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
Nice, success! Now my code blocks &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks/"&gt;export more cleanly to jupyter notebooks&lt;/a&gt;. Speaking of which, if you liked the post on that, there is a new library for it in scimax: &lt;a href="https://github.com/jkitchin/scimax/blob/master/ox-ipynb.el"&gt;https://github.com/jkitchin/scimax/blob/master/ox-ipynb.el&lt;/a&gt;. Yes, one day I will put it in its own repo, and probably put it up on MELPA. If it turns out to be useful over the next semester. 
&lt;/p&gt;



&lt;div id="outline-container-org36f9eed" class="outline-2"&gt;
&lt;h2 id="org36f9eed"&gt;&lt;a id="ID-44FC1FFF-A6EA-466E-B61C-85B22E58781D"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; code for getting output and inline figures&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I wrote one new function that writes the base64 data out to a temporary file and returns a link to it. Then, I modified the org-babel-execute:ipython function to append these links onto the output. It seems like you need to use a header like this in your ob-ipython block, notably the results need to be in a drawer like this if you want org-mode to render the images. They do not show up in the results that have colons starting them.
&lt;/p&gt;

&lt;pre class="example"&gt;
#+BEGIN_SRC ipython :session :results output drawer
&lt;/pre&gt;

&lt;p&gt;
Here is the code.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;ob-ipython-inline-image&lt;/span&gt; (b64-string)
  &lt;span style="color: #036A07;"&gt;"Write the b64-string to a temporary file.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;Returns an org-link to the file."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((tfile (make-temp-file &lt;span style="color: #008000;"&gt;"ob-ipython-"&lt;/span&gt; nil &lt;span style="color: #008000;"&gt;".png"&lt;/span&gt;))
         (link (format &lt;span style="color: #008000;"&gt;"[[file:%s]]"&lt;/span&gt; tfile)))
    (ob-ipython--write-base64-string tfile b64-string)
    link))


(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;org-babel-execute:ipython&lt;/span&gt; (body params)
  &lt;span style="color: #036A07;"&gt;"Execute a block of IPython code with Babel.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;This function is called by `&lt;/span&gt;&lt;span style="color: #D0372D;"&gt;org-babel-execute-src-block&lt;/span&gt;&lt;span style="color: #036A07;"&gt;'."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((file (cdr (assoc &lt;span style="color: #006FE0;"&gt;:file&lt;/span&gt; params)))
         (session (cdr (assoc &lt;span style="color: #006FE0;"&gt;:session&lt;/span&gt; params)))
         (result-type (cdr (assoc &lt;span style="color: #006FE0;"&gt;:result-type&lt;/span&gt; params))))
    (org-babel-ipython-initiate-session session params)
    (&lt;span style="color: #0000FF;"&gt;-when-let&lt;/span&gt; (ret (ob-ipython--eval
                     (ob-ipython--execute-request
                      (org-babel-expand-body:generic (encode-coding-string body 'utf-8)
                                                     params (org-babel-variable-assignments:python params))
                      (ob-ipython--normalize-session session))))
      (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((result (cdr (assoc &lt;span style="color: #006FE0;"&gt;:result&lt;/span&gt; ret)))
            (output (cdr (assoc &lt;span style="color: #006FE0;"&gt;:output&lt;/span&gt; ret))))
        (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (eq result-type 'output)
            (concat
             output 
             (format &lt;span style="color: #008000;"&gt;"%s"&lt;/span&gt;
                     (mapconcat 'identity
                                (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for res in result
                                      if (eq 'image/png (car res))
                                      collect (ob-ipython-inline-image (cdr res)))
                                &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt;)))
          (ob-ipython--create-stdout-buffer output)
          (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt; ((&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; file (string= (f-ext file) &lt;span style="color: #008000;"&gt;"png"&lt;/span&gt;))
                 (&lt;span style="color: #0000FF;"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; result (assoc 'image/png) cdr (ob-ipython--write-base64-string file)))
                ((&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; file (string= (f-ext file) &lt;span style="color: #008000;"&gt;"svg"&lt;/span&gt;))
                 (&lt;span style="color: #0000FF;"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; result (assoc 'image/svg+xml) cdr (ob-ipython--write-string-to-file file)))
                (file (&lt;span style="color: #ff0000; font-weight: bold;"&gt;error&lt;/span&gt; &lt;span style="color: #008000;"&gt;"%s is currently an unsupported file extension."&lt;/span&gt; (f-ext file)))
                (t (&lt;span style="color: #0000FF;"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; result (assoc 'text/plain) cdr))))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
org-babel-execute:ipython
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/29/ob-ipython-and-inline-figures-in-org-mode.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content:encoded>
    </item>
  </channel>
</rss>
