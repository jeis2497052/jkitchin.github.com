<?xml version="1.0" encoding="UTF-8"?>

<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
  >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2017-04-22T00:01:27Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A new org-mode exporter to Word for scimax]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/04/15/A-new-org-mode-exporter-to-Word-for-scimax" />
    <id>http://jkitchin.github.io/blog/2017/04/15/A-new-org-mode-exporter-to-Word-for-scimax</id>
    <updated>2017-04-15T16:21:23Z</updated>
    <published>2017-04-15T16:19:05Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="export" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[A new org-mode exporter to Word for scimax]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/04/15/A-new-org-mode-exporter-to-Word-for-scimax"><![CDATA[


&lt;p&gt;
I am continuing to chip away to getting a reasonable export behavior for org-mode to MS Word. I have previously made some progress with Pandoc &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2015/01/29/Export-org-mode-to-docx-with-citations-via-pandoc/"&gt;here&lt;/a&gt; and &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2015/06/11/ox-pandoc-org-mode-+-org-ref-to-docx-with-bibliographies/"&gt;here&lt;/a&gt;, but those solutions never stuck with me. So here is another go. Here I leverage Pandoc again, but use a path through LaTeX to get citations without modifying the org-ref cite link syntax. The code for this can be found here: &lt;a href="https://github.com/jkitchin/scimax/blob/master/ox-word.el"&gt;https://github.com/jkitchin/scimax/blob/master/ox-word.el&lt;/a&gt;. The gist is you use org-ref like you always do, and you specify the bibliography style for Pandoc like this:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="/media/date-15-04-2017-time-16-06-53.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
You can download other csl files at &lt;a href="https://www.zotero.org/styles"&gt;https://www.zotero.org/styles&lt;/a&gt;. Then you can simply export the org-doc to a Word document with the key-binding C-c C-e w p.
&lt;/p&gt;

&lt;p&gt;
Here is an example document to illustrate the exporter. I have written about data sharing in catalysis &lt;a class='org-ref-reference' href="#kitchin-2015-examp"&gt;kitchin-2015-examp&lt;/a&gt; and surface science &lt;a class='org-ref-reference' href="#kitchin-2015-data-surfac-scien"&gt;kitchin-2015-data-surfac-scien&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Here is an example source block.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%matplotlib inline
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt

plt.plot([1, 2, 3, 4, 5, 6])
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/ob-ipython-b8591826ba9e316738705d03264316a5.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
See Ref. &lt;a href="#fig:line"&gt;fig:line&lt;/a&gt; for example. These do not work. That might require additional pre-processing to replace them with numbers.
&lt;/p&gt;

&lt;p&gt;
Here is the Word document that is generated: &lt;a href="/media/2017-04-15.docx"&gt;2017-04-15.docx&lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;
As a penultimate result it might be ok. The references are reasonably formatted, but not compatible with Endnote, or other bibliography manager software. There are still some issues with Figure numbering and cross-references, but it is not too bad. The main benefit of this seems to be that one source generates HTML and the Word document.
&lt;/p&gt;

&lt;p&gt;

&lt;h1 class='org-ref-bib-h1'&gt;Bibliography&lt;/h1&gt;
&lt;ul class='org-ref-bib'&gt;&lt;li&gt;&lt;a id="kitchin-2015-examp"&gt;[kitchin-2015-examp] Kitchin, Examples of Effective Data Sharing in Scientific Publishing, &lt;i&gt;ACS Catalysis&lt;/i&gt;, &lt;b&gt;5(6)&lt;/b&gt;, 3894-3899 (2015). &lt;a href=" http://dx.doi.org/10.1021/acscatal.5b00538 "&gt;link&lt;/a&gt;. &lt;a href="http://dx.doi.org/10.1021/acscatal.5b00538"&gt;doi&lt;/a&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id="kitchin-2015-data-surfac-scien"&gt;[kitchin-2015-data-surfac-scien] "John Kitchin", Data Sharing in Surface Science, &lt;i&gt;"Surface Science "&lt;/i&gt;, &lt;b&gt;647&lt;/b&gt;, 103-107 (2016). &lt;a href="http://www.sciencedirect.com/science/article/pii/S0039602815001326"&gt;link&lt;/a&gt;. &lt;a href="http://dx.doi.org/10.1016/j.susc.2015.05.007"&gt;doi&lt;/a&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/15/A-new-org-mode-exporter-to-Word-for-scimax.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Autoformatting ordinal numbers and fractions in orgmode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/04/11/Autoformatting-ordinal-numbers-and-fractions-in-orgmode" />
    <id>http://jkitchin.github.io/blog/2017/04/11/Autoformatting-ordinal-numbers-and-fractions-in-orgmode</id>
    <updated>2017-04-11T15:05:56Z</updated>
    <published>2017-04-11T15:05:56Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Autoformatting ordinal numbers and fractions in orgmode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/04/11/Autoformatting-ordinal-numbers-and-fractions-in-orgmode"><![CDATA[


&lt;p&gt;
MS Word has a &lt;i&gt;few&lt;/i&gt; things I like. One of them is the ability to autoformat things to make an ordinal number string like 1st to the superscripted version 1&lt;sup&gt;st&lt;/sup&gt; while you type or a 1/2 to Â½.  I thought it would be pretty easy to implement that for org-mode. It turns out it was not so easy!
&lt;/p&gt;

&lt;p&gt;
There does not appear to be a way to specify a regexp pattern as an abbreviation, or an abbrev that starts with a number. What we need for ordinal numbers is to recognize a sequence of numbers followed by "st", "nd", "rd" or "th" followed by a space or punctuation, and then superscript the letters. In case you didn't want the replacement to occur, you should be able to undo it and get back the original string. This addition was a little hard won, so I am sharing the lessons here.
&lt;/p&gt;

&lt;p&gt;
The logic I used is to put a function in the post-self-insert-hook. The function only works in org-mode, when not in a codeblock and when looking back at a regexp that matches a pattern to be replaced. Getting it to undo was trickier than expected. Eventually I worked out that you put an undo boundary in place before the change, and then it seems like you can undo the changes. I created a minor mode so it is easy to toggle this on and off.
&lt;/p&gt;

&lt;p&gt;
Here is the implementation:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defcustom&lt;/span&gt; &lt;span style="color: #BA36A5;"&gt;scimax-autoformat-ordinals&lt;/span&gt; t
  &lt;span style="color: #036A07;"&gt;"Determines if scimax autoformats ordinal numbers."&lt;/span&gt;
  &lt;span style="color: #006FE0;"&gt;:group&lt;/span&gt; 'scimax)

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-org-autoformat-ordinals&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Expand ordinal words to superscripted versions in org-mode.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;1st to 1^{st}.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;2nd to 2^{nd}&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;3rd to 3^{rd}&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;4th to 4^{th}"&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; scimax-autoformat-ordinals
             (eq major-mode 'org-mode)
             (not (org-in-src-block-p))
             (looking-back &lt;span style="color: #008000;"&gt;"&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?3:&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\&amp;lt;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?1:&lt;/span&gt;&lt;span style="color: #008000;"&gt;[0-9]+&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?2:&lt;/span&gt;&lt;span style="color: #008000;"&gt;st&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;nd&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;rd&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;th&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\&amp;gt;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?:&lt;/span&gt;&lt;span style="color: #008000;"&gt;[[:punct:]]&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;[[:space:]]&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;"&lt;/span&gt;
                           (line-beginning-position)))
    (undo-boundary)
    (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt;
      (replace-match &lt;span style="color: #008000;"&gt;"\\1^{\\2}"&lt;/span&gt; nil nil nil 3))))


(&lt;span style="color: #0000FF;"&gt;defcustom&lt;/span&gt; &lt;span style="color: #BA36A5;"&gt;scimax-autoformat-fractions&lt;/span&gt; t
  &lt;span style="color: #036A07;"&gt;"Determines if scimax autoformats fractions."&lt;/span&gt;
  &lt;span style="color: #006FE0;"&gt;:group&lt;/span&gt; 'scimax)


(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-org-autoformat-fractions&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Expand fractions to take up space."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; scimax-autoformat-fractions
             (eq major-mode 'org-mode)
             (not (org-in-src-block-p))
             (looking-back &lt;span style="color: #008000;"&gt;"&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?3:&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\&amp;lt;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(&lt;/span&gt;&lt;span style="color: #008000;"&gt;1/4&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;1/2&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;3/4&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\&amp;gt;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?:&lt;/span&gt;&lt;span style="color: #008000;"&gt;[[:punct:]]&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;[[:space:]]&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;"&lt;/span&gt;
                           (line-beginning-position)))
    (undo-boundary)
    (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt;
      (replace-match (cdr (assoc (match-string 3) '((&lt;span style="color: #008000;"&gt;"1/4"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"&amp;#188;"&lt;/span&gt;)
                                                    (&lt;span style="color: #008000;"&gt;"1/2"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"&amp;#189;"&lt;/span&gt;)
                                                    (&lt;span style="color: #008000;"&gt;"3/4"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"&amp;#190;"&lt;/span&gt;))))
                     nil nil nil 3))))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-org-autoformat&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Autoformat functions."&lt;/span&gt;
  (scimax-org-autoformat-ordinals)
  (scimax-org-autoformat-fractions))

(&lt;span style="color: #0000FF;"&gt;define-minor-mode&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-autoformat-mode&lt;/span&gt;
  &lt;span style="color: #036A07;"&gt;"Toggle `&lt;/span&gt;&lt;span style="color: #D0372D;"&gt;scimax-autoformat-mode&lt;/span&gt;&lt;span style="color: #036A07;"&gt;'.  Converts 1st to 1^{st} as you type."&lt;/span&gt;
  &lt;span style="color: #006FE0;"&gt;:init-value&lt;/span&gt; nil
  &lt;span style="color: #006FE0;"&gt;:lighter&lt;/span&gt; (&lt;span style="color: #008000;"&gt;" om"&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; scimax-ordinal-mode
      (add-hook 'post-self-insert-hook #'scimax-org-autoformat nil 'local)
    (remove-hook 'post-self-insert-hook #'scimax-org-autoformat 'local)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This is now a feature in scimax. This marks the 500&lt;sup&gt;th&lt;/sup&gt; blog post! That is Â½ way to 1000. At the current rate of posting, it will be at least 5 years until I hit that!
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/11/Autoformatting-ordinal-numbers-and-fractions-in-orgmode.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A better return in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/04/09/A-better-return-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2017/04/09/A-better-return-in-org-mode</id>
    <updated>2017-04-20T09:19:56Z</updated>
    <published>2017-04-09T10:56:42Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[A better return in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/04/09/A-better-return-in-org-mode"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org774898d"&gt;1. a subheading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4f302f8"&gt;2. another Subheading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Over on &lt;a href="http://emacs.stackexchange.com/questions/24574/org-mode-default-to-alt-enter-for-bullets"&gt;Stackoverflow&lt;/a&gt; someone wanted a better return in org-mode. They wanted return to add items in a list (instead of M-Ret). Someone posted a partial solution, and here I improve on it to add new items to lists, new headings after a heading, and new rows to tables. In each case, a double return on an empty item, headline or table row will delete that line, and terminate the list, headlines or table. You can still use M-Ret, and this function falls through to org-return like it did before. You can use a prefix arg to get a regular return if you want one (e.g. you want to press enter on a headline to push it down).
&lt;/p&gt;

&lt;p&gt;
Here is the function. Give it a try. It is a small but helpful addition I think. I have not used it for long, so if you come across issues leave a comment!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;org-inlinetask&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax/org-return&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;optional&lt;/span&gt; ignore)
  &lt;span style="color: #036A07;"&gt;"Add new list item, heading or table row with RET.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;A double return on an empty element deletes it.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;Use a prefix arg to get regular RET. "&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt; &lt;span style="color: #008000;"&gt;"P"&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; ignore
      (org-return)
    (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;

     ((eq 'line-break (car (org-element-context)))
      (org-return-indent))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Open links like usual, unless point is at the end of a line.&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;and if at beginning of line, just press enter.&lt;/span&gt;
     ((&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (eq 'link (car (org-element-context))) (not (eolp)))
          (bolp))
      (org-return))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;It doesn't make sense to add headings in inline tasks. Thanks Anders&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Johansson!&lt;/span&gt;
     ((org-inlinetask-in-task-p)
      (org-return))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;checkboxes too&lt;/span&gt;
     ((org-at-item-checkbox-p)
      (org-insert-todo-heading nil))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;lists end with two blank lines, so we need to make sure we are also not&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;at the beginning of a line to avoid a loop where a new entry gets&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;created with only one blank line.&lt;/span&gt;
     ((org-in-item-p)
      (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt; (beginning-of-line) (org-element-property &lt;span style="color: #006FE0;"&gt;:contents-begin&lt;/span&gt; (org-element-context)))
          (org-insert-heading)
        (beginning-of-line)
        (delete-region (line-beginning-position) (line-end-position))
        (org-return)))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;org-heading&lt;/span&gt;
     ((org-at-heading-p)
      (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (not (string= &lt;span style="color: #008000;"&gt;""&lt;/span&gt; (org-element-property &lt;span style="color: #006FE0;"&gt;:title&lt;/span&gt; (org-element-context))))
          (&lt;span style="color: #0000FF;"&gt;progn&lt;/span&gt; (org-end-of-meta-data)
                 (org-insert-heading-respect-content)
                 (outline-show-entry))
        (beginning-of-line)
        (&lt;span style="color: #0000FF;"&gt;setf&lt;/span&gt; (buffer-substring
               (line-beginning-position) (line-end-position)) &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;tables&lt;/span&gt;
     ((org-at-table-p)
      (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (-any?
           (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (x) (not (string= &lt;span style="color: #008000;"&gt;""&lt;/span&gt; x)))
           (nth
            (- (org-table-current-dline) 1)
            (org-table-to-lisp)))
          (org-return)
        &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;empty row&lt;/span&gt;
        (beginning-of-line)
        (&lt;span style="color: #0000FF;"&gt;setf&lt;/span&gt; (buffer-substring
               (line-beginning-position) (line-end-position)) &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)
        (org-return)))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;fall-through case&lt;/span&gt;
     (t
      (org-return)))))


(define-key org-mode-map (kbd &lt;span style="color: #008000;"&gt;"RET"&lt;/span&gt;)
  'scimax/org-return)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here are a few tests:
&lt;/p&gt;


&lt;ol class="org-ol"&gt;
&lt;li&gt;numbered item&lt;/li&gt;
&lt;li&gt;second item
&lt;ol class="org-ol"&gt;
&lt;li&gt;nested number&lt;/li&gt;
&lt;li&gt;second number&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;unordered 1&lt;/li&gt;
&lt;li&gt;unordered 2
&lt;ul class="org-ul"&gt;
&lt;li&gt;nested&lt;/li&gt;
&lt;li&gt;nested 2
&lt;ul class="org-ul"&gt;
&lt;li&gt;nested with link: &lt;a href="http://emacs.stackexchange.com"&gt;http://emacs.stackexchange.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class="org-ul"&gt;
&lt;li class="off"&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; check 1&lt;/li&gt;
&lt;li class="off"&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; check 2&lt;/li&gt;
&lt;li class="off"&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; check 3&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="inlinetask"&gt;
&lt;b&gt;an inline task&lt;/b&gt;&lt;br /&gt;
&lt;p&gt;
With some content
&lt;/p&gt;
&lt;/div&gt;


&lt;div id="outline-container-org774898d" class="outline-2"&gt;
&lt;h2 id="org774898d"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; a subheading&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4f302f8" class="outline-2"&gt;
&lt;h2 id="org4f302f8"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; another Subheading&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/09/A-better-return-in-org-mode.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Exporting org-mode to Jupyter notebooks]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks" />
    <id>http://jkitchin.github.io/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks</id>
    <updated>2017-01-25T08:50:18Z</updated>
    <published>2017-01-21T19:51:23Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="jupyter" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Exporting org-mode to Jupyter notebooks]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orge344b68"&gt;1. Solve a nonlinear problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgdcea869"&gt;2. Benefits of export to ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org26076b0"&gt;3. Limitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgfe4c8f7"&gt;4. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I am going to use Jupyter notebooks to teach from this semester. I really dislike preparing notebooks though. A browser is a really poor editor, and I really dislike Markdown. Notebooks do not seem to have any real structure in them, e.g. the collapsible outline that I am used to in org-mode, so for long notebooks, it is difficult to get a sense for the structure. I am anticipating spending up to 80 hours preparing notebooks this semester, so today I worked out some code to export org-mode to an ipython notebook! 
&lt;/p&gt;

&lt;p&gt;
This will let me use the power tools I am accustomed to for the creation of IPython notebooks for my students, and perhaps others who do not use org-mode. 
&lt;/p&gt;

&lt;p&gt;
Jupyter notebooks are just json files, so all we need to do is generate it from an org document. The basic strategy was to build up a lisp data structure that represents the notebook and then just convert that data structure to json. I split the document up into sequential markdown and code cells, and then encode those in the format required for the notebook (json).
&lt;/p&gt;

&lt;p&gt;
So, here is an example of what can be easily written in org-mode, posted to this blog, and exported to an IPython notebook, all from one org-document.
&lt;/p&gt;

&lt;p&gt;
Check out the notebook:  &lt;a href="/media/exporting-orgmode-to-ipynb.ipynb"&gt;exporting-orgmode-to-ipynb.ipynb&lt;/a&gt; . 
&lt;/p&gt;

&lt;div id="outline-container-orge344b68" class="outline-2"&gt;
&lt;h2 id="orge344b68"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Solve a nonlinear problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Consider the equation \(x^2 = 4\). Find a solution to it in Python using a nonlinear solver. 
&lt;/p&gt;

&lt;p&gt;
To do that, we need to define an objective function that will be equal to zero at the solution. Here is the function:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;objective&lt;/span&gt;(x):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; x**2 - 4
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Next, we use fsolve with an initial guess. We get fsolve from &lt;a href="https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve"&gt;scipy.optimize&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; scipy.optimize &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; fsolve

&lt;span style="color: #BA36A5;"&gt;ans&lt;/span&gt; = fsolve(objective, 3)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[ 2.]
&lt;/pre&gt;

&lt;p&gt;
That should have been an obvious answer. The answer is in brackets because fsolve returns an array. In the next block we will unpack the solution into the answer using the comma operator. Also, we can see that using a different guess leads to a different answer. There are, of course, two answers: \(x = \pm 2\)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;ans, = fsolve(objective, -3)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
-2.0
&lt;/pre&gt;

&lt;p&gt;
Now you see we get a float answer!
&lt;/p&gt;

&lt;p&gt;
Here are some other ways to get a float:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #BA36A5;"&gt;ans&lt;/span&gt; = fsolve(objective, -3)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;float&lt;/span&gt;(ans))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans[0])
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
-2.0000000000000084
-2.0
&lt;/pre&gt;

&lt;p&gt;
It is worth noting from the first result that fsolve is iterative and stops when it reaches zero within a tolerance. That is why it is not exactly -2.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdcea869" class="outline-2"&gt;
&lt;h2 id="orgdcea869"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Benefits of export to ipynb&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;I can use org-mode&lt;/li&gt;
&lt;li&gt;And emacs&lt;/li&gt;
&lt;li&gt;and ipynb for teaching.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The export supports org-markup: &lt;b&gt;bold&lt;/b&gt;, &lt;i&gt;italic&lt;/i&gt;, &lt;span class="underline"&gt;underlined&lt;/span&gt;, and ~~strike~~.
&lt;/p&gt;

&lt;p&gt;
We can use tables:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;
&lt;caption class="t-above"&gt;&lt;span class="table-number"&gt;Table 1:&lt;/span&gt; A table of squares.&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;x&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
We can make plots.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;t&lt;/span&gt; = np.linspace(0, 2 * np.pi)

&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = np.cos(t)
&lt;span style="color: #BA36A5;"&gt;y&lt;/span&gt; = np.sin(t)

&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
plt.plot(x, y)
plt.axis(&lt;span style="color: #008000;"&gt;'equal'&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #008000;"&gt;'x'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'y'&lt;/span&gt;)
plt.savefig(&lt;span style="color: #008000;"&gt;'circle.png'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/circle.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
Even include HTML:
&amp;lt;font color="red"&amp;gt;Pay special attention to the axis labels!&amp;lt;/font&amp;gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org26076b0" class="outline-2"&gt;
&lt;h2 id="org26076b0"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Limitations&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Only supports iPython blocks&lt;/li&gt;
&lt;li&gt;Does not do inline images in results&lt;/li&gt;
&lt;li&gt;Will not support src-block variables&lt;/li&gt;
&lt;li&gt;Currently only supports vanilla output results&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgfe4c8f7" class="outline-2"&gt;
&lt;h2 id="orgfe4c8f7"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
The code that does this is here: &lt;a href="/media/ox-ipynb.el"&gt;ox-ipynb.el&lt;/a&gt; . After I use it a while I will put it in scimax. There are some tricks in it to fix up some markdown export of latex fragments and links with no descriptions.
&lt;/p&gt;

&lt;p&gt;
I just run this command in Emacs to get the notebook. Even it renders reasonably in the notebook.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(export-ipynb-buffer)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Overall, this looks extremely promising to develop lecture notes and assignments in org-mode, but export them to Ipython notebooks for the students.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Find stuff in org-mode anywhere]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/01/03/Find-stuff-in-org-mode-anywhere" />
    <id>http://jkitchin.github.io/blog/2017/01/03/Find-stuff-in-org-mode-anywhere</id>
    <updated>2017-01-03T14:33:32Z</updated>
    <published>2017-01-03T14:33:32Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="database" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Find stuff in org-mode anywhere]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/01/03/Find-stuff-in-org-mode-anywhere"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org961d2be"&gt;1. The database design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbda3471"&gt;2. Querying the link table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8284133"&gt;3. Headline queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7d75505"&gt;4. Keyword queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org08feb51"&gt;5. Full text search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbb3d71f"&gt;6. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I use org-mode &lt;i&gt;extensively&lt;/i&gt;. I write scientific papers, keep notes on meetings, write letters of recommendation, notes on scientific articles, keep TODO lists in projects, help files for software, write lecture notes, students send me homework solutions in it, it is a contact database, &amp;#x2026; Some files are on Dropbox, Google Drive, Box, some in git repos, etc. The problem is that leads to org-files everywhere on my hard drive. At this point I have several thousand org-files that span about five years of work.
&lt;/p&gt;

&lt;p&gt;
It is not that easy after a while to find them. Yes there are things like recent-files, bookmarks, counsel-find-file, helm-for-files, counsel/helm-locate, helm/counsel-grep/ag/pt, projectile for searching within a project, a slew of tools to search open buffers, there is &lt;a href="https://www.lesbonscomptes.com/recoll/"&gt;recoll&lt;/a&gt;, etc&amp;#x2026; There are desktop search tools, and of course, good organization habits. Over a five year time span though, these change, and I have yet to find a solution to finding what I want. What about a file I made a year ago that is not in the current directory or this project, and not in my org-agenda-files list? How do I get a dynamic todo list across all these files? Or find all the files that cite a particular bibtex entry, or that were authored by a particular student?
&lt;/p&gt;

&lt;p&gt;
Previously, &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2015/07/06/Indexing-headlines-in-org-files-with-swish-e-with-laser-sharp-results/"&gt;I indexed org files with Swish-e&lt;/a&gt; to make it easy to search them, with an ability to search just headlines, or paragraphs, etc. The problem with that is the nightly indexing was slow since I basically had to regenerate the database each time due to limitations in Swish-e. Finally I have gotten around to the next iteration of this idea, which is a better database. In this post, I explore using sqlite to store headlines and links in org-files.
&lt;/p&gt;

&lt;p&gt;
The idea is that anytime I open or save &lt;i&gt;any&lt;/i&gt; org file, it will be added/updated in the database. The database will store the headlines and its properties and content, as well as the location and properties of all links and file keywords. That means I should be able to efficiently query all org files I have ever visited to find TODO headlines, tagged headlines, different types of links, etc. Here we try it out and see if it is useful.
&lt;/p&gt;


&lt;div id="outline-container-org961d2be" class="outline-2"&gt;
&lt;h2 id="org961d2be"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; The database design&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I used &lt;a href="https://github.com/skeeto/emacsql"&gt;emacsql&lt;/a&gt; to create and interact with a sqlite3 database. It is a lispy way to generate SQL queries. I will not talk about the code much here, you can see this version &lt;a href="/media/org-db.el"&gt;org-db.el&lt;/a&gt; . The database design consists of several tables that contain the filenames, headlines, tags, properties, (optionally) headline-content, headline-tags, headline-properties, and links. The lisp code is a work in progress, and not something I use on a daily basis yet. This post is a proof of concept to see how well this approach works. 
&lt;/p&gt;

&lt;p&gt;
I use hooks to update the database when an org-file is opened (only if it is different than what is in the database based on an md5 hash) and when it is saved. Basically, these functions delete the current entries in the database for a file, then use regular expressions to go to each headline or link in the file, and add data back to the database. I found this to be faster than parsing the org-file with org-element especially for large files. Since this is all done by a hook, anytime I open an org-file anywhere it gets added/updated to the database. The performance of this is ok. This approach will not guarantee the database is 100% accurate all the time (e.g. if something modifies the file outside of emacs, like a git pull), but it doesn't need to be. Most of the files do not change often, the database gets updated each time you open a file, and you can always reindex the database from files it knows about. Time will tell how often that seems necessary.
&lt;/p&gt;

&lt;p&gt;
emacsql lets you use lisp code to generate SQL that is sent to the database. Here is an example:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql-flatten-sql [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; [name] &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; main:sqlite_master &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (= type table)])
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
SELECT name FROM main.sqlite_master WHERE type = "table";
&lt;/pre&gt;

&lt;p&gt;
There are some nuances, for example, main:sqlite_master gets converted to main.sqlite_master. You use vectors, keywords, and sexps to setup the command. emacsql will turn a name like filename-id into filename_id. It was not too difficulty to figure out, and the author of emacsql was really helpful on a few points. I will be referring to this post in the future to remember some of these nuances!
&lt;/p&gt;

&lt;p&gt;
Here is a list of tables in the database. There are a few primary tables, and then some that store tags, properties, and keywords on the headlines. This is typical of emacsql code; it is a lisp expression that generates SQL.  In this next expression org-db is a variable that stores the database connection created in org-db.el.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; [name] &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; main:sqlite_master &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (= type table)])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;files&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;tags&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;properties&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;keywords&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headlines&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_content&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_content_content&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_content_segments&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_content_segdir&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_content_docsize&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_content_stat&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_tags&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_properties&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;file_keywords&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;links&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here is a description of the columns in the files table:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:pragma&lt;/span&gt; (funcall table_info files)])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;rowid&lt;/td&gt;
&lt;td class="org-right"&gt;INTEGER&lt;/td&gt;
&lt;td class="org-left"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;filename&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;md5&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
and the headlines table.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:pragma&lt;/span&gt; (funcall table_info headlines)])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;rowid&lt;/td&gt;
&lt;td class="org-right"&gt;INTEGER&lt;/td&gt;
&lt;td class="org-left"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;filename_id&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;title&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-left"&gt;level&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-left"&gt;todo_keyword&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-left"&gt;todo_type&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;td class="org-left"&gt;archivedp&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;7&lt;/td&gt;
&lt;td class="org-left"&gt;commentedp&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;8&lt;/td&gt;
&lt;td class="org-left"&gt;footnote_section_p&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;td class="org-left"&gt;begin&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Tags and properties on a headline are stored in headline-tags and headline-properties. 
&lt;/p&gt;

&lt;p&gt;
The database is not large if all it has is headlines and links (no content). It got up to half a GB with content, and seemed a little slow, so for this post I leave the content out.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;du -hs ~/org-db/org-db.sqlite
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;56M&lt;/td&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/org-db/org-db.sqlite&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here we count how many files are in the database. These are just the org-files in my Dropbox folder. There are a lot of them! If I include all the org-files from my research and teaching projects this number grows to about 10,000! You do not want to run org-map-entries on that. Note this also includes all of the org_archive files.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; (funcall count) &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; files])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1569&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here is the headlines count. You can see there is no chance of remembering where these are because there are so many!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; (funcall count) &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; headlines])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;38587&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
And the links. So many links!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; (funcall count) &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; links])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;303739&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
That is a surprising number of links. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbda3471" class="outline-2"&gt;
&lt;h2 id="orgbda3471"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Querying the link table&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Let's see how many are cite links from org-ref there are.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; (funcall count) &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; links &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (= type &lt;span style="color: #008000;"&gt;"cite"&lt;/span&gt;)])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;14766&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Wow, I find that to also be surprisingly large!  I make a living writing proposals and scientific papers, and I wrote org-ref to make that easier, so maybe it should not be so surprising. We can search the link database for files containing citations of "kitchin-2015-examp" like this.  The links table only stores the filename-id, so we join it with the files table to get useful information. Here we show the list of files that contain a citation of that reference. It is a mix of manuscripts, proposals, presentations, documentation files and notes.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:distinct&lt;/span&gt; [files:filename]
                 &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; links &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; files &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= links:filename-id files:rowid) 
                 &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= type &lt;span style="color: #008000;"&gt;"cite"&lt;/span&gt;) (like path &lt;span style="color: #008000;"&gt;"%kitchin-2015-examp%"&lt;/span&gt;))])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/2015/Research_Data_Publishing_Paper/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/2015/Research_Data_Publishing_Paper/manuscript-2015-06-29/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/2015/Research_Data_Publishing_Paper/manuscript-2015-10-10/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/2015/Research_Data_Publishing_Paper/manuscript-2016-03-09/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/2015/Research_Data_Publishing_Paper/manuscript-2016-04-18/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/2015/human-readable-data/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/@archive/2015/Research_Data_Publishing_Paper/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/@archive/2015/Research_Data_Publishing_Paper/manuscript-2015-06-29/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/@archive/2015/Research_Data_Publishing_Paper/manuscript-2015-10-10/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/@archive/2015/Research_Data_Publishing_Paper/manuscript-2016-03-09/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/@archive/2015/Research_Data_Publishing_Paper/manuscript-2016-04-18/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/@archive/2015/human-readable-data/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/meetings/@archive/2015/BES-2015/doe-bes-wed-data-briefing/doe-bes-wed-data-sharing.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/meetings/@archive/2015/NIST-july-2015/data-sharing.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/meetings/@archive/2015/UD-webinar/ud-webinar.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/meetings/@archive/2016/AICHE/data-sharing/data-sharing.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/meetings/@archive/2016/Spring-ACS/data-sharing/data-sharing.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/projects/DOE-Early-Career/annual-reports/final-report/kitchin-DESC0004031-final-report.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2015/DOE-renewal/proposal-v2.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2015/DOE-renewal/archive/proposal.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2016/DOE-single-atom-alloy/proposal.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2016/MRSEC/MRSEC-IRG-metastable-materials-preproposal/IRG-concept.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2016/ljaf-open-science/kitchin-proposal.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2016/nsf-germination/project-description.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2016/nsf-reu-supplement/project-description.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2016/proctor-and-gamble-education/proposal.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/bibliography/notes.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/kitchingroup/jmax/org-ref/citeproc/readme.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/kitchingroup/jmax/org-ref/citeproc/readme-unsrt.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/kitchingroup/jmax/org-ref/citeproc/readme-author-year.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/kitchingroup/jmax/org-ref/tests/test-1.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/kitchingroup/jmax/org-ref/tests/sandbox/elpa/org-ref-20160122.1725/citeproc/readme.org&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Obviously we could use this to generate candidates for something like helm or ivy like this. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(ivy-read &lt;span style="color: #008000;"&gt;"Open: "&lt;/span&gt; (emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; [files:filename links:begin]
                                    &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; links &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; files &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= links:filename-id files:rowid) 
                                    &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= type &lt;span style="color: #008000;"&gt;"cite"&lt;/span&gt;) (like path &lt;span style="color: #008000;"&gt;"%kitchin-2015-examp%"&lt;/span&gt;))])
          &lt;span style="color: #006FE0;"&gt;:action&lt;/span&gt; '(1 (&lt;span style="color: #008000;"&gt;"o"&lt;/span&gt;
                       (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (c)
                         (find-file (car c))
                         (goto-char (nth 1 c))
                         (org-show-entry)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
/Users/jkitchin/Dropbox/CMU/manuscripts/2015/human-readable-data/manuscript.org
&lt;/pre&gt;

&lt;p&gt;
Now, you can find every org-file containing any bibtex key as a citation. Since SQL is the query language, you should be able to build really sophisticated queries that combine filters for multiple citations, different kinds of citations, etc.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8284133" class="outline-2"&gt;
&lt;h2 id="org8284133"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Headline queries&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Every headline is stored, along with its location, tags and properties. We can use the database to find headlines that are tagged or with certain properties. You can see here I have 293 tags in the database.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; (funcall count) &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; tags])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;293&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here we find headlines tagged with electrolyte. I tagged some papers I read with this at some point.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:distinct&lt;/span&gt; [files:filename headlines:title]
                 &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; headlines &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; headline-tags &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (=  headlines:rowid headline-tags:headline-id)
                 &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; tags &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= tags:rowid headline-tags:tag-id)
                 &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; files &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= headlines:filename-id files:rowid)
                 &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (= tags:tag &lt;span style="color: #008000;"&gt;"electrolyte"&lt;/span&gt;) &lt;span style="color: #006FE0;"&gt;:limit&lt;/span&gt; 5])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/org-mode/prj-doe-early-career.org&lt;/td&gt;
&lt;td class="org-left"&gt;2010 - Nickel-borate oxygen-evolving catalyst that functions under benign conditions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/bibliography/notes.org&lt;/td&gt;
&lt;td class="org-left"&gt;1971 - A Correlation of the Solution Properties and the  Electrochemical Behavior of the Nickel Hydroxide  Electrode in Binary Aqueous Alkali Hydroxides&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/bibliography/notes.org&lt;/td&gt;
&lt;td class="org-left"&gt;1981 - Studies concerning charged nickel hydroxide electrodes IV. Reversible potentials in LiOH, NaOH, RbOH and CsOH&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/bibliography/notes.org&lt;/td&gt;
&lt;td class="org-left"&gt;1986 - The effect of lithium in preventing iron poisoning in the nickel hydroxide electrode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/bibliography/notes.org&lt;/td&gt;
&lt;td class="org-left"&gt;1996 - The role of lithium in preventing the detrimental effect of iron on alkaline battery nickel hydroxide electrode: A mechanistic aspect&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here we see how many entries have an EMAIL property. These could serve as contacts to send email to.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; [(funcall count)] &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt;
                 headlines &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; headline-properties &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (=  headlines:rowid headline-properties:headline-id)
                 &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; properties &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= properties:rowid headline-properties:property-id)
                 &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= properties:property &lt;span style="color: #008000;"&gt;"EMAIL"&lt;/span&gt;) (not (null headline-properties:value)))])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;7452&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
If you want to see the ones that match "jkitchin", here they are. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:distinct&lt;/span&gt; [headlines:title headline-properties:value] &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt;
             headlines &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; headline-properties &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (=  headlines:rowid headline-properties:headline-id)
             &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; properties &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= properties:rowid headline-properties:property-id)
             &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= properties:property &lt;span style="color: #008000;"&gt;"EMAIL"&lt;/span&gt;) (like headline-properties:value &lt;span style="color: #008000;"&gt;"%jkitchin%"&lt;/span&gt;))])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;John Kitchin&lt;/td&gt;
&lt;td class="org-left"&gt;jkitchin@andrew.cmu.edu&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;John Kitchin&lt;/td&gt;
&lt;td class="org-left"&gt;jkitchin@cmu.edu&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Kitchin, John&lt;/td&gt;
&lt;td class="org-left"&gt;jkitchin@andrew.cmu.edu&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
Here is a query to find the number of headlines where the deadline matches 2017. Looks like I am already busy!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; (funcall count) &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt;
             headlines &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; headline-properties &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (=  headlines:rowid headline-properties:headline-id)
             &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; properties &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= properties:rowid headline-properties:property-id)
             &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= properties:property &lt;span style="color: #008000;"&gt;"DEADLINE"&lt;/span&gt;) (glob headline-properties:value &lt;span style="color: #008000;"&gt;"*2017*"&lt;/span&gt;))])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7d75505" class="outline-2"&gt;
&lt;h2 id="org7d75505"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Keyword queries&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
We also store file keywords, so we can search on document titles, authors, etc. Here are five documents with titles longer than 35 characters sorted in descending order. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:distinct&lt;/span&gt; [value] &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt;
                 file-keywords &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; keywords &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= file-keywords:keyword-id keywords:rowid)
                 &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (&amp;gt; (funcall length value) 35) (= keywords:keyword &lt;span style="color: #008000;"&gt;"TITLE"&lt;/span&gt;))
                 &lt;span style="color: #006FE0;"&gt;:order&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:by&lt;/span&gt; value &lt;span style="color: #006FE0;"&gt;:desc&lt;/span&gt;
                 &lt;span style="color: #006FE0;"&gt;:limit&lt;/span&gt; 5])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;pycse - Python3 Computations in Science and Engineering&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;org-show - simple presentations in org-mode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;org-mode - A Human Readable, Machine Addressable Approach to Data Archiving and Sharing in Science and Engineering&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;modifying emacs to make typing easier.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;jmax - John's customizations to maximize Emacs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
It is possible to search on AUTHOR, and others. My memos have a #+SUBJECT keyword, so I can find memos on a subject. They also use the LATEX_CLASS of cmu-memo, so I can find all of them easily too:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; [(funcall count)] &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt;
                 file-keywords &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; keywords &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= file-keywords:keyword-id keywords:rowid)
                 &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= value &lt;span style="color: #008000;"&gt;"cmu-memo"&lt;/span&gt;) (= keywords:keyword &lt;span style="color: #008000;"&gt;"LATEX_CLASS"&lt;/span&gt;))
                 &lt;span style="color: #006FE0;"&gt;:limit&lt;/span&gt; 5])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;119&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
How about that, 119 memos&amp;#x2026; Still it sure is nice to be able to find them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org08feb51" class="outline-2"&gt;
&lt;h2 id="org08feb51"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Full text search&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
In theory, the database has a table for the headline content, and it should be fully searchable. I found the database got a little sluggish, and nearly 1/2 a GB in size when using it so I am leaving it out for now.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbb3d71f" class="outline-2"&gt;
&lt;h2 id="orgbb3d71f"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
The foundation for something really good is here. It is still a little tedious to wrote the queries with all the table joins, but some of that could be wrapped into a function for a query. I like the lispy style of the queries, although it can be tricky to map all the concepts onto SQL. A function that might wrap this could look like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-db-query (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= properties:property &lt;span style="color: #008000;"&gt;"DEADLINE"&lt;/span&gt;) (glob headline-properties:value &lt;span style="color: #008000;"&gt;"*2017*"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This is what it would ideally look like using the org tag/property match syntax. Somehow that string would have to get expanded to generate the code above. I do not have a sense for how difficult that would be. It might not be hard with &lt;a href="https://github.com/skeeto/rdp"&gt;a recursive descent parser&lt;/a&gt;, written by the same author as emacsql.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-db-query &lt;span style="color: #008000;"&gt;"DEADLINE={2017}"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The performance is only ok. For large org files there is a notable lag in updating the database, which is notable because while updating, Emacs is blocked. I could try using an idle timer for updates with a queue, or get more clever about when to update. It is not essential that the updates be real-time, only that they are reasonably accurate or done by the time I next search. For now, it is not too annoying though. As a better database, I have had my eye on &lt;a href="https://xapian.org"&gt;xapian&lt;/a&gt; since that is what mu4e (and notmuch) uses. It might be good to have an external library for parsing org-files, i.e. not through emacs, for this. It would certainly be faster. It seems like a big project though, maybe next summer ;)
&lt;/p&gt;

&lt;p&gt;
Another feature this might benefit from is ignore patterns, or some file feature that prevents it from being indexed. For example, I keep an encrypted password file in org-mode, but as soon as I opened it, it got indexed right into the database, in plain text. If you walk your file system, it might make sense to avoid some directories, like .dropbox.cache. Otherwise, this still looks like a promising approach. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/03/Find-stuff-in-org-mode-anywhere.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Context-specific org-mode speed keys]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/12/22/Context-specific-org-mode-speed-keys" />
    <id>http://jkitchin.github.io/blog/2016/12/22/Context-specific-org-mode-speed-keys</id>
    <updated>2016-12-22T13:18:06Z</updated>
    <published>2016-12-22T13:18:06Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Context-specific org-mode speed keys]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/12/22/Context-specific-org-mode-speed-keys"><![CDATA[


&lt;p&gt;
I have been using org-mode to make a contact database. A contact is basically just a headline with an EMAIL property, e.g. &lt;a href="https://julien.danjou.info/projects/emacs-packages#org-contacts"&gt;https://julien.danjou.info/projects/emacs-packages#org-contacts&lt;/a&gt;.  I thought it would be nice to have an org-mode speed key so that if I was at the beginning of a contact headline, I could just press "e" to open an email buffer to that contact. This might generally be useful to have different speed keys that serve different purposes or are only defined on specific types of headlines.
&lt;/p&gt;

&lt;p&gt;
Org-mode already had this feature in mind for speed keys. All you have to do is define the list of speed keys and their functions, provide a function that picks the right one, and add it to the org-speed-command-hook. Here is the code that makes this possible. This defines "c" to copy the email to the clipboard, "e" to email the contact, and "m" to copy a "name &amp;lt;email&amp;gt;" string to the clipboard, but only when you are on a headline with an EMAIL property. If there is not a contact specific speed key defined, then a user-defined speed key or a default key will be used if it is defined. In case I do not remember the keys, "?" will show them to me. It is small hack, but if you end up using the contact headlines for much, it might be really helpful as an alternative to M-x some-contacts-command.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; org-speed-commands-contacts
      '((&lt;span style="color: #008000;"&gt;"c"&lt;/span&gt; . (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; ()
                 &lt;span style="color: #036A07;"&gt;"Copy the email address to the clipboard."&lt;/span&gt;
                 (message (kill-new (org-entry-get (point) &lt;span style="color: #008000;"&gt;"EMAIL"&lt;/span&gt;)))))
        (&lt;span style="color: #008000;"&gt;"e"&lt;/span&gt; . (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; ()
                 &lt;span style="color: #036A07;"&gt;"Send an email to the contact."&lt;/span&gt;
                 (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((email (org-entry-get (point) &lt;span style="color: #008000;"&gt;"EMAIL"&lt;/span&gt;)))
                   (compose-mail)
                   (message-goto-to)
                   (insert email)
                   (message-goto-subject)))) 
        (&lt;span style="color: #008000;"&gt;"m"&lt;/span&gt; . (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; ()
                 &lt;span style="color: #036A07;"&gt;"Copy \"name &amp;lt;email&amp;gt;\""&lt;/span&gt;
                 (message (kill-new
                           (format &lt;span style="color: #008000;"&gt;"%s &amp;lt;%s&amp;gt;"&lt;/span&gt;
                                   (nth 4 (org-heading-components))
                                   (org-entry-get (point) &lt;span style="color: #008000;"&gt;"EMAIL"&lt;/span&gt;))))))
        (&lt;span style="color: #008000;"&gt;"?"&lt;/span&gt; . (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; ()
                 &lt;span style="color: #036A07;"&gt;"Print contacts speed key help."&lt;/span&gt;
                 (&lt;span style="color: #0000FF;"&gt;with-output-to-temp-buffer&lt;/span&gt; &lt;span style="color: #008000;"&gt;"*Help*"&lt;/span&gt;
                   (princ &lt;span style="color: #008000;"&gt;"Contacts Speed commands\n===========================\n"&lt;/span&gt;)
                   (mapc #'org-print-speed-command org-speed-commands-contacts)
                   (princ &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt;)
                   (princ &lt;span style="color: #008000;"&gt;"User-defined Speed commands\n===========================\n"&lt;/span&gt;)
                   (mapc #'org-print-speed-command org-speed-commands-user)
                   (princ &lt;span style="color: #008000;"&gt;"Built-in Speed commands\n=======================\n"&lt;/span&gt;)
                   (mapc #'org-print-speed-command org-speed-commands-default))
                 (&lt;span style="color: #0000FF;"&gt;with-current-buffer&lt;/span&gt; &lt;span style="color: #008000;"&gt;"*Help*"&lt;/span&gt;
                   (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; truncate-lines t))))))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;org-speed-contacts&lt;/span&gt; (keys)
  (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (bolp) (looking-at org-outline-regexp)
             (not (null (org-entry-get (point) &lt;span style="color: #008000;"&gt;"EMAIL"&lt;/span&gt;))))
    (cdr (assoc keys org-speed-commands-contacts))))

(add-hook 'org-speed-command-hook 'org-speed-contacts)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2016 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2016/12/22/Context-specific-org-mode-speed-keys.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Persistent highlighting in Emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/11/10/Persistent-highlighting-in-Emacs" />
    <id>http://jkitchin.github.io/blog/2016/11/10/Persistent-highlighting-in-Emacs</id>
    <updated>2016-11-10T09:16:38Z</updated>
    <published>2016-11-10T09:16:38Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Persistent highlighting in Emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/11/10/Persistent-highlighting-in-Emacs"><![CDATA[


&lt;p&gt;
In this &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2016/11/08/New-color-link-in-org-9-0-using-font-lock-to-color-the-text/"&gt;recent post&lt;/a&gt; I showed a way to use org-mode links to color text. The main advantage of that approach is it is explicit markup in the file, so it is persistent and exportable to html. The downside of that approach is you cannot use it in code, since the markup will break the code.
&lt;/p&gt;

&lt;p&gt;
An alternative approach is to use overlays to color the text. This allows you to color the text, add annotations as tooltips and to provide a variety of highlighting colors. Overlays are not explicit markup in the file, so it is necessary to think of a way to save them so they can be restored later. We do this by using hook functions to store the overlays in a file-local variable on saving, and a file-local variable to restore the overlays when the file is opened. I bind the primary function `ov-highlighter/body' to a key, in my case hyper-h, which launches a hydra to access the commands.
&lt;/p&gt;

&lt;p&gt;
You can find the code here: &lt;a href="https://github.com/jkitchin/scimax/blob/org-9/ov-highlighter.el"&gt;https://github.com/jkitchin/scimax/blob/org-9/ov-highlighter.el&lt;/a&gt;. Probably around mid-December it will get merged into the master branch.
&lt;/p&gt;

&lt;p&gt;
Here is what this looks like in my buffer:
&lt;/p&gt;


&lt;p&gt;
&lt;img src="/media/date-10-11-2016-time-09-05-44.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
You may want to see the video:
&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/syeRq_LBFns" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;blue green pink yellow custom&lt;/li&gt;
&lt;li&gt;Put a comment here.&lt;/li&gt;
&lt;li&gt;Markup a tpyo.&lt;/li&gt;
&lt;li&gt;Get a list of the highlights in the buffer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
These highlights are pretty awesome. They work in code blocks, and comments. They also work in non-org files (only in Emacs of course).
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #BA36A5;"&gt;a&lt;/span&gt; = 5
&lt;span style="color: #BA36A5;"&gt;b&lt;/span&gt; = 6

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(a+b)&lt;span style="color: #8D8D84;"&gt;#&lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;print the sum of a and b&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
11
&lt;/p&gt;

&lt;p&gt;
Overall, this is pretty handy. You can highlight your own notes, provide feedback to others, etc. without changing the actual text in the document (well, except for the local variables at the end of the buffer, but these are usually in a "comment" that does not affect the document).
&lt;/p&gt;


&lt;p&gt;
Here are few limitations though:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;You can only edit/change the file in Emacs, and the hook functions have to enabled, or the overlay data will get corrupted. That means a merge conflict can ruin the overlays.&lt;/li&gt;
&lt;li&gt;Anyone you share the file with needs to have the ov-highlighter library loaded too. Otherwise they will not see the highlights, and any edits will make the overlay data incorrect.&lt;/li&gt;
&lt;li&gt;The highlights do not export from org-mode (although they do work with `htmlize-buffer'!).&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((html-buffer (htmlize-buffer))
       (html (&lt;span style="color: #0000FF;"&gt;with-current-buffer&lt;/span&gt; html-buffer
               (buffer-string))))
  (&lt;span style="color: #0000FF;"&gt;with-temp-file&lt;/span&gt; &lt;span style="color: #008000;"&gt;"test.html"&lt;/span&gt;
    (insert html))
  (kill-buffer html-buffer))

(browse-url &lt;span style="color: #008000;"&gt;"test.html"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
#&amp;lt;process open test.html&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Copyright (C) 2016 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2016/11/10/Persistent-highlighting-in-Emacs.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[New and improved asynchronous org-babel python blocks]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/11/09/New-and-improved-asynchronous-org-babel-python-blocks" />
    <id>http://jkitchin.github.io/blog/2016/11/09/New-and-improved-asynchronous-org-babel-python-blocks</id>
    <updated>2016-11-09T11:00:01Z</updated>
    <published>2016-11-09T11:00:01Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[New and improved asynchronous org-babel python blocks]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/11/09/New-and-improved-asynchronous-org-babel-python-blocks"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgb1ee49d"&gt;1. autopep8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgcca807a"&gt;2. pylint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
About a year ago I posted some code to run org-babel python blocks &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2015/11/20/Asynchronously-running-python-blocks-in-org-mode/"&gt;asynchronously&lt;/a&gt;. This year, my students asked for some enhancements related to debugging. Basically, they were frustrated by a few things when they got errors. First, they found it difficult to find the line number in the Traceback in the src block because there are no line numbers in the block, and it is annoying to do a special edit just for line numbers.  
&lt;/p&gt;

&lt;p&gt;
I thought about this, and figured out how to significantly improve the situation. The async python code in scimax now has the following features:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;When you get a Traceback, it goes in the results, and each file listed in it is hyperlinked to the source file and line so it is easy to get to them.&lt;/li&gt;
&lt;li&gt;The cursor jumps to the last line in the code block that is listed in the Traceback, and a beacon shines to show you the line&lt;/li&gt;
&lt;li&gt;You can turn on temporary line numbers in the code block to see where the lines are in the block, and these disappear when you start typing. This is done in the variable `org-babel-async-python-show-line-numbers'.&lt;/li&gt;
&lt;li&gt;You can control whether a buffer of the results shows or not via the variable `org-babel-async-python-show-results'.&lt;/li&gt;
&lt;li&gt;When you run the block, you get a clickable link in the RESULTS section to kill the process.&lt;/li&gt;
&lt;li&gt;You may also find the `autopep8' and `pylint' functions helpful.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The code for this is currently found here:
&lt;a href="https://github.com/jkitchin/scimax/blob/org-9/scimax-org-babel-python.el"&gt;https://github.com/jkitchin/scimax/blob/org-9/scimax-org-babel-python.el&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Eventually, I will merge this into master, after I am sure about all the changes needed for org 9.0. That is not likely to happen until the semester ends, so I do not mess up my students who use scimax in class. So, sometime mid-December it will make into master.
&lt;/p&gt;

&lt;p&gt;
To make async the default way to run a python block use this code, so that you can use C-c C-c to run them:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;scimax-org-babel-python&lt;/span&gt;)
(add-to-list 'org-ctrl-c-ctrl-c-hook 'org-babel-async-execute:python)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
As with the past few posts, this video will make it much more clear what the post is about: 
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/m4vCXM7_p_o" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
Here is a prototypical example that shows how it works. While it runs you can view the progress if you click on the link to show the results.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; time

&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; i &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;range&lt;/span&gt;(5):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(i)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   time.sleep(2)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
0
1
2
3
4
Traceback (most recent call last):
  File "Org SRC", line 5, in &amp;lt;module&amp;gt;
    time.sleep(2)
KeyboardInterrupt
&lt;/p&gt;




&lt;p&gt;
This block has a pretty obvious issue when we run it. The cursor jumps right to the problem!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'This line is ok'&lt;/span&gt;)
&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;5 / 0&lt;/span&gt;
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'We will not see this'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This line is ok
We will not see this
&lt;/p&gt;



&lt;p&gt;
This block shows we can access any of the links in the Traceback. Here we have an error in calling a function that is raised in an external file.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; scipy.integrate &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; odeint

&lt;span style="color: #BA36A5;"&gt;Vspan&lt;/span&gt; = np.linspace(0, 2) &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;L&lt;/span&gt;

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;dF/dV = F&lt;/span&gt;
&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;dFdV&lt;/span&gt;(F, V, v0):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; F


&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(odeint(dFdV, 1.0, Vspan))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Traceback (most recent call last):
  File "Org SRC", line 11, in &amp;lt;module&amp;gt;
    print(odeint(dFdV, 1.0, Vspan))
  File "/Users/jkitchin/anaconda3/lib/python3.5/site-packages/scipy/integrate/odepack.py", line 215, in odeint
    ixpr, mxstep, mxhnil, mxordn, mxords)
TypeError: dFdV() missing 1 required positional argument: 'v0'
&lt;/p&gt;


&lt;p&gt;
Here we show how nice it is to be able to kill a process. This block will not end on its own.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;while&lt;/span&gt; &lt;span style="color: #D0372D;"&gt;True&lt;/span&gt;:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;pass&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Traceback (most recent call last):
  File "Org SRC", line 2, in &amp;lt;module&amp;gt;
    pass
KeyboardInterrupt
&lt;/p&gt;

&lt;div id="outline-container-orgb1ee49d" class="outline-2"&gt;
&lt;h2 id="orgb1ee49d"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; autopep8&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
&lt;a href="https://pypi.python.org/pypi/autopep8"&gt;autopep8&lt;/a&gt; is a tool for reformatting Python code. We wrapped this into an Emacs command so you can quickly reformat a Python code block. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #BA36A5;"&gt;a&lt;/span&gt; = 4
&lt;span style="color: #BA36A5;"&gt;b&lt;/span&gt; = 5
&lt;span style="color: #BA36A5;"&gt;c&lt;/span&gt; = a * b  &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;comment&lt;/span&gt;
&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;another comment&lt;/span&gt;


&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;f&lt;/span&gt;(x):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; x
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(f(5))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcca807a" class="outline-2"&gt;
&lt;h2 id="orgcca807a"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; pylint&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
&lt;a href="https://www.pylint.org"&gt;pylint&lt;/a&gt; is a great tool for checking your Python code for errors, style and conventions. We also wrapped this into an Emacs command so you can run it on a Python src block. The report that is generated had clickable links to help you get right to the lines in your code block with problems.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;a&lt;/span&gt; = np.array(5, 5)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;f&lt;/span&gt;(x): &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; x

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(f(6))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2016 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2016/11/09/New-and-improved-asynchronous-org-babel-python-blocks.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[New color link in org 9.0 using font-lock to color the text]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/11/08/New-color-link-in-org-9-0-using-font-lock-to-color-the-text" />
    <id>http://jkitchin.github.io/blog/2016/11/08/New-color-link-in-org-9-0-using-font-lock-to-color-the-text</id>
    <updated>2016-11-08T18:36:28Z</updated>
    <published>2016-11-08T18:36:28Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[New color link in org 9.0 using font-lock to color the text]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/11/08/New-color-link-in-org-9-0-using-font-lock-to-color-the-text"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org7a9df33"&gt;1. Code for the color link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I previously blogged about &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2016/01/16/Colored-text-in-org-mode-with-export-to-HTML/"&gt;colored text in org-mode&lt;/a&gt; using links. Back in org 8.0, we had to do some tricky work with font-lock to get the colors to work, and particularly had to use overlays to get reliable coloring. Org 9.0 improves this a lot, with the font-lock built right in, and some other nice features like completion. The integration of font-lock means we do not have to deal with overlays! Here is what it looks like in my buffer:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="/media/date-08-11-2016-time-18-31-18.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
And it exports nicely to HTML. You can see the code here: &lt;a href="#org7a9df33"&gt;Code for the color link&lt;/a&gt;. This is good for small bits of text you want colored. It is not good for paragraphs, or text with line breaks in it, because links do not support that. It also is not useful in code blocks since the link syntax would break the code. You need an alternative approach for those applications which is more complicated than these simple links. One nice feature of this is the persistence (I mean it comes back when you open the file after closing it) of the color since it is explicit markup in the file.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for color in color-name-rgb-alist
      do
      (princ (format &lt;span style="color: #008000;"&gt;"[[color:%s][Text colored in %s]] "&lt;/span&gt; (car color) (car color))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;span style="color: rgb(255,250,250)"&gt;Text colored in snow&lt;/span&gt; &lt;span style="color: rgb(248,248,255)"&gt;Text colored in ghostwhite&lt;/span&gt; &lt;span style="color: rgb(245,245,245)"&gt;Text colored in whitesmoke&lt;/span&gt; &lt;span style="color: rgb(220,220,220)"&gt;Text colored in gainsboro&lt;/span&gt; &lt;span style="color: rgb(255,250,240)"&gt;Text colored in floralwhite&lt;/span&gt; &lt;span style="color: rgb(253,245,230)"&gt;Text colored in oldlace&lt;/span&gt; &lt;span style="color: rgb(250,240,230)"&gt;Text colored in linen&lt;/span&gt; &lt;span style="color: rgb(250,235,215)"&gt;Text colored in antiquewhite&lt;/span&gt; &lt;span style="color: rgb(255,239,213)"&gt;Text colored in papayawhip&lt;/span&gt; &lt;span style="color: rgb(255,235,205)"&gt;Text colored in blanchedalmond&lt;/span&gt; &lt;span style="color: rgb(255,228,196)"&gt;Text colored in bisque&lt;/span&gt; &lt;span style="color: rgb(255,218,185)"&gt;Text colored in peachpuff&lt;/span&gt; &lt;span style="color: rgb(255,222,173)"&gt;Text colored in navajowhite&lt;/span&gt; &lt;span style="color: rgb(255,228,181)"&gt;Text colored in moccasin&lt;/span&gt; &lt;span style="color: rgb(255,248,220)"&gt;Text colored in cornsilk&lt;/span&gt; &lt;span style="color: rgb(255,255,240)"&gt;Text colored in ivory&lt;/span&gt; &lt;span style="color: rgb(255,250,205)"&gt;Text colored in lemonchiffon&lt;/span&gt; &lt;span style="color: rgb(255,245,238)"&gt;Text colored in seashell&lt;/span&gt; &lt;span style="color: rgb(240,255,240)"&gt;Text colored in honeydew&lt;/span&gt; &lt;span style="color: rgb(245,255,250)"&gt;Text colored in mintcream&lt;/span&gt; &lt;span style="color: rgb(240,255,255)"&gt;Text colored in azure&lt;/span&gt; &lt;span style="color: rgb(240,248,255)"&gt;Text colored in aliceblue&lt;/span&gt; &lt;span style="color: rgb(230,230,250)"&gt;Text colored in lavender&lt;/span&gt; &lt;span style="color: rgb(255,240,245)"&gt;Text colored in lavenderblush&lt;/span&gt; &lt;span style="color: rgb(255,228,225)"&gt;Text colored in mistyrose&lt;/span&gt; &lt;span style="color: rgb(255,255,255)"&gt;Text colored in white&lt;/span&gt; &lt;span style="color: rgb(0,0,0)"&gt;Text colored in black&lt;/span&gt; &lt;span style="color: rgb(47,79,79)"&gt;Text colored in darkslategray&lt;/span&gt; &lt;span style="color: rgb(47,79,79)"&gt;Text colored in darkslategrey&lt;/span&gt; &lt;span style="color: rgb(105,105,105)"&gt;Text colored in dimgray&lt;/span&gt; &lt;span style="color: rgb(105,105,105)"&gt;Text colored in dimgrey&lt;/span&gt; &lt;span style="color: rgb(112,128,144)"&gt;Text colored in slategray&lt;/span&gt; &lt;span style="color: rgb(112,128,144)"&gt;Text colored in slategrey&lt;/span&gt; &lt;span style="color: rgb(119,136,153)"&gt;Text colored in lightslategray&lt;/span&gt; &lt;span style="color: rgb(119,136,153)"&gt;Text colored in lightslategrey&lt;/span&gt; &lt;span style="color: rgb(190,190,190)"&gt;Text colored in gray&lt;/span&gt; &lt;span style="color: rgb(190,190,190)"&gt;Text colored in grey&lt;/span&gt; &lt;span style="color: rgb(211,211,211)"&gt;Text colored in lightgrey&lt;/span&gt; &lt;span style="color: rgb(211,211,211)"&gt;Text colored in lightgray&lt;/span&gt; &lt;span style="color: rgb(25,25,112)"&gt;Text colored in midnightblue&lt;/span&gt; &lt;span style="color: rgb(0,0,128)"&gt;Text colored in navy&lt;/span&gt; &lt;span style="color: rgb(0,0,128)"&gt;Text colored in navyblue&lt;/span&gt; &lt;span style="color: rgb(100,149,237)"&gt;Text colored in cornflowerblue&lt;/span&gt; &lt;span style="color: rgb(72,61,139)"&gt;Text colored in darkslateblue&lt;/span&gt; &lt;span style="color: rgb(106,90,205)"&gt;Text colored in slateblue&lt;/span&gt; &lt;span style="color: rgb(123,104,238)"&gt;Text colored in mediumslateblue&lt;/span&gt; &lt;span style="color: rgb(132,112,255)"&gt;Text colored in lightslateblue&lt;/span&gt; &lt;span style="color: rgb(0,0,205)"&gt;Text colored in mediumblue&lt;/span&gt; &lt;span style="color: rgb(65,105,225)"&gt;Text colored in royalblue&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;Text colored in blue&lt;/span&gt; &lt;span style="color: rgb(30,144,255)"&gt;Text colored in dodgerblue&lt;/span&gt; &lt;span style="color: rgb(0,191,255)"&gt;Text colored in deepskyblue&lt;/span&gt; &lt;span style="color: rgb(135,206,235)"&gt;Text colored in skyblue&lt;/span&gt; &lt;span style="color: rgb(135,206,250)"&gt;Text colored in lightskyblue&lt;/span&gt; &lt;span style="color: rgb(70,130,180)"&gt;Text colored in steelblue&lt;/span&gt; &lt;span style="color: rgb(176,196,222)"&gt;Text colored in lightsteelblue&lt;/span&gt; &lt;span style="color: rgb(173,216,230)"&gt;Text colored in lightblue&lt;/span&gt; &lt;span style="color: rgb(176,224,230)"&gt;Text colored in powderblue&lt;/span&gt; &lt;span style="color: rgb(175,238,238)"&gt;Text colored in paleturquoise&lt;/span&gt; &lt;span style="color: rgb(0,206,209)"&gt;Text colored in darkturquoise&lt;/span&gt; &lt;span style="color: rgb(72,209,204)"&gt;Text colored in mediumturquoise&lt;/span&gt; &lt;span style="color: rgb(64,224,208)"&gt;Text colored in turquoise&lt;/span&gt; &lt;span style="color: rgb(0,255,255)"&gt;Text colored in cyan&lt;/span&gt; &lt;span style="color: rgb(224,255,255)"&gt;Text colored in lightcyan&lt;/span&gt; &lt;span style="color: rgb(95,158,160)"&gt;Text colored in cadetblue&lt;/span&gt; &lt;span style="color: rgb(102,205,170)"&gt;Text colored in mediumaquamarine&lt;/span&gt; &lt;span style="color: rgb(127,255,212)"&gt;Text colored in aquamarine&lt;/span&gt; &lt;span style="color: rgb(0,100,0)"&gt;Text colored in darkgreen&lt;/span&gt; &lt;span style="color: rgb(85,107,47)"&gt;Text colored in darkolivegreen&lt;/span&gt; &lt;span style="color: rgb(143,188,143)"&gt;Text colored in darkseagreen&lt;/span&gt; &lt;span style="color: rgb(46,139,87)"&gt;Text colored in seagreen&lt;/span&gt; &lt;span style="color: rgb(60,179,113)"&gt;Text colored in mediumseagreen&lt;/span&gt; &lt;span style="color: rgb(32,178,170)"&gt;Text colored in lightseagreen&lt;/span&gt; &lt;span style="color: rgb(152,251,152)"&gt;Text colored in palegreen&lt;/span&gt; &lt;span style="color: rgb(0,255,127)"&gt;Text colored in springgreen&lt;/span&gt; &lt;span style="color: rgb(124,252,0)"&gt;Text colored in lawngreen&lt;/span&gt; &lt;span style="color: rgb(0,255,0)"&gt;Text colored in green&lt;/span&gt; &lt;span style="color: rgb(127,255,0)"&gt;Text colored in chartreuse&lt;/span&gt; &lt;span style="color: rgb(0,250,154)"&gt;Text colored in mediumspringgreen&lt;/span&gt; &lt;span style="color: rgb(173,255,47)"&gt;Text colored in greenyellow&lt;/span&gt; &lt;span style="color: rgb(50,205,50)"&gt;Text colored in limegreen&lt;/span&gt; &lt;span style="color: rgb(154,205,50)"&gt;Text colored in yellowgreen&lt;/span&gt; &lt;span style="color: rgb(34,139,34)"&gt;Text colored in forestgreen&lt;/span&gt; &lt;span style="color: rgb(107,142,35)"&gt;Text colored in olivedrab&lt;/span&gt; &lt;span style="color: rgb(189,183,107)"&gt;Text colored in darkkhaki&lt;/span&gt; &lt;span style="color: rgb(240,230,140)"&gt;Text colored in khaki&lt;/span&gt; &lt;span style="color: rgb(238,232,170)"&gt;Text colored in palegoldenrod&lt;/span&gt; &lt;span style="color: rgb(250,250,210)"&gt;Text colored in lightgoldenrodyellow&lt;/span&gt; &lt;span style="color: rgb(255,255,224)"&gt;Text colored in lightyellow&lt;/span&gt; &lt;span style="color: rgb(255,255,0)"&gt;Text colored in yellow&lt;/span&gt; &lt;span style="color: rgb(255,215,0)"&gt;Text colored in gold&lt;/span&gt; &lt;span style="color: rgb(238,221,130)"&gt;Text colored in lightgoldenrod&lt;/span&gt; &lt;span style="color: rgb(218,165,32)"&gt;Text colored in goldenrod&lt;/span&gt; &lt;span style="color: rgb(184,134,11)"&gt;Text colored in darkgoldenrod&lt;/span&gt; &lt;span style="color: rgb(188,143,143)"&gt;Text colored in rosybrown&lt;/span&gt; &lt;span style="color: rgb(205,92,92)"&gt;Text colored in indianred&lt;/span&gt; &lt;span style="color: rgb(139,69,19)"&gt;Text colored in saddlebrown&lt;/span&gt; &lt;span style="color: rgb(160,82,45)"&gt;Text colored in sienna&lt;/span&gt; &lt;span style="color: rgb(205,133,63)"&gt;Text colored in peru&lt;/span&gt; &lt;span style="color: rgb(222,184,135)"&gt;Text colored in burlywood&lt;/span&gt; &lt;span style="color: rgb(245,245,220)"&gt;Text colored in beige&lt;/span&gt; &lt;span style="color: rgb(245,222,179)"&gt;Text colored in wheat&lt;/span&gt; &lt;span style="color: rgb(244,164,96)"&gt;Text colored in sandybrown&lt;/span&gt; &lt;span style="color: rgb(210,180,140)"&gt;Text colored in tan&lt;/span&gt; &lt;span style="color: rgb(210,105,30)"&gt;Text colored in chocolate&lt;/span&gt; &lt;span style="color: rgb(178,34,34)"&gt;Text colored in firebrick&lt;/span&gt; &lt;span style="color: rgb(165,42,42)"&gt;Text colored in brown&lt;/span&gt; &lt;span style="color: rgb(233,150,122)"&gt;Text colored in darksalmon&lt;/span&gt; &lt;span style="color: rgb(250,128,114)"&gt;Text colored in salmon&lt;/span&gt; &lt;span style="color: rgb(255,160,122)"&gt;Text colored in lightsalmon&lt;/span&gt; &lt;span style="color: rgb(255,165,0)"&gt;Text colored in orange&lt;/span&gt; &lt;span style="color: rgb(255,140,0)"&gt;Text colored in darkorange&lt;/span&gt; &lt;span style="color: rgb(255,127,80)"&gt;Text colored in coral&lt;/span&gt; &lt;span style="color: rgb(240,128,128)"&gt;Text colored in lightcoral&lt;/span&gt; &lt;span style="color: rgb(255,99,71)"&gt;Text colored in tomato&lt;/span&gt; &lt;span style="color: rgb(255,69,0)"&gt;Text colored in orangered&lt;/span&gt; &lt;span style="color: rgb(255,0,0)"&gt;Text colored in red&lt;/span&gt; &lt;span style="color: rgb(255,105,180)"&gt;Text colored in hotpink&lt;/span&gt; &lt;span style="color: rgb(255,20,147)"&gt;Text colored in deeppink&lt;/span&gt; &lt;span style="color: rgb(255,192,203)"&gt;Text colored in pink&lt;/span&gt; &lt;span style="color: rgb(255,182,193)"&gt;Text colored in lightpink&lt;/span&gt; &lt;span style="color: rgb(219,112,147)"&gt;Text colored in palevioletred&lt;/span&gt; &lt;span style="color: rgb(176,48,96)"&gt;Text colored in maroon&lt;/span&gt; &lt;span style="color: rgb(199,21,133)"&gt;Text colored in mediumvioletred&lt;/span&gt; &lt;span style="color: rgb(208,32,144)"&gt;Text colored in violetred&lt;/span&gt; &lt;span style="color: rgb(255,0,255)"&gt;Text colored in magenta&lt;/span&gt; &lt;span style="color: rgb(238,130,238)"&gt;Text colored in violet&lt;/span&gt; &lt;span style="color: rgb(221,160,221)"&gt;Text colored in plum&lt;/span&gt; &lt;span style="color: rgb(218,112,214)"&gt;Text colored in orchid&lt;/span&gt; &lt;span style="color: rgb(186,85,211)"&gt;Text colored in mediumorchid&lt;/span&gt; &lt;span style="color: rgb(153,50,204)"&gt;Text colored in darkorchid&lt;/span&gt; &lt;span style="color: rgb(148,0,211)"&gt;Text colored in darkviolet&lt;/span&gt; &lt;span style="color: rgb(138,43,226)"&gt;Text colored in blueviolet&lt;/span&gt; &lt;span style="color: rgb(160,32,240)"&gt;Text colored in purple&lt;/span&gt; &lt;span style="color: rgb(147,112,219)"&gt;Text colored in mediumpurple&lt;/span&gt; &lt;span style="color: rgb(216,191,216)"&gt;Text colored in thistle&lt;/span&gt; &lt;span style="color: rgb(255,250,250)"&gt;Text colored in snow1&lt;/span&gt; &lt;span style="color: rgb(238,233,233)"&gt;Text colored in snow2&lt;/span&gt; &lt;span style="color: rgb(205,201,201)"&gt;Text colored in snow3&lt;/span&gt; &lt;span style="color: rgb(139,137,137)"&gt;Text colored in snow4&lt;/span&gt; &lt;span style="color: rgb(255,245,238)"&gt;Text colored in seashell1&lt;/span&gt; &lt;span style="color: rgb(238,229,222)"&gt;Text colored in seashell2&lt;/span&gt; &lt;span style="color: rgb(205,197,191)"&gt;Text colored in seashell3&lt;/span&gt; &lt;span style="color: rgb(139,134,130)"&gt;Text colored in seashell4&lt;/span&gt; &lt;span style="color: rgb(255,239,219)"&gt;Text colored in antiquewhite1&lt;/span&gt; &lt;span style="color: rgb(238,223,204)"&gt;Text colored in antiquewhite2&lt;/span&gt; &lt;span style="color: rgb(205,192,176)"&gt;Text colored in antiquewhite3&lt;/span&gt; &lt;span style="color: rgb(139,131,120)"&gt;Text colored in antiquewhite4&lt;/span&gt; &lt;span style="color: rgb(255,228,196)"&gt;Text colored in bisque1&lt;/span&gt; &lt;span style="color: rgb(238,213,183)"&gt;Text colored in bisque2&lt;/span&gt; &lt;span style="color: rgb(205,183,158)"&gt;Text colored in bisque3&lt;/span&gt; &lt;span style="color: rgb(139,125,107)"&gt;Text colored in bisque4&lt;/span&gt; &lt;span style="color: rgb(255,218,185)"&gt;Text colored in peachpuff1&lt;/span&gt; &lt;span style="color: rgb(238,203,173)"&gt;Text colored in peachpuff2&lt;/span&gt; &lt;span style="color: rgb(205,175,149)"&gt;Text colored in peachpuff3&lt;/span&gt; &lt;span style="color: rgb(139,119,101)"&gt;Text colored in peachpuff4&lt;/span&gt; &lt;span style="color: rgb(255,222,173)"&gt;Text colored in navajowhite1&lt;/span&gt; &lt;span style="color: rgb(238,207,161)"&gt;Text colored in navajowhite2&lt;/span&gt; &lt;span style="color: rgb(205,179,139)"&gt;Text colored in navajowhite3&lt;/span&gt; &lt;span style="color: rgb(139,121,94)"&gt;Text colored in navajowhite4&lt;/span&gt; &lt;span style="color: rgb(255,250,205)"&gt;Text colored in lemonchiffon1&lt;/span&gt; &lt;span style="color: rgb(238,233,191)"&gt;Text colored in lemonchiffon2&lt;/span&gt; &lt;span style="color: rgb(205,201,165)"&gt;Text colored in lemonchiffon3&lt;/span&gt; &lt;span style="color: rgb(139,137,112)"&gt;Text colored in lemonchiffon4&lt;/span&gt; &lt;span style="color: rgb(255,248,220)"&gt;Text colored in cornsilk1&lt;/span&gt; &lt;span style="color: rgb(238,232,205)"&gt;Text colored in cornsilk2&lt;/span&gt; &lt;span style="color: rgb(205,200,177)"&gt;Text colored in cornsilk3&lt;/span&gt; &lt;span style="color: rgb(139,136,120)"&gt;Text colored in cornsilk4&lt;/span&gt; &lt;span style="color: rgb(255,255,240)"&gt;Text colored in ivory1&lt;/span&gt; &lt;span style="color: rgb(238,238,224)"&gt;Text colored in ivory2&lt;/span&gt; &lt;span style="color: rgb(205,205,193)"&gt;Text colored in ivory3&lt;/span&gt; &lt;span style="color: rgb(139,139,131)"&gt;Text colored in ivory4&lt;/span&gt; &lt;span style="color: rgb(240,255,240)"&gt;Text colored in honeydew1&lt;/span&gt; &lt;span style="color: rgb(224,238,224)"&gt;Text colored in honeydew2&lt;/span&gt; &lt;span style="color: rgb(193,205,193)"&gt;Text colored in honeydew3&lt;/span&gt; &lt;span style="color: rgb(131,139,131)"&gt;Text colored in honeydew4&lt;/span&gt; &lt;span style="color: rgb(255,240,245)"&gt;Text colored in lavenderblush1&lt;/span&gt; &lt;span style="color: rgb(238,224,229)"&gt;Text colored in lavenderblush2&lt;/span&gt; &lt;span style="color: rgb(205,193,197)"&gt;Text colored in lavenderblush3&lt;/span&gt; &lt;span style="color: rgb(139,131,134)"&gt;Text colored in lavenderblush4&lt;/span&gt; &lt;span style="color: rgb(255,228,225)"&gt;Text colored in mistyrose1&lt;/span&gt; &lt;span style="color: rgb(238,213,210)"&gt;Text colored in mistyrose2&lt;/span&gt; &lt;span style="color: rgb(205,183,181)"&gt;Text colored in mistyrose3&lt;/span&gt; &lt;span style="color: rgb(139,125,123)"&gt;Text colored in mistyrose4&lt;/span&gt; &lt;span style="color: rgb(240,255,255)"&gt;Text colored in azure1&lt;/span&gt; &lt;span style="color: rgb(224,238,238)"&gt;Text colored in azure2&lt;/span&gt; &lt;span style="color: rgb(193,205,205)"&gt;Text colored in azure3&lt;/span&gt; &lt;span style="color: rgb(131,139,139)"&gt;Text colored in azure4&lt;/span&gt; &lt;span style="color: rgb(131,111,255)"&gt;Text colored in slateblue1&lt;/span&gt; &lt;span style="color: rgb(122,103,238)"&gt;Text colored in slateblue2&lt;/span&gt; &lt;span style="color: rgb(105,89,205)"&gt;Text colored in slateblue3&lt;/span&gt; &lt;span style="color: rgb(71,60,139)"&gt;Text colored in slateblue4&lt;/span&gt; &lt;span style="color: rgb(72,118,255)"&gt;Text colored in royalblue1&lt;/span&gt; &lt;span style="color: rgb(67,110,238)"&gt;Text colored in royalblue2&lt;/span&gt; &lt;span style="color: rgb(58,95,205)"&gt;Text colored in royalblue3&lt;/span&gt; &lt;span style="color: rgb(39,64,139)"&gt;Text colored in royalblue4&lt;/span&gt; &lt;span style="color: rgb(0,0,255)"&gt;Text colored in blue1&lt;/span&gt; &lt;span style="color: rgb(0,0,238)"&gt;Text colored in blue2&lt;/span&gt; &lt;span style="color: rgb(0,0,205)"&gt;Text colored in blue3&lt;/span&gt; &lt;span style="color: rgb(0,0,139)"&gt;Text colored in blue4&lt;/span&gt; &lt;span style="color: rgb(30,144,255)"&gt;Text colored in dodgerblue1&lt;/span&gt; &lt;span style="color: rgb(28,134,238)"&gt;Text colored in dodgerblue2&lt;/span&gt; &lt;span style="color: rgb(24,116,205)"&gt;Text colored in dodgerblue3&lt;/span&gt; &lt;span style="color: rgb(16,78,139)"&gt;Text colored in dodgerblue4&lt;/span&gt; &lt;span style="color: rgb(99,184,255)"&gt;Text colored in steelblue1&lt;/span&gt; &lt;span style="color: rgb(92,172,238)"&gt;Text colored in steelblue2&lt;/span&gt; &lt;span style="color: rgb(79,148,205)"&gt;Text colored in steelblue3&lt;/span&gt; &lt;span style="color: rgb(54,100,139)"&gt;Text colored in steelblue4&lt;/span&gt; &lt;span style="color: rgb(0,191,255)"&gt;Text colored in deepskyblue1&lt;/span&gt; &lt;span style="color: rgb(0,178,238)"&gt;Text colored in deepskyblue2&lt;/span&gt; &lt;span style="color: rgb(0,154,205)"&gt;Text colored in deepskyblue3&lt;/span&gt; &lt;span style="color: rgb(0,104,139)"&gt;Text colored in deepskyblue4&lt;/span&gt; &lt;span style="color: rgb(135,206,255)"&gt;Text colored in skyblue1&lt;/span&gt; &lt;span style="color: rgb(126,192,238)"&gt;Text colored in skyblue2&lt;/span&gt; &lt;span style="color: rgb(108,166,205)"&gt;Text colored in skyblue3&lt;/span&gt; &lt;span style="color: rgb(74,112,139)"&gt;Text colored in skyblue4&lt;/span&gt; &lt;span style="color: rgb(176,226,255)"&gt;Text colored in lightskyblue1&lt;/span&gt; &lt;span style="color: rgb(164,211,238)"&gt;Text colored in lightskyblue2&lt;/span&gt; &lt;span style="color: rgb(141,182,205)"&gt;Text colored in lightskyblue3&lt;/span&gt; &lt;span style="color: rgb(96,123,139)"&gt;Text colored in lightskyblue4&lt;/span&gt; &lt;span style="color: rgb(198,226,255)"&gt;Text colored in slategray1&lt;/span&gt; &lt;span style="color: rgb(185,211,238)"&gt;Text colored in slategray2&lt;/span&gt; &lt;span style="color: rgb(159,182,205)"&gt;Text colored in slategray3&lt;/span&gt; &lt;span style="color: rgb(108,123,139)"&gt;Text colored in slategray4&lt;/span&gt; &lt;span style="color: rgb(202,225,255)"&gt;Text colored in lightsteelblue1&lt;/span&gt; &lt;span style="color: rgb(188,210,238)"&gt;Text colored in lightsteelblue2&lt;/span&gt; &lt;span style="color: rgb(162,181,205)"&gt;Text colored in lightsteelblue3&lt;/span&gt; &lt;span style="color: rgb(110,123,139)"&gt;Text colored in lightsteelblue4&lt;/span&gt; &lt;span style="color: rgb(191,239,255)"&gt;Text colored in lightblue1&lt;/span&gt; &lt;span style="color: rgb(178,223,238)"&gt;Text colored in lightblue2&lt;/span&gt; &lt;span style="color: rgb(154,192,205)"&gt;Text colored in lightblue3&lt;/span&gt; &lt;span style="color: rgb(104,131,139)"&gt;Text colored in lightblue4&lt;/span&gt; &lt;span style="color: rgb(224,255,255)"&gt;Text colored in lightcyan1&lt;/span&gt; &lt;span style="color: rgb(209,238,238)"&gt;Text colored in lightcyan2&lt;/span&gt; &lt;span style="color: rgb(180,205,205)"&gt;Text colored in lightcyan3&lt;/span&gt; &lt;span style="color: rgb(122,139,139)"&gt;Text colored in lightcyan4&lt;/span&gt; &lt;span style="color: rgb(187,255,255)"&gt;Text colored in paleturquoise1&lt;/span&gt; &lt;span style="color: rgb(174,238,238)"&gt;Text colored in paleturquoise2&lt;/span&gt; &lt;span style="color: rgb(150,205,205)"&gt;Text colored in paleturquoise3&lt;/span&gt; &lt;span style="color: rgb(102,139,139)"&gt;Text colored in paleturquoise4&lt;/span&gt; &lt;span style="color: rgb(152,245,255)"&gt;Text colored in cadetblue1&lt;/span&gt; &lt;span style="color: rgb(142,229,238)"&gt;Text colored in cadetblue2&lt;/span&gt; &lt;span style="color: rgb(122,197,205)"&gt;Text colored in cadetblue3&lt;/span&gt; &lt;span style="color: rgb(83,134,139)"&gt;Text colored in cadetblue4&lt;/span&gt; &lt;span style="color: rgb(0,245,255)"&gt;Text colored in turquoise1&lt;/span&gt; &lt;span style="color: rgb(0,229,238)"&gt;Text colored in turquoise2&lt;/span&gt; &lt;span style="color: rgb(0,197,205)"&gt;Text colored in turquoise3&lt;/span&gt; &lt;span style="color: rgb(0,134,139)"&gt;Text colored in turquoise4&lt;/span&gt; &lt;span style="color: rgb(0,255,255)"&gt;Text colored in cyan1&lt;/span&gt; &lt;span style="color: rgb(0,238,238)"&gt;Text colored in cyan2&lt;/span&gt; &lt;span style="color: rgb(0,205,205)"&gt;Text colored in cyan3&lt;/span&gt; &lt;span style="color: rgb(0,139,139)"&gt;Text colored in cyan4&lt;/span&gt; &lt;span style="color: rgb(151,255,255)"&gt;Text colored in darkslategray1&lt;/span&gt; &lt;span style="color: rgb(141,238,238)"&gt;Text colored in darkslategray2&lt;/span&gt; &lt;span style="color: rgb(121,205,205)"&gt;Text colored in darkslategray3&lt;/span&gt; &lt;span style="color: rgb(82,139,139)"&gt;Text colored in darkslategray4&lt;/span&gt; &lt;span style="color: rgb(127,255,212)"&gt;Text colored in aquamarine1&lt;/span&gt; &lt;span style="color: rgb(118,238,198)"&gt;Text colored in aquamarine2&lt;/span&gt; &lt;span style="color: rgb(102,205,170)"&gt;Text colored in aquamarine3&lt;/span&gt; &lt;span style="color: rgb(69,139,116)"&gt;Text colored in aquamarine4&lt;/span&gt; &lt;span style="color: rgb(193,255,193)"&gt;Text colored in darkseagreen1&lt;/span&gt; &lt;span style="color: rgb(180,238,180)"&gt;Text colored in darkseagreen2&lt;/span&gt; &lt;span style="color: rgb(155,205,155)"&gt;Text colored in darkseagreen3&lt;/span&gt; &lt;span style="color: rgb(105,139,105)"&gt;Text colored in darkseagreen4&lt;/span&gt; &lt;span style="color: rgb(84,255,159)"&gt;Text colored in seagreen1&lt;/span&gt; &lt;span style="color: rgb(78,238,148)"&gt;Text colored in seagreen2&lt;/span&gt; &lt;span style="color: rgb(67,205,128)"&gt;Text colored in seagreen3&lt;/span&gt; &lt;span style="color: rgb(46,139,87)"&gt;Text colored in seagreen4&lt;/span&gt; &lt;span style="color: rgb(154,255,154)"&gt;Text colored in palegreen1&lt;/span&gt; &lt;span style="color: rgb(144,238,144)"&gt;Text colored in palegreen2&lt;/span&gt; &lt;span style="color: rgb(124,205,124)"&gt;Text colored in palegreen3&lt;/span&gt; &lt;span style="color: rgb(84,139,84)"&gt;Text colored in palegreen4&lt;/span&gt; &lt;span style="color: rgb(0,255,127)"&gt;Text colored in springgreen1&lt;/span&gt; &lt;span style="color: rgb(0,238,118)"&gt;Text colored in springgreen2&lt;/span&gt; &lt;span style="color: rgb(0,205,102)"&gt;Text colored in springgreen3&lt;/span&gt; &lt;span style="color: rgb(0,139,69)"&gt;Text colored in springgreen4&lt;/span&gt; &lt;span style="color: rgb(0,255,0)"&gt;Text colored in green1&lt;/span&gt; &lt;span style="color: rgb(0,238,0)"&gt;Text colored in green2&lt;/span&gt; &lt;span style="color: rgb(0,205,0)"&gt;Text colored in green3&lt;/span&gt; &lt;span style="color: rgb(0,139,0)"&gt;Text colored in green4&lt;/span&gt; &lt;span style="color: rgb(127,255,0)"&gt;Text colored in chartreuse1&lt;/span&gt; &lt;span style="color: rgb(118,238,0)"&gt;Text colored in chartreuse2&lt;/span&gt; &lt;span style="color: rgb(102,205,0)"&gt;Text colored in chartreuse3&lt;/span&gt; &lt;span style="color: rgb(69,139,0)"&gt;Text colored in chartreuse4&lt;/span&gt; &lt;span style="color: rgb(192,255,62)"&gt;Text colored in olivedrab1&lt;/span&gt; &lt;span style="color: rgb(179,238,58)"&gt;Text colored in olivedrab2&lt;/span&gt; &lt;span style="color: rgb(154,205,50)"&gt;Text colored in olivedrab3&lt;/span&gt; &lt;span style="color: rgb(105,139,34)"&gt;Text colored in olivedrab4&lt;/span&gt; &lt;span style="color: rgb(202,255,112)"&gt;Text colored in darkolivegreen1&lt;/span&gt; &lt;span style="color: rgb(188,238,104)"&gt;Text colored in darkolivegreen2&lt;/span&gt; &lt;span style="color: rgb(162,205,90)"&gt;Text colored in darkolivegreen3&lt;/span&gt; &lt;span style="color: rgb(110,139,61)"&gt;Text colored in darkolivegreen4&lt;/span&gt; &lt;span style="color: rgb(255,246,143)"&gt;Text colored in khaki1&lt;/span&gt; &lt;span style="color: rgb(238,230,133)"&gt;Text colored in khaki2&lt;/span&gt; &lt;span style="color: rgb(205,198,115)"&gt;Text colored in khaki3&lt;/span&gt; &lt;span style="color: rgb(139,134,78)"&gt;Text colored in khaki4&lt;/span&gt; &lt;span style="color: rgb(255,236,139)"&gt;Text colored in lightgoldenrod1&lt;/span&gt; &lt;span style="color: rgb(238,220,130)"&gt;Text colored in lightgoldenrod2&lt;/span&gt; &lt;span style="color: rgb(205,190,112)"&gt;Text colored in lightgoldenrod3&lt;/span&gt; &lt;span style="color: rgb(139,129,76)"&gt;Text colored in lightgoldenrod4&lt;/span&gt; &lt;span style="color: rgb(255,255,224)"&gt;Text colored in lightyellow1&lt;/span&gt; &lt;span style="color: rgb(238,238,209)"&gt;Text colored in lightyellow2&lt;/span&gt; &lt;span style="color: rgb(205,205,180)"&gt;Text colored in lightyellow3&lt;/span&gt; &lt;span style="color: rgb(139,139,122)"&gt;Text colored in lightyellow4&lt;/span&gt; &lt;span style="color: rgb(255,255,0)"&gt;Text colored in yellow1&lt;/span&gt; &lt;span style="color: rgb(238,238,0)"&gt;Text colored in yellow2&lt;/span&gt; &lt;span style="color: rgb(205,205,0)"&gt;Text colored in yellow3&lt;/span&gt; &lt;span style="color: rgb(139,139,0)"&gt;Text colored in yellow4&lt;/span&gt; &lt;span style="color: rgb(255,215,0)"&gt;Text colored in gold1&lt;/span&gt; &lt;span style="color: rgb(238,201,0)"&gt;Text colored in gold2&lt;/span&gt; &lt;span style="color: rgb(205,173,0)"&gt;Text colored in gold3&lt;/span&gt; &lt;span style="color: rgb(139,117,0)"&gt;Text colored in gold4&lt;/span&gt; &lt;span style="color: rgb(255,193,37)"&gt;Text colored in goldenrod1&lt;/span&gt; &lt;span style="color: rgb(238,180,34)"&gt;Text colored in goldenrod2&lt;/span&gt; &lt;span style="color: rgb(205,155,29)"&gt;Text colored in goldenrod3&lt;/span&gt; &lt;span style="color: rgb(139,105,20)"&gt;Text colored in goldenrod4&lt;/span&gt; &lt;span style="color: rgb(255,185,15)"&gt;Text colored in darkgoldenrod1&lt;/span&gt; &lt;span style="color: rgb(238,173,14)"&gt;Text colored in darkgoldenrod2&lt;/span&gt; &lt;span style="color: rgb(205,149,12)"&gt;Text colored in darkgoldenrod3&lt;/span&gt; &lt;span style="color: rgb(139,101,8)"&gt;Text colored in darkgoldenrod4&lt;/span&gt; &lt;span style="color: rgb(255,193,193)"&gt;Text colored in rosybrown1&lt;/span&gt; &lt;span style="color: rgb(238,180,180)"&gt;Text colored in rosybrown2&lt;/span&gt; &lt;span style="color: rgb(205,155,155)"&gt;Text colored in rosybrown3&lt;/span&gt; &lt;span style="color: rgb(139,105,105)"&gt;Text colored in rosybrown4&lt;/span&gt; &lt;span style="color: rgb(255,106,106)"&gt;Text colored in indianred1&lt;/span&gt; &lt;span style="color: rgb(238,99,99)"&gt;Text colored in indianred2&lt;/span&gt; &lt;span style="color: rgb(205,85,85)"&gt;Text colored in indianred3&lt;/span&gt; &lt;span style="color: rgb(139,58,58)"&gt;Text colored in indianred4&lt;/span&gt; &lt;span style="color: rgb(255,130,71)"&gt;Text colored in sienna1&lt;/span&gt; &lt;span style="color: rgb(238,121,66)"&gt;Text colored in sienna2&lt;/span&gt; &lt;span style="color: rgb(205,104,57)"&gt;Text colored in sienna3&lt;/span&gt; &lt;span style="color: rgb(139,71,38)"&gt;Text colored in sienna4&lt;/span&gt; &lt;span style="color: rgb(255,211,155)"&gt;Text colored in burlywood1&lt;/span&gt; &lt;span style="color: rgb(238,197,145)"&gt;Text colored in burlywood2&lt;/span&gt; &lt;span style="color: rgb(205,170,125)"&gt;Text colored in burlywood3&lt;/span&gt; &lt;span style="color: rgb(139,115,85)"&gt;Text colored in burlywood4&lt;/span&gt; &lt;span style="color: rgb(255,231,186)"&gt;Text colored in wheat1&lt;/span&gt; &lt;span style="color: rgb(238,216,174)"&gt;Text colored in wheat2&lt;/span&gt; &lt;span style="color: rgb(205,186,150)"&gt;Text colored in wheat3&lt;/span&gt; &lt;span style="color: rgb(139,126,102)"&gt;Text colored in wheat4&lt;/span&gt; &lt;span style="color: rgb(255,165,79)"&gt;Text colored in tan1&lt;/span&gt; &lt;span style="color: rgb(238,154,73)"&gt;Text colored in tan2&lt;/span&gt; &lt;span style="color: rgb(205,133,63)"&gt;Text colored in tan3&lt;/span&gt; &lt;span style="color: rgb(139,90,43)"&gt;Text colored in tan4&lt;/span&gt; &lt;span style="color: rgb(255,127,36)"&gt;Text colored in chocolate1&lt;/span&gt; &lt;span style="color: rgb(238,118,33)"&gt;Text colored in chocolate2&lt;/span&gt; &lt;span style="color: rgb(205,102,29)"&gt;Text colored in chocolate3&lt;/span&gt; &lt;span style="color: rgb(139,69,19)"&gt;Text colored in chocolate4&lt;/span&gt; &lt;span style="color: rgb(255,48,48)"&gt;Text colored in firebrick1&lt;/span&gt; &lt;span style="color: rgb(238,44,44)"&gt;Text colored in firebrick2&lt;/span&gt; &lt;span style="color: rgb(205,38,38)"&gt;Text colored in firebrick3&lt;/span&gt; &lt;span style="color: rgb(139,26,26)"&gt;Text colored in firebrick4&lt;/span&gt; &lt;span style="color: rgb(255,64,64)"&gt;Text colored in brown1&lt;/span&gt; &lt;span style="color: rgb(238,59,59)"&gt;Text colored in brown2&lt;/span&gt; &lt;span style="color: rgb(205,51,51)"&gt;Text colored in brown3&lt;/span&gt; &lt;span style="color: rgb(139,35,35)"&gt;Text colored in brown4&lt;/span&gt; &lt;span style="color: rgb(255,140,105)"&gt;Text colored in salmon1&lt;/span&gt; &lt;span style="color: rgb(238,130,98)"&gt;Text colored in salmon2&lt;/span&gt; &lt;span style="color: rgb(205,112,84)"&gt;Text colored in salmon3&lt;/span&gt; &lt;span style="color: rgb(139,76,57)"&gt;Text colored in salmon4&lt;/span&gt; &lt;span style="color: rgb(255,160,122)"&gt;Text colored in lightsalmon1&lt;/span&gt; &lt;span style="color: rgb(238,149,114)"&gt;Text colored in lightsalmon2&lt;/span&gt; &lt;span style="color: rgb(205,129,98)"&gt;Text colored in lightsalmon3&lt;/span&gt; &lt;span style="color: rgb(139,87,66)"&gt;Text colored in lightsalmon4&lt;/span&gt; &lt;span style="color: rgb(255,165,0)"&gt;Text colored in orange1&lt;/span&gt; &lt;span style="color: rgb(238,154,0)"&gt;Text colored in orange2&lt;/span&gt; &lt;span style="color: rgb(205,133,0)"&gt;Text colored in orange3&lt;/span&gt; &lt;span style="color: rgb(139,90,0)"&gt;Text colored in orange4&lt;/span&gt; &lt;span style="color: rgb(255,127,0)"&gt;Text colored in darkorange1&lt;/span&gt; &lt;span style="color: rgb(238,118,0)"&gt;Text colored in darkorange2&lt;/span&gt; &lt;span style="color: rgb(205,102,0)"&gt;Text colored in darkorange3&lt;/span&gt; &lt;span style="color: rgb(139,69,0)"&gt;Text colored in darkorange4&lt;/span&gt; &lt;span style="color: rgb(255,114,86)"&gt;Text colored in coral1&lt;/span&gt; &lt;span style="color: rgb(238,106,80)"&gt;Text colored in coral2&lt;/span&gt; &lt;span style="color: rgb(205,91,69)"&gt;Text colored in coral3&lt;/span&gt; &lt;span style="color: rgb(139,62,47)"&gt;Text colored in coral4&lt;/span&gt; &lt;span style="color: rgb(255,99,71)"&gt;Text colored in tomato1&lt;/span&gt; &lt;span style="color: rgb(238,92,66)"&gt;Text colored in tomato2&lt;/span&gt; &lt;span style="color: rgb(205,79,57)"&gt;Text colored in tomato3&lt;/span&gt; &lt;span style="color: rgb(139,54,38)"&gt;Text colored in tomato4&lt;/span&gt; &lt;span style="color: rgb(255,69,0)"&gt;Text colored in orangered1&lt;/span&gt; &lt;span style="color: rgb(238,64,0)"&gt;Text colored in orangered2&lt;/span&gt; &lt;span style="color: rgb(205,55,0)"&gt;Text colored in orangered3&lt;/span&gt; &lt;span style="color: rgb(139,37,0)"&gt;Text colored in orangered4&lt;/span&gt; &lt;span style="color: rgb(255,0,0)"&gt;Text colored in red1&lt;/span&gt; &lt;span style="color: rgb(238,0,0)"&gt;Text colored in red2&lt;/span&gt; &lt;span style="color: rgb(205,0,0)"&gt;Text colored in red3&lt;/span&gt; &lt;span style="color: rgb(139,0,0)"&gt;Text colored in red4&lt;/span&gt; &lt;span style="color: rgb(255,20,147)"&gt;Text colored in deeppink1&lt;/span&gt; &lt;span style="color: rgb(238,18,137)"&gt;Text colored in deeppink2&lt;/span&gt; &lt;span style="color: rgb(205,16,118)"&gt;Text colored in deeppink3&lt;/span&gt; &lt;span style="color: rgb(139,10,80)"&gt;Text colored in deeppink4&lt;/span&gt; &lt;span style="color: rgb(255,110,180)"&gt;Text colored in hotpink1&lt;/span&gt; &lt;span style="color: rgb(238,106,167)"&gt;Text colored in hotpink2&lt;/span&gt; &lt;span style="color: rgb(205,96,144)"&gt;Text colored in hotpink3&lt;/span&gt; &lt;span style="color: rgb(139,58,98)"&gt;Text colored in hotpink4&lt;/span&gt; &lt;span style="color: rgb(255,181,197)"&gt;Text colored in pink1&lt;/span&gt; &lt;span style="color: rgb(238,169,184)"&gt;Text colored in pink2&lt;/span&gt; &lt;span style="color: rgb(205,145,158)"&gt;Text colored in pink3&lt;/span&gt; &lt;span style="color: rgb(139,99,108)"&gt;Text colored in pink4&lt;/span&gt; &lt;span style="color: rgb(255,174,185)"&gt;Text colored in lightpink1&lt;/span&gt; &lt;span style="color: rgb(238,162,173)"&gt;Text colored in lightpink2&lt;/span&gt; &lt;span style="color: rgb(205,140,149)"&gt;Text colored in lightpink3&lt;/span&gt; &lt;span style="color: rgb(139,95,101)"&gt;Text colored in lightpink4&lt;/span&gt; &lt;span style="color: rgb(255,130,171)"&gt;Text colored in palevioletred1&lt;/span&gt; &lt;span style="color: rgb(238,121,159)"&gt;Text colored in palevioletred2&lt;/span&gt; &lt;span style="color: rgb(205,104,137)"&gt;Text colored in palevioletred3&lt;/span&gt; &lt;span style="color: rgb(139,71,93)"&gt;Text colored in palevioletred4&lt;/span&gt; &lt;span style="color: rgb(255,52,179)"&gt;Text colored in maroon1&lt;/span&gt; &lt;span style="color: rgb(238,48,167)"&gt;Text colored in maroon2&lt;/span&gt; &lt;span style="color: rgb(205,41,144)"&gt;Text colored in maroon3&lt;/span&gt; &lt;span style="color: rgb(139,28,98)"&gt;Text colored in maroon4&lt;/span&gt; &lt;span style="color: rgb(255,62,150)"&gt;Text colored in violetred1&lt;/span&gt; &lt;span style="color: rgb(238,58,140)"&gt;Text colored in violetred2&lt;/span&gt; &lt;span style="color: rgb(205,50,120)"&gt;Text colored in violetred3&lt;/span&gt; &lt;span style="color: rgb(139,34,82)"&gt;Text colored in violetred4&lt;/span&gt; &lt;span style="color: rgb(255,0,255)"&gt;Text colored in magenta1&lt;/span&gt; &lt;span style="color: rgb(238,0,238)"&gt;Text colored in magenta2&lt;/span&gt; &lt;span style="color: rgb(205,0,205)"&gt;Text colored in magenta3&lt;/span&gt; &lt;span style="color: rgb(139,0,139)"&gt;Text colored in magenta4&lt;/span&gt; &lt;span style="color: rgb(255,131,250)"&gt;Text colored in orchid1&lt;/span&gt; &lt;span style="color: rgb(238,122,233)"&gt;Text colored in orchid2&lt;/span&gt; &lt;span style="color: rgb(205,105,201)"&gt;Text colored in orchid3&lt;/span&gt; &lt;span style="color: rgb(139,71,137)"&gt;Text colored in orchid4&lt;/span&gt; &lt;span style="color: rgb(255,187,255)"&gt;Text colored in plum1&lt;/span&gt; &lt;span style="color: rgb(238,174,238)"&gt;Text colored in plum2&lt;/span&gt; &lt;span style="color: rgb(205,150,205)"&gt;Text colored in plum3&lt;/span&gt; &lt;span style="color: rgb(139,102,139)"&gt;Text colored in plum4&lt;/span&gt; &lt;span style="color: rgb(224,102,255)"&gt;Text colored in mediumorchid1&lt;/span&gt; &lt;span style="color: rgb(209,95,238)"&gt;Text colored in mediumorchid2&lt;/span&gt; &lt;span style="color: rgb(180,82,205)"&gt;Text colored in mediumorchid3&lt;/span&gt; &lt;span style="color: rgb(122,55,139)"&gt;Text colored in mediumorchid4&lt;/span&gt; &lt;span style="color: rgb(191,62,255)"&gt;Text colored in darkorchid1&lt;/span&gt; &lt;span style="color: rgb(178,58,238)"&gt;Text colored in darkorchid2&lt;/span&gt; &lt;span style="color: rgb(154,50,205)"&gt;Text colored in darkorchid3&lt;/span&gt; &lt;span style="color: rgb(104,34,139)"&gt;Text colored in darkorchid4&lt;/span&gt; &lt;span style="color: rgb(155,48,255)"&gt;Text colored in purple1&lt;/span&gt; &lt;span style="color: rgb(145,44,238)"&gt;Text colored in purple2&lt;/span&gt; &lt;span style="color: rgb(125,38,205)"&gt;Text colored in purple3&lt;/span&gt; &lt;span style="color: rgb(85,26,139)"&gt;Text colored in purple4&lt;/span&gt; &lt;span style="color: rgb(171,130,255)"&gt;Text colored in mediumpurple1&lt;/span&gt; &lt;span style="color: rgb(159,121,238)"&gt;Text colored in mediumpurple2&lt;/span&gt; &lt;span style="color: rgb(137,104,205)"&gt;Text colored in mediumpurple3&lt;/span&gt; &lt;span style="color: rgb(93,71,139)"&gt;Text colored in mediumpurple4&lt;/span&gt; &lt;span style="color: rgb(255,225,255)"&gt;Text colored in thistle1&lt;/span&gt; &lt;span style="color: rgb(238,210,238)"&gt;Text colored in thistle2&lt;/span&gt; &lt;span style="color: rgb(205,181,205)"&gt;Text colored in thistle3&lt;/span&gt; &lt;span style="color: rgb(139,123,139)"&gt;Text colored in thistle4&lt;/span&gt; &lt;span style="color: rgb(0,0,0)"&gt;Text colored in gray0&lt;/span&gt; &lt;span style="color: rgb(0,0,0)"&gt;Text colored in grey0&lt;/span&gt; &lt;span style="color: rgb(3,3,3)"&gt;Text colored in gray1&lt;/span&gt; &lt;span style="color: rgb(3,3,3)"&gt;Text colored in grey1&lt;/span&gt; &lt;span style="color: rgb(5,5,5)"&gt;Text colored in gray2&lt;/span&gt; &lt;span style="color: rgb(5,5,5)"&gt;Text colored in grey2&lt;/span&gt; &lt;span style="color: rgb(8,8,8)"&gt;Text colored in gray3&lt;/span&gt; &lt;span style="color: rgb(8,8,8)"&gt;Text colored in grey3&lt;/span&gt; &lt;span style="color: rgb(10,10,10)"&gt;Text colored in gray4&lt;/span&gt; &lt;span style="color: rgb(10,10,10)"&gt;Text colored in grey4&lt;/span&gt; &lt;span style="color: rgb(13,13,13)"&gt;Text colored in gray5&lt;/span&gt; &lt;span style="color: rgb(13,13,13)"&gt;Text colored in grey5&lt;/span&gt; &lt;span style="color: rgb(15,15,15)"&gt;Text colored in gray6&lt;/span&gt; &lt;span style="color: rgb(15,15,15)"&gt;Text colored in grey6&lt;/span&gt; &lt;span style="color: rgb(18,18,18)"&gt;Text colored in gray7&lt;/span&gt; &lt;span style="color: rgb(18,18,18)"&gt;Text colored in grey7&lt;/span&gt; &lt;span style="color: rgb(20,20,20)"&gt;Text colored in gray8&lt;/span&gt; &lt;span style="color: rgb(20,20,20)"&gt;Text colored in grey8&lt;/span&gt; &lt;span style="color: rgb(23,23,23)"&gt;Text colored in gray9&lt;/span&gt; &lt;span style="color: rgb(23,23,23)"&gt;Text colored in grey9&lt;/span&gt; &lt;span style="color: rgb(26,26,26)"&gt;Text colored in gray10&lt;/span&gt; &lt;span style="color: rgb(26,26,26)"&gt;Text colored in grey10&lt;/span&gt; &lt;span style="color: rgb(28,28,28)"&gt;Text colored in gray11&lt;/span&gt; &lt;span style="color: rgb(28,28,28)"&gt;Text colored in grey11&lt;/span&gt; &lt;span style="color: rgb(31,31,31)"&gt;Text colored in gray12&lt;/span&gt; &lt;span style="color: rgb(31,31,31)"&gt;Text colored in grey12&lt;/span&gt; &lt;span style="color: rgb(33,33,33)"&gt;Text colored in gray13&lt;/span&gt; &lt;span style="color: rgb(33,33,33)"&gt;Text colored in grey13&lt;/span&gt; &lt;span style="color: rgb(36,36,36)"&gt;Text colored in gray14&lt;/span&gt; &lt;span style="color: rgb(36,36,36)"&gt;Text colored in grey14&lt;/span&gt; &lt;span style="color: rgb(38,38,38)"&gt;Text colored in gray15&lt;/span&gt; &lt;span style="color: rgb(38,38,38)"&gt;Text colored in grey15&lt;/span&gt; &lt;span style="color: rgb(41,41,41)"&gt;Text colored in gray16&lt;/span&gt; &lt;span style="color: rgb(41,41,41)"&gt;Text colored in grey16&lt;/span&gt; &lt;span style="color: rgb(43,43,43)"&gt;Text colored in gray17&lt;/span&gt; &lt;span style="color: rgb(43,43,43)"&gt;Text colored in grey17&lt;/span&gt; &lt;span style="color: rgb(46,46,46)"&gt;Text colored in gray18&lt;/span&gt; &lt;span style="color: rgb(46,46,46)"&gt;Text colored in grey18&lt;/span&gt; &lt;span style="color: rgb(48,48,48)"&gt;Text colored in gray19&lt;/span&gt; &lt;span style="color: rgb(48,48,48)"&gt;Text colored in grey19&lt;/span&gt; &lt;span style="color: rgb(51,51,51)"&gt;Text colored in gray20&lt;/span&gt; &lt;span style="color: rgb(51,51,51)"&gt;Text colored in grey20&lt;/span&gt; &lt;span style="color: rgb(54,54,54)"&gt;Text colored in gray21&lt;/span&gt; &lt;span style="color: rgb(54,54,54)"&gt;Text colored in grey21&lt;/span&gt; &lt;span style="color: rgb(56,56,56)"&gt;Text colored in gray22&lt;/span&gt; &lt;span style="color: rgb(56,56,56)"&gt;Text colored in grey22&lt;/span&gt; &lt;span style="color: rgb(59,59,59)"&gt;Text colored in gray23&lt;/span&gt; &lt;span style="color: rgb(59,59,59)"&gt;Text colored in grey23&lt;/span&gt; &lt;span style="color: rgb(61,61,61)"&gt;Text colored in gray24&lt;/span&gt; &lt;span style="color: rgb(61,61,61)"&gt;Text colored in grey24&lt;/span&gt; &lt;span style="color: rgb(64,64,64)"&gt;Text colored in gray25&lt;/span&gt; &lt;span style="color: rgb(64,64,64)"&gt;Text colored in grey25&lt;/span&gt; &lt;span style="color: rgb(66,66,66)"&gt;Text colored in gray26&lt;/span&gt; &lt;span style="color: rgb(66,66,66)"&gt;Text colored in grey26&lt;/span&gt; &lt;span style="color: rgb(69,69,69)"&gt;Text colored in gray27&lt;/span&gt; &lt;span style="color: rgb(69,69,69)"&gt;Text colored in grey27&lt;/span&gt; &lt;span style="color: rgb(71,71,71)"&gt;Text colored in gray28&lt;/span&gt; &lt;span style="color: rgb(71,71,71)"&gt;Text colored in grey28&lt;/span&gt; &lt;span style="color: rgb(74,74,74)"&gt;Text colored in gray29&lt;/span&gt; &lt;span style="color: rgb(74,74,74)"&gt;Text colored in grey29&lt;/span&gt; &lt;span style="color: rgb(77,77,77)"&gt;Text colored in gray30&lt;/span&gt; &lt;span style="color: rgb(77,77,77)"&gt;Text colored in grey30&lt;/span&gt; &lt;span style="color: rgb(79,79,79)"&gt;Text colored in gray31&lt;/span&gt; &lt;span style="color: rgb(79,79,79)"&gt;Text colored in grey31&lt;/span&gt; &lt;span style="color: rgb(82,82,82)"&gt;Text colored in gray32&lt;/span&gt; &lt;span style="color: rgb(82,82,82)"&gt;Text colored in grey32&lt;/span&gt; &lt;span style="color: rgb(84,84,84)"&gt;Text colored in gray33&lt;/span&gt; &lt;span style="color: rgb(84,84,84)"&gt;Text colored in grey33&lt;/span&gt; &lt;span style="color: rgb(87,87,87)"&gt;Text colored in gray34&lt;/span&gt; &lt;span style="color: rgb(87,87,87)"&gt;Text colored in grey34&lt;/span&gt; &lt;span style="color: rgb(89,89,89)"&gt;Text colored in gray35&lt;/span&gt; &lt;span style="color: rgb(89,89,89)"&gt;Text colored in grey35&lt;/span&gt; &lt;span style="color: rgb(92,92,92)"&gt;Text colored in gray36&lt;/span&gt; &lt;span style="color: rgb(92,92,92)"&gt;Text colored in grey36&lt;/span&gt; &lt;span style="color: rgb(94,94,94)"&gt;Text colored in gray37&lt;/span&gt; &lt;span style="color: rgb(94,94,94)"&gt;Text colored in grey37&lt;/span&gt; &lt;span style="color: rgb(97,97,97)"&gt;Text colored in gray38&lt;/span&gt; &lt;span style="color: rgb(97,97,97)"&gt;Text colored in grey38&lt;/span&gt; &lt;span style="color: rgb(99,99,99)"&gt;Text colored in gray39&lt;/span&gt; &lt;span style="color: rgb(99,99,99)"&gt;Text colored in grey39&lt;/span&gt; &lt;span style="color: rgb(102,102,102)"&gt;Text colored in gray40&lt;/span&gt; &lt;span style="color: rgb(102,102,102)"&gt;Text colored in grey40&lt;/span&gt; &lt;span style="color: rgb(105,105,105)"&gt;Text colored in gray41&lt;/span&gt; &lt;span style="color: rgb(105,105,105)"&gt;Text colored in grey41&lt;/span&gt; &lt;span style="color: rgb(107,107,107)"&gt;Text colored in gray42&lt;/span&gt; &lt;span style="color: rgb(107,107,107)"&gt;Text colored in grey42&lt;/span&gt; &lt;span style="color: rgb(110,110,110)"&gt;Text colored in gray43&lt;/span&gt; &lt;span style="color: rgb(110,110,110)"&gt;Text colored in grey43&lt;/span&gt; &lt;span style="color: rgb(112,112,112)"&gt;Text colored in gray44&lt;/span&gt; &lt;span style="color: rgb(112,112,112)"&gt;Text colored in grey44&lt;/span&gt; &lt;span style="color: rgb(115,115,115)"&gt;Text colored in gray45&lt;/span&gt; &lt;span style="color: rgb(115,115,115)"&gt;Text colored in grey45&lt;/span&gt; &lt;span style="color: rgb(117,117,117)"&gt;Text colored in gray46&lt;/span&gt; &lt;span style="color: rgb(117,117,117)"&gt;Text colored in grey46&lt;/span&gt; &lt;span style="color: rgb(120,120,120)"&gt;Text colored in gray47&lt;/span&gt; &lt;span style="color: rgb(120,120,120)"&gt;Text colored in grey47&lt;/span&gt; &lt;span style="color: rgb(122,122,122)"&gt;Text colored in gray48&lt;/span&gt; &lt;span style="color: rgb(122,122,122)"&gt;Text colored in grey48&lt;/span&gt; &lt;span style="color: rgb(125,125,125)"&gt;Text colored in gray49&lt;/span&gt; &lt;span style="color: rgb(125,125,125)"&gt;Text colored in grey49&lt;/span&gt; &lt;span style="color: rgb(127,127,127)"&gt;Text colored in gray50&lt;/span&gt; &lt;span style="color: rgb(127,127,127)"&gt;Text colored in grey50&lt;/span&gt; &lt;span style="color: rgb(130,130,130)"&gt;Text colored in gray51&lt;/span&gt; &lt;span style="color: rgb(130,130,130)"&gt;Text colored in grey51&lt;/span&gt; &lt;span style="color: rgb(133,133,133)"&gt;Text colored in gray52&lt;/span&gt; &lt;span style="color: rgb(133,133,133)"&gt;Text colored in grey52&lt;/span&gt; &lt;span style="color: rgb(135,135,135)"&gt;Text colored in gray53&lt;/span&gt; &lt;span style="color: rgb(135,135,135)"&gt;Text colored in grey53&lt;/span&gt; &lt;span style="color: rgb(138,138,138)"&gt;Text colored in gray54&lt;/span&gt; &lt;span style="color: rgb(138,138,138)"&gt;Text colored in grey54&lt;/span&gt; &lt;span style="color: rgb(140,140,140)"&gt;Text colored in gray55&lt;/span&gt; &lt;span style="color: rgb(140,140,140)"&gt;Text colored in grey55&lt;/span&gt; &lt;span style="color: rgb(143,143,143)"&gt;Text colored in gray56&lt;/span&gt; &lt;span style="color: rgb(143,143,143)"&gt;Text colored in grey56&lt;/span&gt; &lt;span style="color: rgb(145,145,145)"&gt;Text colored in gray57&lt;/span&gt; &lt;span style="color: rgb(145,145,145)"&gt;Text colored in grey57&lt;/span&gt; &lt;span style="color: rgb(148,148,148)"&gt;Text colored in gray58&lt;/span&gt; &lt;span style="color: rgb(148,148,148)"&gt;Text colored in grey58&lt;/span&gt; &lt;span style="color: rgb(150,150,150)"&gt;Text colored in gray59&lt;/span&gt; &lt;span style="color: rgb(150,150,150)"&gt;Text colored in grey59&lt;/span&gt; &lt;span style="color: rgb(153,153,153)"&gt;Text colored in gray60&lt;/span&gt; &lt;span style="color: rgb(153,153,153)"&gt;Text colored in grey60&lt;/span&gt; &lt;span style="color: rgb(156,156,156)"&gt;Text colored in gray61&lt;/span&gt; &lt;span style="color: rgb(156,156,156)"&gt;Text colored in grey61&lt;/span&gt; &lt;span style="color: rgb(158,158,158)"&gt;Text colored in gray62&lt;/span&gt; &lt;span style="color: rgb(158,158,158)"&gt;Text colored in grey62&lt;/span&gt; &lt;span style="color: rgb(161,161,161)"&gt;Text colored in gray63&lt;/span&gt; &lt;span style="color: rgb(161,161,161)"&gt;Text colored in grey63&lt;/span&gt; &lt;span style="color: rgb(163,163,163)"&gt;Text colored in gray64&lt;/span&gt; &lt;span style="color: rgb(163,163,163)"&gt;Text colored in grey64&lt;/span&gt; &lt;span style="color: rgb(166,166,166)"&gt;Text colored in gray65&lt;/span&gt; &lt;span style="color: rgb(166,166,166)"&gt;Text colored in grey65&lt;/span&gt; &lt;span style="color: rgb(168,168,168)"&gt;Text colored in gray66&lt;/span&gt; &lt;span style="color: rgb(168,168,168)"&gt;Text colored in grey66&lt;/span&gt; &lt;span style="color: rgb(171,171,171)"&gt;Text colored in gray67&lt;/span&gt; &lt;span style="color: rgb(171,171,171)"&gt;Text colored in grey67&lt;/span&gt; &lt;span style="color: rgb(173,173,173)"&gt;Text colored in gray68&lt;/span&gt; &lt;span style="color: rgb(173,173,173)"&gt;Text colored in grey68&lt;/span&gt; &lt;span style="color: rgb(176,176,176)"&gt;Text colored in gray69&lt;/span&gt; &lt;span style="color: rgb(176,176,176)"&gt;Text colored in grey69&lt;/span&gt; &lt;span style="color: rgb(179,179,179)"&gt;Text colored in gray70&lt;/span&gt; &lt;span style="color: rgb(179,179,179)"&gt;Text colored in grey70&lt;/span&gt; &lt;span style="color: rgb(181,181,181)"&gt;Text colored in gray71&lt;/span&gt; &lt;span style="color: rgb(181,181,181)"&gt;Text colored in grey71&lt;/span&gt; &lt;span style="color: rgb(184,184,184)"&gt;Text colored in gray72&lt;/span&gt; &lt;span style="color: rgb(184,184,184)"&gt;Text colored in grey72&lt;/span&gt; &lt;span style="color: rgb(186,186,186)"&gt;Text colored in gray73&lt;/span&gt; &lt;span style="color: rgb(186,186,186)"&gt;Text colored in grey73&lt;/span&gt; &lt;span style="color: rgb(189,189,189)"&gt;Text colored in gray74&lt;/span&gt; &lt;span style="color: rgb(189,189,189)"&gt;Text colored in grey74&lt;/span&gt; &lt;span style="color: rgb(191,191,191)"&gt;Text colored in gray75&lt;/span&gt; &lt;span style="color: rgb(191,191,191)"&gt;Text colored in grey75&lt;/span&gt; &lt;span style="color: rgb(194,194,194)"&gt;Text colored in gray76&lt;/span&gt; &lt;span style="color: rgb(194,194,194)"&gt;Text colored in grey76&lt;/span&gt; &lt;span style="color: rgb(196,196,196)"&gt;Text colored in gray77&lt;/span&gt; &lt;span style="color: rgb(196,196,196)"&gt;Text colored in grey77&lt;/span&gt; &lt;span style="color: rgb(199,199,199)"&gt;Text colored in gray78&lt;/span&gt; &lt;span style="color: rgb(199,199,199)"&gt;Text colored in grey78&lt;/span&gt; &lt;span style="color: rgb(201,201,201)"&gt;Text colored in gray79&lt;/span&gt; &lt;span style="color: rgb(201,201,201)"&gt;Text colored in grey79&lt;/span&gt; &lt;span style="color: rgb(204,204,204)"&gt;Text colored in gray80&lt;/span&gt; &lt;span style="color: rgb(204,204,204)"&gt;Text colored in grey80&lt;/span&gt; &lt;span style="color: rgb(207,207,207)"&gt;Text colored in gray81&lt;/span&gt; &lt;span style="color: rgb(207,207,207)"&gt;Text colored in grey81&lt;/span&gt; &lt;span style="color: rgb(209,209,209)"&gt;Text colored in gray82&lt;/span&gt; &lt;span style="color: rgb(209,209,209)"&gt;Text colored in grey82&lt;/span&gt; &lt;span style="color: rgb(212,212,212)"&gt;Text colored in gray83&lt;/span&gt; &lt;span style="color: rgb(212,212,212)"&gt;Text colored in grey83&lt;/span&gt; &lt;span style="color: rgb(214,214,214)"&gt;Text colored in gray84&lt;/span&gt; &lt;span style="color: rgb(214,214,214)"&gt;Text colored in grey84&lt;/span&gt; &lt;span style="color: rgb(217,217,217)"&gt;Text colored in gray85&lt;/span&gt; &lt;span style="color: rgb(217,217,217)"&gt;Text colored in grey85&lt;/span&gt; &lt;span style="color: rgb(219,219,219)"&gt;Text colored in gray86&lt;/span&gt; &lt;span style="color: rgb(219,219,219)"&gt;Text colored in grey86&lt;/span&gt; &lt;span style="color: rgb(222,222,222)"&gt;Text colored in gray87&lt;/span&gt; &lt;span style="color: rgb(222,222,222)"&gt;Text colored in grey87&lt;/span&gt; &lt;span style="color: rgb(224,224,224)"&gt;Text colored in gray88&lt;/span&gt; &lt;span style="color: rgb(224,224,224)"&gt;Text colored in grey88&lt;/span&gt; &lt;span style="color: rgb(227,227,227)"&gt;Text colored in gray89&lt;/span&gt; &lt;span style="color: rgb(227,227,227)"&gt;Text colored in grey89&lt;/span&gt; &lt;span style="color: rgb(229,229,229)"&gt;Text colored in gray90&lt;/span&gt; &lt;span style="color: rgb(229,229,229)"&gt;Text colored in grey90&lt;/span&gt; &lt;span style="color: rgb(232,232,232)"&gt;Text colored in gray91&lt;/span&gt; &lt;span style="color: rgb(232,232,232)"&gt;Text colored in grey91&lt;/span&gt; &lt;span style="color: rgb(235,235,235)"&gt;Text colored in gray92&lt;/span&gt; &lt;span style="color: rgb(235,235,235)"&gt;Text colored in grey92&lt;/span&gt; &lt;span style="color: rgb(237,237,237)"&gt;Text colored in gray93&lt;/span&gt; &lt;span style="color: rgb(237,237,237)"&gt;Text colored in grey93&lt;/span&gt; &lt;span style="color: rgb(240,240,240)"&gt;Text colored in gray94&lt;/span&gt; &lt;span style="color: rgb(240,240,240)"&gt;Text colored in grey94&lt;/span&gt; &lt;span style="color: rgb(242,242,242)"&gt;Text colored in gray95&lt;/span&gt; &lt;span style="color: rgb(242,242,242)"&gt;Text colored in grey95&lt;/span&gt; &lt;span style="color: rgb(245,245,245)"&gt;Text colored in gray96&lt;/span&gt; &lt;span style="color: rgb(245,245,245)"&gt;Text colored in grey96&lt;/span&gt; &lt;span style="color: rgb(247,247,247)"&gt;Text colored in gray97&lt;/span&gt; &lt;span style="color: rgb(247,247,247)"&gt;Text colored in grey97&lt;/span&gt; &lt;span style="color: rgb(250,250,250)"&gt;Text colored in gray98&lt;/span&gt; &lt;span style="color: rgb(250,250,250)"&gt;Text colored in grey98&lt;/span&gt; &lt;span style="color: rgb(252,252,252)"&gt;Text colored in gray99&lt;/span&gt; &lt;span style="color: rgb(252,252,252)"&gt;Text colored in grey99&lt;/span&gt; &lt;span style="color: rgb(255,255,255)"&gt;Text colored in gray100&lt;/span&gt; &lt;span style="color: rgb(255,255,255)"&gt;Text colored in grey100&lt;/span&gt; &lt;span style="color: rgb(169,169,169)"&gt;Text colored in darkgrey&lt;/span&gt; &lt;span style="color: rgb(169,169,169)"&gt;Text colored in darkgray&lt;/span&gt; &lt;span style="color: rgb(0,0,139)"&gt;Text colored in darkblue&lt;/span&gt; &lt;span style="color: rgb(0,139,139)"&gt;Text colored in darkcyan&lt;/span&gt; &lt;span style="color: rgb(139,0,139)"&gt;Text colored in darkmagenta&lt;/span&gt; &lt;span style="color: rgb(139,0,0)"&gt;Text colored in darkred&lt;/span&gt; &lt;span style="color: rgb(144,238,144)"&gt;Text colored in lightgreen&lt;/span&gt; 
&lt;/p&gt;


&lt;div id="outline-container-org7a9df33" class="outline-2"&gt;
&lt;h2 id="org7a9df33"&gt;&lt;a id="ID-FA2E424A-84B3-4DD0-A683-98702F9E51BF"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Code for the color link&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;s&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;color-comp&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;optional&lt;/span&gt; arg)
  &lt;span style="color: #036A07;"&gt;"Completion function for color links."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((color-data (&lt;span style="color: #0000FF;"&gt;prog2&lt;/span&gt;
                        (&lt;span style="color: #0000FF;"&gt;save-selected-window&lt;/span&gt;
                          (list-colors-display))
                        (&lt;span style="color: #0000FF;"&gt;with-current-buffer&lt;/span&gt; (get-buffer &lt;span style="color: #008000;"&gt;"*Colors*"&lt;/span&gt;)
                          (mapcar (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (line)
                                    (append (list line)
                                            (s-split &lt;span style="color: #008000;"&gt;" "&lt;/span&gt; line t)))
                                  (s-split &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt; (buffer-string))))
                      (kill-buffer &lt;span style="color: #008000;"&gt;"*Colors*"&lt;/span&gt;))))
    (format &lt;span style="color: #008000;"&gt;"color:%s"&lt;/span&gt;
            (s-trim (cadr (assoc (completing-read &lt;span style="color: #008000;"&gt;"Color: "&lt;/span&gt; color-data) color-data))))))


(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;color-link-face&lt;/span&gt; (path)
  &lt;span style="color: #036A07;"&gt;"Face function for color links."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; (cdr (assoc path org-link-colors))
      `(&lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; ,path)))


(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;color-link-export&lt;/span&gt; (path description backend)
  &lt;span style="color: #036A07;"&gt;"Export function for color links."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
   ((eq backend 'html)
    (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((rgb (assoc (downcase path) color-name-rgb-alist))
          r g b)
      (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; r (* 255 (/ (nth 1 rgb) 65535.0))
            g (* 255 (/ (nth 2 rgb) 65535.0))
            b (* 255 (/ (nth 3 rgb) 65535.0)))
      (format &lt;span style="color: #008000;"&gt;"&amp;lt;span style=\"color: rgb(%s,%s,%s)\"&amp;gt;%s&amp;lt;/span&amp;gt;"&lt;/span&gt;
              (truncate r) (truncate g) (truncate b)
              (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; description path))))))

(org-link-set-parameters &lt;span style="color: #008000;"&gt;"color"&lt;/span&gt;         
                         &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt; 'color-link-face
                         &lt;span style="color: #006FE0;"&gt;:complete&lt;/span&gt; 'color-comp
                         &lt;span style="color: #006FE0;"&gt;:export&lt;/span&gt; 'color-link-export)
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;:face&lt;/td&gt;
&lt;td class="org-left"&gt;color-link-face&lt;/td&gt;
&lt;td class="org-left"&gt;:complete&lt;/td&gt;
&lt;td class="org-left"&gt;color-comp&lt;/td&gt;
&lt;td class="org-left"&gt;:export&lt;/td&gt;
&lt;td class="org-left"&gt;color-link-export&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2016 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2016/11/08/New-color-link-in-org-9.0-using-font-lock-to-color-the-text.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Better equation numbering in LaTeX fragments in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode</id>
    <updated>2016-11-07T07:02:19Z</updated>
    <published>2016-11-07T07:02:19Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="latex" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Better equation numbering in LaTeX fragments in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode"><![CDATA[


&lt;p&gt;
In org-mode we can use LaTeX equations, and toggle an overlay that shows what the rendered equation will look like. One thing that has always bothered me though, is that each fragment is created in isolation. That means numbering is almost always wrong, and typically with each numbered equation starting with (1). Here we look at a way to fix that. Fixing it means we have to find a way to not create each fragment image in isolation; each one needs a context that enables the numbering to be correct. The idea we try here is simple: we just figure out in advance what the numbering for each equation should be, and then figure out how to get that information to the image generation.
&lt;/p&gt;

&lt;p&gt;
See this video of the post in action:
&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/pcMuJlUvKCw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Here are some example equations to see how it works.
&lt;/p&gt;

&lt;p&gt;
This should be numbered (1)
&lt;/p&gt;
\begin{equation}
\int x^2 dx
\end{equation}

&lt;p&gt;
This is a numbered equation with a custom number. This should have (E1) as the number.
&lt;/p&gt;
\begin{equation}\tag{E1}
\int x^2 dx
\end{equation}

&lt;p&gt;
But equation* is not numbered
&lt;/p&gt;
\begin{equation*}
\int x^2 dx
\end{equation*}

&lt;p&gt;
LaTeX align environments are numbered. The first line is (2), the second line is not numbered (because we put &lt;code&gt;\nonumber&lt;/code&gt; in the line), and the third line is (3).
&lt;/p&gt;
\begin{align}
a = 5 \\
b=6 \nonumber \\
c = 8
\end{align}

&lt;p&gt;
But align* environments are not numbered.
&lt;/p&gt;
\begin{align*}
a = 5 \\
b=6
\end{align*}

&lt;p&gt;
This should be numbered (4).
&lt;/p&gt;

\begin{equation}
\int x^3 dx
\end{equation}

&lt;p&gt;
These should be numbered (5), (6) and (7).
&lt;/p&gt;
\begin{align}
a = 5 \\
b=6  \\
c = 8
\end{align}

&lt;p&gt;
This should be numbered with (E2).
&lt;/p&gt;
\begin{equation}\tag{E2}
\int x^2 dx 
\end{equation}

&lt;p&gt;
And this should be numbered (8).
&lt;/p&gt;
\begin{equation}
\int x^2 dx 
\end{equation}

&lt;p&gt;
Note: This will be numbered (1) because it is exactly the same equation as a previous one! 
&lt;/p&gt;
\begin{equation}
\int x^2 dx
\end{equation}


&lt;p&gt;
We can change the numbering of an equation with code like this. After this code, the next equation will be numbered (5).
&lt;/p&gt;

&lt;p&gt;
The only fragments that should be numbered are equation environments, and align environments (these are the main ones that we consider here). The align environment is tricky since there is potentially more than one number in the environment. 
&lt;/p&gt;

&lt;p&gt;
So, we get all the fragments, and generate a list of which ones should be numbered, and if they should what the number should be. That means we will need to count the number of numbered equations in an align environment. We will do that by getting the number of line breaks, and subtracting the number of nonumbers.
&lt;/p&gt;

&lt;p&gt;
Here is the code block that does that, using advice again. A downside of this approach is that we generate the list for every fragment, which is not efficient, since it should not change in a synchronous approach to generating them.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;org-renumber-environment&lt;/span&gt; (orig-func &lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; args)
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((results '()) 
        (counter -1)
        (numberp))

    (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; results (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for (begin .  env) in 
                        (org-element-map (org-element-parse-buffer) 'latex-environment
                          (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (env)
                            (cons
                             (org-element-property &lt;span style="color: #006FE0;"&gt;:begin&lt;/span&gt; env)
                             (org-element-property &lt;span style="color: #006FE0;"&gt;:value&lt;/span&gt; env))))
                        collect
                        (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
                         ((&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (string-match &lt;span style="color: #008000;"&gt;"\\\\begin{equation}"&lt;/span&gt; env)
                               (not (string-match &lt;span style="color: #008000;"&gt;"\\\\tag{"&lt;/span&gt; env)))
                          (&lt;span style="color: #0000FF;"&gt;incf&lt;/span&gt; counter)
                          (cons begin counter))
                         ((string-match &lt;span style="color: #008000;"&gt;"\\\\begin{align}"&lt;/span&gt; env)
                          (&lt;span style="color: #0000FF;"&gt;prog2&lt;/span&gt;
                              (&lt;span style="color: #0000FF;"&gt;incf&lt;/span&gt; counter)
                              (cons begin counter)                          
                            (&lt;span style="color: #0000FF;"&gt;with-temp-buffer&lt;/span&gt;
                              (insert env)
                              (goto-char (point-min))
                              &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;\\ is used for a new line. Each one leads to a number&lt;/span&gt;
                              (&lt;span style="color: #0000FF;"&gt;incf&lt;/span&gt; counter (count-matches &lt;span style="color: #008000;"&gt;"\\\\$"&lt;/span&gt;))
                              &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;unless there are nonumbers.&lt;/span&gt;
                              (goto-char (point-min))
                              (&lt;span style="color: #0000FF;"&gt;decf&lt;/span&gt; counter (count-matches &lt;span style="color: #008000;"&gt;"\\nonumber"&lt;/span&gt;)))))
                         (t
                          (cons begin nil)))))

    (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; numberp (cdr (assoc (point) results)))
      (&lt;span style="color: #0000FF;"&gt;setf&lt;/span&gt; (car args)
            (concat
             (format &lt;span style="color: #008000;"&gt;"\\setcounter{equation}{%s}\n"&lt;/span&gt; numberp)
             (car args)))))
  
  (apply orig-func args))

(advice-add 'org-create-formula-image &lt;span style="color: #006FE0;"&gt;:around&lt;/span&gt; #'org-renumber-environment)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You can remove the advice like this.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(advice-remove 'org-create-formula-image #'org-renumber-environment)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2016 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0&lt;/p&gt;]]></content>
  </entry>
</feed>
