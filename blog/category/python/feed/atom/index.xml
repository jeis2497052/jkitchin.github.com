<?xml version="1.0" encoding="UTF-8"?>

<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
  >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2017-05-05T14:26:11Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A Hy macro for defining functions with docstrings on each argument]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/03/19/A-Hy-macro-for-defining-functions-with-docstrings-on-each-argument" />
    <id>http://jkitchin.github.io/blog/2017/03/19/A-Hy-macro-for-defining-functions-with-docstrings-on-each-argument</id>
    <updated>2017-03-19T19:53:05Z</updated>
    <published>2017-03-19T19:47:22Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="hylang" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[A Hy macro for defining functions with docstrings on each argument]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/03/19/A-Hy-macro-for-defining-functions-with-docstrings-on-each-argument"><![CDATA[


&lt;p&gt;
For functions with a lot of arguments, python style docstrings leave something to be desired. For one, they are not that close to the arguments, so if you have a function with say 20 arguments, the docstring might take up a whole page! That means they are hard to keep synchronized too. Let's not argue now over the merits of a function with 20+ arguments, it is enough that they exist, and are a problem.
&lt;/p&gt;

&lt;p&gt;
So what are typical documentation standards? Here is a Numpy style doc string:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;func&lt;/span&gt;(arg1, arg2):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #036A07;"&gt;"""multiply arg1 and arg2&lt;/span&gt;

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   Parameters&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   ----------&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   arg1 : a number&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   arg2 : a number&lt;/span&gt;

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   """&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; arg1 * arg2
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It works well for a small number of arguments with limited descriptions. This is a proper docstring that is accessible by introspection and pydoc. With much longer argument lists, this falls apart. I will not pick on any code in particular here, but suffice it to say I was inspired today to think of a better way. There are some other documentation solutions at &lt;a href="http://stackoverflow.com/questions/9195455/how-to-document-a-method-with-parameters"&gt;http://stackoverflow.com/questions/9195455/how-to-document-a-method-with-parameters&lt;/a&gt;, but None of them are better in my opinion. I want accessible docstrings by instrospection, and only if that is unavailable do I want to read the code! Finally, if I have to read the code, I want it to be easy to figure out, which means the documentation is close to the arguments.
&lt;/p&gt;

&lt;p&gt;
There is bad news, I do not have one for vanilla python. Python does not even give you a way to deal with this. But, if we had a lisp, we could make a macro to help us out. In fact, we &lt;i&gt;have&lt;/i&gt; a lisp with &lt;a href="http://docs.hylang.org/en/latest/"&gt;hy&lt;/a&gt;! And we can use a macro to make a  syntax that lets us keep the docstring close to the argument, &lt;i&gt;and&lt;/i&gt; that constructs a real docstring so we get help later!
&lt;/p&gt;

&lt;p&gt;
Here it is:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-jupyter-hy"&gt;(&lt;span style="color: #0000FF;"&gt;defmacro&lt;/span&gt; &lt;span style="color: #006699;"&gt;mydef&lt;/span&gt; [func args &lt;span style="color: #6434A3;"&gt;&amp;amp;optional&lt;/span&gt; docstring &lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; body]
  `(&lt;span style="color: #0000FF;"&gt;defn&lt;/span&gt; &lt;span style="color: #006699;"&gt;~func&lt;/span&gt; [~@(&lt;span style="color: #006FE0;"&gt;map&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; [x] (&lt;span style="color: #006FE0;"&gt;nth&lt;/span&gt; x 0)) args)]
     ~(&lt;span style="color: #006FE0;"&gt;+&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; docstring (&lt;span style="color: #006FE0;"&gt;+&lt;/span&gt; docstring &lt;span style="color: #008000;"&gt;"\n\n"&lt;/span&gt;) &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)
         &lt;span style="color: #008000;"&gt;"Parameters\n----------\n"&lt;/span&gt;
         (.join &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt; (&lt;span style="color: #006FE0;"&gt;map&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; [x]
                            (.format &lt;span style="color: #008000;"&gt;"{} : {}"&lt;/span&gt;
                                     (&lt;span style="color: #006FE0;"&gt;nth&lt;/span&gt; x 0)
                                     (&lt;span style="color: #006FE0;"&gt;nth&lt;/span&gt; x 1))) args)))
     ~@body))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We can checkout how it expands like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-jupyter-hy"&gt;(&lt;span style="color: #006FE0;"&gt;print&lt;/span&gt; (&lt;span style="color: #006FE0;"&gt;macroexpand&lt;/span&gt; '(mydef f [(a &lt;span style="color: #008000;"&gt;"an int"&lt;/span&gt;)
                               (b &lt;span style="color: #008000;"&gt;"an int"&lt;/span&gt;)]
                            &lt;span style="color: #008000;"&gt;"some doc"&lt;/span&gt;
                            (&lt;span style="color: #006FE0;"&gt;*&lt;/span&gt; a b))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
('setv' 'f' ('fn' ['a' 'b'] 'some doc\n\nParameters\n----------\na : an int\nb : an int' ('*' 'a' 'b')))
&lt;/pre&gt;

&lt;p&gt;
That looks ok. Now, for an example of using that. Here is the same function we defined before, but I put the documentation for each argument with the argument.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-jupyter-hy"&gt;(mydef func ((arg1 &lt;span style="color: #008000;"&gt;"a number"&lt;/span&gt;)
             (arg2 &lt;span style="color: #008000;"&gt;"a number"&lt;/span&gt;))
  &lt;span style="color: #008000;"&gt;"Multiply arg1 by arg2"&lt;/span&gt;
  (&lt;span style="color: #006FE0;"&gt;*&lt;/span&gt; arg1 arg2))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We can use the function now like a regular function.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-jupyter-hy"&gt;(&lt;span style="color: #006FE0;"&gt;print&lt;/span&gt; (func 24 3))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
72
&lt;/pre&gt;

&lt;p&gt;
And now for the help.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-jupyter-hy"&gt;(help func)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Help on function func in module __main__:

func(arg1, arg2)
    Multiply arg1 by arg2

    Parameters
    ----------
    arg1 : a number
    arg2 : a number
&lt;/pre&gt;

&lt;p&gt;
Now, that should amaze and astonish you if you are a vanilla Pythonista! We have our cake, and we eat it too. You just can not make up your own syntax that way in Python. Imagine, we could add type information, validation code, etc&amp;#x2026; into that macro. Maybe it could even be possible to store argument dependent documentation on the function, say in the function dictionary. That would require some conventions I guess,  but they could become introspectable then. For example, in this vanilla Python:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;f&lt;/span&gt;(x): &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; x*x
&lt;span style="color: #BA36A5;"&gt;f.__dict__&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'args'&lt;/span&gt;] = {&lt;span style="color: #008000;"&gt;'x'&lt;/span&gt;: &lt;span style="color: #008000;"&gt;'A number'&lt;/span&gt;}
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(f.__dict__)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
{'args': {'x': 'A number'}}
&lt;/p&gt;

&lt;p&gt;
In the end, this does not really solve all the problems I have with current docstrings in Python. It does solve a problem with writing and reading the code by keeping documentation close to the arguments, but ultimately the docstring from Python's point of view will basically look the same. It is pretty awesome that it is even possible. Hy lisp for the win here (again!).
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/03/19/A-Hy-macro-for-defining-functions-with-docstrings-on-each-argument.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Modeling a Cu dimer by EMT, nonlinear regression and neural networks]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/03/18/Modeling-a-Cu-dimer-by-EMT-nonlinear-regression-and-neural-networks" />
    <id>http://jkitchin.github.io/blog/2017/03/18/Modeling-a-Cu-dimer-by-EMT-nonlinear-regression-and-neural-networks</id>
    <updated>2017-03-18T15:47:55Z</updated>
    <published>2017-03-18T15:47:55Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="neural-network" />
    <category scheme="http://jkitchin.github.io/blog" term="machine-learning" />
    <category scheme="http://jkitchin.github.io/blog" term="molecular-simulation" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Modeling a Cu dimer by EMT, nonlinear regression and neural networks]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/03/18/Modeling-a-Cu-dimer-by-EMT-nonlinear-regression-and-neural-networks"><![CDATA[


&lt;p&gt;
In this post we consider a Cu&lt;sub&gt;2&lt;/sub&gt; dimer and how its energy varies with the separation of the atoms. We assume we have a way to calculate this, but that it is expensive, and that we want to create a simpler model that is as accurate, but cheaper to run. A simple way to do that is to regress a physical model, but we will illustrate some challenges with that. We then show a neural network can be used as an accurate regression function without needing to know more about the physics.
&lt;/p&gt;

&lt;p&gt;
We will use an &lt;a href="https://wiki.fysik.dtu.dk/ase/ase/calculators/emt.html"&gt;effective medium theory&lt;/a&gt; calculator to demonstrate this. The calculations are not expected to be very accurate or relevant to any experimental data, but they are fast, and will illustrate several useful points that are independent of that. We will take as our energy zero the energy of two atoms at a large separation, in this case about 10 angstroms. Here we plot the energy as a function of the distance between the two atoms, which is the only degree of freedom that matters in this example.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np
%matplotlib inline
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt

&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; ase.calculators.emt &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; EMT
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; ase &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Atoms

&lt;span style="color: #BA36A5;"&gt;atoms&lt;/span&gt; = Atoms(&lt;span style="color: #008000;"&gt;'Cu2'&lt;/span&gt;,[[0, 0, 0], [10, 0, 0]], pbc=[&lt;span style="color: #D0372D;"&gt;False&lt;/span&gt;, &lt;span style="color: #D0372D;"&gt;False&lt;/span&gt;, &lt;span style="color: #D0372D;"&gt;False&lt;/span&gt;])
atoms.set_calculator(EMT())

&lt;span style="color: #BA36A5;"&gt;e0&lt;/span&gt; = atoms.get_potential_energy()

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Array of bond lengths to get the energy for&lt;/span&gt;
&lt;span style="color: #BA36A5;"&gt;d&lt;/span&gt; = np.linspace(1.7, 3, 30)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;get_e&lt;/span&gt;(distance):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;a&lt;/span&gt; = atoms.copy()
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   a[1]&lt;span style="color: #BA36A5;"&gt;.x&lt;/span&gt; = distance
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   a.set_calculator(EMT())
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;e&lt;/span&gt; = a.get_potential_energy()
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; e

&lt;span style="color: #BA36A5;"&gt;e&lt;/span&gt; = np.array([get_e(dist) &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; dist &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; d])
&lt;span style="color: #BA36A5;"&gt;e&lt;/span&gt; -=  e0  &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;set the energy zero&lt;/span&gt;

plt.plot(d, e, &lt;span style="color: #008000;"&gt;'bo '&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #008000;"&gt;'d (&amp;#197;)'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'energy (eV)'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/ob-ipython-82aeda9421056689d5212f9033da900a.png"&gt; 
&lt;/p&gt;


&lt;p&gt;
We see there is a minimum, and the energy is asymmetric about the minimum. We have no functional form for the energy here, just the data in the plot. So to get another energy, we have to run another calculation. If that was expensive, we might prefer an analytical equation to evaluate instead.  We will get an analytical form by fitting a function to the data. A classic one is the &lt;a href="https://en.wikipedia.org/wiki/Buckingham_potential"&gt;Buckingham potential&lt;/a&gt;: \(E = A \exp(-B r) - \frac{C}{r^6}\). Here we perform the regression.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;model&lt;/span&gt;(r, A, B, C):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; A * np.exp(-B * r) - C / r**6

&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; pycse &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; nlinfit
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pprint

&lt;span style="color: #BA36A5;"&gt;p0&lt;/span&gt; = [-80, 1, 1]
&lt;span style="color: #BA36A5;"&gt;p&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;pint&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;se&lt;/span&gt; = nlinfit(model, d, e, p0, 0.05)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'Parameters = '&lt;/span&gt;, p)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'Confidence intervals = '&lt;/span&gt;)
pprint.pprint(pint)
plt.plot(d, e, &lt;span style="color: #008000;"&gt;'bo '&lt;/span&gt;, label=&lt;span style="color: #008000;"&gt;'calculations'&lt;/span&gt;)

&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = np.linspace(&lt;span style="color: #006FE0;"&gt;min&lt;/span&gt;(d), &lt;span style="color: #006FE0;"&gt;max&lt;/span&gt;(d))
plt.plot(x, model(x, *p), label=&lt;span style="color: #008000;"&gt;'fit'&lt;/span&gt;)
plt.legend(loc=&lt;span style="color: #008000;"&gt;'best'&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #008000;"&gt;'d (&amp;#197;)'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'energy (eV)'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Parameters =  [ -83.21072545    1.18663393 -266.15259507]
Confidence intervals =
array([[ -93.47624687,  -72.94520404],
       [   1.14158438,    1.23168348],
       [-280.92915682, -251.37603331]])
&lt;img src="/media/ob-ipython-a05811588d06f090a2462ba9f48dccb3.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
That fit is ok, but not great. We would be better off with a spline for this simple system! The trouble is how do we get anything better? If we had a better equation to fit to we might get better results.  While one might come up with one for this dimer, how would you extend it to more complex systems, even just a trimer? There have been decades of research dedicated to that, and we are not smarter than those researchers so, it is time for a new approach.
&lt;/p&gt;

&lt;p&gt;
We will use a Neural Network regressor. The input will be \(d\) and we want to regress a function to predict the energy.
&lt;/p&gt;

&lt;p&gt;
There are a couple of important points to make here.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;This is just another kind of regression.&lt;/li&gt;
&lt;li&gt;We need a lot more data to do the regression. Here we use 300 data points.&lt;/li&gt;
&lt;li&gt;We need to specify a network architecture. Here we use one hidden layer with 10 neurons, and the tanh activation function on each neuron. The last layer is just the output layer. I do not claim this is any kind of optimal architecture. It is just one that works to illustrate the idea.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Here is the code that uses a neural network regressor, which is lightly adapted from &lt;a href="http://scikit-neuralnetwork.readthedocs.io/en/latest/guide_model.html"&gt;http://scikit-neuralnetwork.readthedocs.io/en/latest/guide_model.html&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; sknn.mlp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Regressor, Layer

&lt;span style="color: #BA36A5;"&gt;D&lt;/span&gt; = np.linspace(1.7, 3, 300)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;get_e&lt;/span&gt;(distance):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;a&lt;/span&gt; = atoms.copy()
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   a[1]&lt;span style="color: #BA36A5;"&gt;.x&lt;/span&gt; = distance
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   a.set_calculator(EMT())
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;e&lt;/span&gt; = a.get_potential_energy()
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; e

&lt;span style="color: #BA36A5;"&gt;E&lt;/span&gt; = np.array([get_e(dist) &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; dist &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; D])
&lt;span style="color: #BA36A5;"&gt;E&lt;/span&gt; -=  e0  &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;set the energy zero&lt;/span&gt;

&lt;span style="color: #BA36A5;"&gt;X_train&lt;/span&gt; = np.row_stack(np.array(D))

&lt;span style="color: #BA36A5;"&gt;N&lt;/span&gt; = 10
&lt;span style="color: #BA36A5;"&gt;nn&lt;/span&gt; = Regressor(layers=[Layer(&lt;span style="color: #008000;"&gt;"Tanh"&lt;/span&gt;, units=N),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  Layer(&lt;span style="color: #008000;"&gt;'Linear'&lt;/span&gt;)])
nn.fit(X_train, E)

&lt;span style="color: #BA36A5;"&gt;dfit&lt;/span&gt; = np.linspace(&lt;span style="color: #006FE0;"&gt;min&lt;/span&gt;(d), &lt;span style="color: #006FE0;"&gt;max&lt;/span&gt;(d))

&lt;span style="color: #BA36A5;"&gt;efit&lt;/span&gt; = nn.predict(np.row_stack(dfit))

plt.plot(d, e, &lt;span style="color: #008000;"&gt;'bo '&lt;/span&gt;)
plt.plot(dfit, efit)
plt.legend([&lt;span style="color: #008000;"&gt;'calculations'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'neural network'&lt;/span&gt;])
plt.xlabel(&lt;span style="color: #008000;"&gt;'d (&amp;#197;)'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'energy (eV)'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/ob-ipython-025c1b30f565c5806510804582e91242.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
This fit looks pretty good, better than we got for the Buckingham potential. Well, it probably should look better, we have many more parameters that were fitted! It is not perfect, but it could be systematically improved by increasing the number of hidden layers, and neurons in each layer. I am being a little loose here by relying on a visual assessment of the fit. To systematically improve it you would need a quantitative analysis of the errors. I also note though, that if I run the block above several times in succession, I get different fits each time. I suppose that is due to some random numbers used to initialize the fit, but sometimes the fit is about as good as the result you see above, and sometimes it is terrible.
&lt;/p&gt;

&lt;p&gt;
Ok, what is the point after all? We developed a neural network that pretty accurately captures the energy of a Cu dimer &lt;i&gt;with no knowledge&lt;/i&gt; of the physics involved. Now, EMT is not that expensive, but suppose this required 300 DFT calculations at 1 minute or more a piece? That is five hours just to get the data! With this neural network, we can quickly compute energies. For example, this shows we get about 10000 energy calculations in just 287 ms.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%%timeit

&lt;span style="color: #BA36A5;"&gt;dfit&lt;/span&gt; = np.linspace(&lt;span style="color: #006FE0;"&gt;min&lt;/span&gt;(d), &lt;span style="color: #006FE0;"&gt;max&lt;/span&gt;(d), 10000)
&lt;span style="color: #BA36A5;"&gt;efit&lt;/span&gt; = nn.predict(np.row_stack(dfit))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
1 loop, best of 3: 287 ms per loop
&lt;/p&gt;

&lt;p&gt;
Compare that to the time it took to compute the 300 energies with EMT
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%%timeit
&lt;span style="color: #BA36A5;"&gt;E&lt;/span&gt; = np.array([get_e(dist) &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; dist &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; D])
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
1 loop, best of 3: 230 ms per loop
&lt;/p&gt;

&lt;p&gt;
The neural network is a lot faster than the way we get the EMT energies!
&lt;/p&gt;

&lt;p&gt;
It is true in this case we could have used a spline, or interpolating function and it would likely be even better than this Neural Network. We are aiming to get more complicated soon though. For a trimer, we will have three dimensions to worry about, and that can still be worked out in a similar fashion I think. Past that, it becomes too hard to reduce the dimensions, and this approach breaks down. Then we have to try something else. We will get to that in another post.
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/03/18/Modeling-a-Cu-dimer-by-EMT,-nonlinear-regression-and-neural-networks.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[ob-ipython and inline figures in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/01/29/ob-ipython-and-inline-figures-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2017/01/29/ob-ipython-and-inline-figures-in-org-mode</id>
    <updated>2017-01-29T16:05:22Z</updated>
    <published>2017-01-29T16:05:22Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="ipython" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[ob-ipython and inline figures in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/01/29/ob-ipython-and-inline-figures-in-org-mode"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org36f9eed"&gt;1. code for getting output and inline figures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; provides some nice support for inline images, but it is a little limited. You can only have one inline plot, and you cannot capture the printed output. I often want both, and use more than one figure in a code block. So, here I look at a way to get that. 
&lt;/p&gt;

&lt;p&gt;
When ob-ipython executes a cell, it gets two things internally: the output and a list of result elements. The output is all the stuff that is printed, and the result contains result cells. So, we just have to check these for images, and append them to the output in an appropriate way.  I will do that using file links so that org automatically renders them. We will save the images as temp files, since they are regenerated each time you run the cell. 
&lt;/p&gt;

&lt;p&gt;
I want output and inline figures. This ipython block should output some text and two figures. Note we do not define file names anywhere! See &lt;a href="#org36f9eed"&gt;this section&lt;/a&gt; for details on how to get ob-ipython to do this.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%matplotlib inline
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;t&lt;/span&gt; = np.linspace(0, 20 * np.pi, 350)
&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = np.exp(-0.1 * t) * np.sin(t)
&lt;span style="color: #BA36A5;"&gt;y&lt;/span&gt; = np.exp(-0.1 * t) * np.cos(t)

plt.plot(x, y)
plt.axis(&lt;span style="color: #008000;"&gt;'equal'&lt;/span&gt;)

plt.figure()
plt.plot(y, x)
plt.axis(&lt;span style="color: #008000;"&gt;'equal'&lt;/span&gt;)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'Length of t = {}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;len&lt;/span&gt;(t)))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'x .dot. y = {}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(x @ y))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Length of t = 350
x .dot. y = 1.3598389888491538
&lt;img src="/media/ob-ipython-86557tr2.png"&gt; 
&lt;img src="/media/ob-ipython-86557f1F.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
Nice, success! Now my code blocks &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks/"&gt;export more cleanly to jupyter notebooks&lt;/a&gt;. Speaking of which, if you liked the post on that, there is a new library for it in scimax: &lt;a href="https://github.com/jkitchin/scimax/blob/master/ox-ipynb.el"&gt;https://github.com/jkitchin/scimax/blob/master/ox-ipynb.el&lt;/a&gt;. Yes, one day I will put it in its own repo, and probably put it up on MELPA. If it turns out to be useful over the next semester. 
&lt;/p&gt;



&lt;div id="outline-container-org36f9eed" class="outline-2"&gt;
&lt;h2 id="org36f9eed"&gt;&lt;a id="ID-44FC1FFF-A6EA-466E-B61C-85B22E58781D"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; code for getting output and inline figures&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I wrote one new function that writes the base64 data out to a temporary file and returns a link to it. Then, I modified the org-babel-execute:ipython function to append these links onto the output. It seems like you need to use a header like this in your ob-ipython block, notably the results need to be in a drawer like this if you want org-mode to render the images. They do not show up in the results that have colons starting them.
&lt;/p&gt;

&lt;pre class="example"&gt;
#+BEGIN_SRC ipython :session :results output drawer
&lt;/pre&gt;

&lt;p&gt;
Here is the code.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;ob-ipython-inline-image&lt;/span&gt; (b64-string)
  &lt;span style="color: #036A07;"&gt;"Write the b64-string to a temporary file.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;Returns an org-link to the file."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((tfile (make-temp-file &lt;span style="color: #008000;"&gt;"ob-ipython-"&lt;/span&gt; nil &lt;span style="color: #008000;"&gt;".png"&lt;/span&gt;))
         (link (format &lt;span style="color: #008000;"&gt;"[[file:%s]]"&lt;/span&gt; tfile)))
    (ob-ipython--write-base64-string tfile b64-string)
    link))


(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;org-babel-execute:ipython&lt;/span&gt; (body params)
  &lt;span style="color: #036A07;"&gt;"Execute a block of IPython code with Babel.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;This function is called by `&lt;/span&gt;&lt;span style="color: #D0372D;"&gt;org-babel-execute-src-block&lt;/span&gt;&lt;span style="color: #036A07;"&gt;'."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((file (cdr (assoc &lt;span style="color: #006FE0;"&gt;:file&lt;/span&gt; params)))
         (session (cdr (assoc &lt;span style="color: #006FE0;"&gt;:session&lt;/span&gt; params)))
         (result-type (cdr (assoc &lt;span style="color: #006FE0;"&gt;:result-type&lt;/span&gt; params))))
    (org-babel-ipython-initiate-session session params)
    (&lt;span style="color: #0000FF;"&gt;-when-let&lt;/span&gt; (ret (ob-ipython--eval
                     (ob-ipython--execute-request
                      (org-babel-expand-body:generic (encode-coding-string body 'utf-8)
                                                     params (org-babel-variable-assignments:python params))
                      (ob-ipython--normalize-session session))))
      (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((result (cdr (assoc &lt;span style="color: #006FE0;"&gt;:result&lt;/span&gt; ret)))
            (output (cdr (assoc &lt;span style="color: #006FE0;"&gt;:output&lt;/span&gt; ret))))
        (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (eq result-type 'output)
            (concat
             output 
             (format &lt;span style="color: #008000;"&gt;"%s"&lt;/span&gt;
                     (mapconcat 'identity
                                (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for res in result
                                      if (eq 'image/png (car res))
                                      collect (ob-ipython-inline-image (cdr res)))
                                &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt;)))
          (ob-ipython--create-stdout-buffer output)
          (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt; ((&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; file (string= (f-ext file) &lt;span style="color: #008000;"&gt;"png"&lt;/span&gt;))
                 (&lt;span style="color: #0000FF;"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; result (assoc 'image/png) cdr (ob-ipython--write-base64-string file)))
                ((&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; file (string= (f-ext file) &lt;span style="color: #008000;"&gt;"svg"&lt;/span&gt;))
                 (&lt;span style="color: #0000FF;"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; result (assoc 'image/svg+xml) cdr (ob-ipython--write-string-to-file file)))
                (file (&lt;span style="color: #ff0000; font-weight: bold;"&gt;error&lt;/span&gt; &lt;span style="color: #008000;"&gt;"%s is currently an unsupported file extension."&lt;/span&gt; (f-ext file)))
                (t (&lt;span style="color: #0000FF;"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; result (assoc 'text/plain) cdr))))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
org-babel-execute:ipython
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/29/ob-ipython-and-inline-figures-in-org-mode.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Exporting org-mode to Jupyter notebooks]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks" />
    <id>http://jkitchin.github.io/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks</id>
    <updated>2017-01-25T08:50:18Z</updated>
    <published>2017-01-21T19:51:23Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="jupyter" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Exporting org-mode to Jupyter notebooks]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orge344b68"&gt;1. Solve a nonlinear problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgdcea869"&gt;2. Benefits of export to ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org26076b0"&gt;3. Limitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgfe4c8f7"&gt;4. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I am going to use Jupyter notebooks to teach from this semester. I really dislike preparing notebooks though. A browser is a really poor editor, and I really dislike Markdown. Notebooks do not seem to have any real structure in them, e.g. the collapsible outline that I am used to in org-mode, so for long notebooks, it is difficult to get a sense for the structure. I am anticipating spending up to 80 hours preparing notebooks this semester, so today I worked out some code to export org-mode to an ipython notebook! 
&lt;/p&gt;

&lt;p&gt;
This will let me use the power tools I am accustomed to for the creation of IPython notebooks for my students, and perhaps others who do not use org-mode. 
&lt;/p&gt;

&lt;p&gt;
Jupyter notebooks are just json files, so all we need to do is generate it from an org document. The basic strategy was to build up a lisp data structure that represents the notebook and then just convert that data structure to json. I split the document up into sequential markdown and code cells, and then encode those in the format required for the notebook (json).
&lt;/p&gt;

&lt;p&gt;
So, here is an example of what can be easily written in org-mode, posted to this blog, and exported to an IPython notebook, all from one org-document.
&lt;/p&gt;

&lt;p&gt;
Check out the notebook:  &lt;a href="/media/exporting-orgmode-to-ipynb.ipynb"&gt;exporting-orgmode-to-ipynb.ipynb&lt;/a&gt; . 
&lt;/p&gt;

&lt;div id="outline-container-orge344b68" class="outline-2"&gt;
&lt;h2 id="orge344b68"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Solve a nonlinear problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Consider the equation \(x^2 = 4\). Find a solution to it in Python using a nonlinear solver. 
&lt;/p&gt;

&lt;p&gt;
To do that, we need to define an objective function that will be equal to zero at the solution. Here is the function:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;objective&lt;/span&gt;(x):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; x**2 - 4
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Next, we use fsolve with an initial guess. We get fsolve from &lt;a href="https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve"&gt;scipy.optimize&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; scipy.optimize &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; fsolve

&lt;span style="color: #BA36A5;"&gt;ans&lt;/span&gt; = fsolve(objective, 3)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[ 2.]
&lt;/pre&gt;

&lt;p&gt;
That should have been an obvious answer. The answer is in brackets because fsolve returns an array. In the next block we will unpack the solution into the answer using the comma operator. Also, we can see that using a different guess leads to a different answer. There are, of course, two answers: \(x = \pm 2\)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;ans, = fsolve(objective, -3)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
-2.0
&lt;/pre&gt;

&lt;p&gt;
Now you see we get a float answer!
&lt;/p&gt;

&lt;p&gt;
Here are some other ways to get a float:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #BA36A5;"&gt;ans&lt;/span&gt; = fsolve(objective, -3)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;float&lt;/span&gt;(ans))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans[0])
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
-2.0000000000000084
-2.0
&lt;/pre&gt;

&lt;p&gt;
It is worth noting from the first result that fsolve is iterative and stops when it reaches zero within a tolerance. That is why it is not exactly -2.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdcea869" class="outline-2"&gt;
&lt;h2 id="orgdcea869"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Benefits of export to ipynb&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;I can use org-mode&lt;/li&gt;
&lt;li&gt;And emacs&lt;/li&gt;
&lt;li&gt;and ipynb for teaching.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The export supports org-markup: &lt;b&gt;bold&lt;/b&gt;, &lt;i&gt;italic&lt;/i&gt;, &lt;span class="underline"&gt;underlined&lt;/span&gt;, and ~~strike~~.
&lt;/p&gt;

&lt;p&gt;
We can use tables:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;
&lt;caption class="t-above"&gt;&lt;span class="table-number"&gt;Table 1:&lt;/span&gt; A table of squares.&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;x&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
We can make plots.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;t&lt;/span&gt; = np.linspace(0, 2 * np.pi)

&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = np.cos(t)
&lt;span style="color: #BA36A5;"&gt;y&lt;/span&gt; = np.sin(t)

&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
plt.plot(x, y)
plt.axis(&lt;span style="color: #008000;"&gt;'equal'&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #008000;"&gt;'x'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'y'&lt;/span&gt;)
plt.savefig(&lt;span style="color: #008000;"&gt;'circle.png'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/circle.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
Even include HTML:
&amp;lt;font color="red"&amp;gt;Pay special attention to the axis labels!&amp;lt;/font&amp;gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org26076b0" class="outline-2"&gt;
&lt;h2 id="org26076b0"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Limitations&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Only supports iPython blocks&lt;/li&gt;
&lt;li&gt;Does not do inline images in results&lt;/li&gt;
&lt;li&gt;Will not support src-block variables&lt;/li&gt;
&lt;li&gt;Currently only supports vanilla output results&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgfe4c8f7" class="outline-2"&gt;
&lt;h2 id="orgfe4c8f7"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
The code that does this is here: &lt;a href="/media/ox-ipynb.el"&gt;ox-ipynb.el&lt;/a&gt; . After I use it a while I will put it in scimax. There are some tricks in it to fix up some markdown export of latex fragments and links with no descriptions.
&lt;/p&gt;

&lt;p&gt;
I just run this command in Emacs to get the notebook. Even it renders reasonably in the notebook.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(export-ipynb-buffer)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Overall, this looks extremely promising to develop lecture notes and assignments in org-mode, but export them to Ipython notebooks for the students.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Querying a MongoDB bibtex database with Python and emacs-lisp]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/01/15/Querying-a-MongoDB-bibtex-database-with-Python-and-emacs-lisp" />
    <id>http://jkitchin.github.io/blog/2017/01/15/Querying-a-MongoDB-bibtex-database-with-Python-and-emacs-lisp</id>
    <updated>2017-01-15T10:36:22Z</updated>
    <published>2017-01-15T10:36:22Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="database" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="mongodb" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Querying a MongoDB bibtex database with Python and emacs-lisp]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/01/15/Querying-a-MongoDB-bibtex-database-with-Python-and-emacs-lisp"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org41df17a"&gt;1. text searching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org6dcd73e"&gt;2. Querying from emacs-lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org6d7544a"&gt;3. Summary thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I have been exploring &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/03/Find-stuff-in-org-mode-anywhere/"&gt;using databases&lt;/a&gt; to help with searching my data. In this post we explore using MongoDB for bibtex entries. I am choosing bibtex entries because it is easy to parse bibtex files, I already have a lot of them, and I have several kinds of queries I regularly use. So, they are a good candidate to test out a new database on!
&lt;/p&gt;

&lt;p&gt;
MongoDB is a noSQL database that is pretty easy to use. I installed it from homebrew, and then followed the directions to run the server.
&lt;/p&gt;

&lt;p&gt;
With pymongo you can make a database as easy as this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; bibtexparser

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Read the bibtex file to get entries&lt;/span&gt;
&lt;span style="color: #0000FF;"&gt;with&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;open&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'../../../Dropbox/bibliography/references.bib'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'r'&lt;/span&gt;) &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; bibfile:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;bp&lt;/span&gt; = bibtexparser.load(bibfile)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;entries&lt;/span&gt; = bp.entries

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;"N = "&lt;/span&gt;, &lt;span style="color: #006FE0;"&gt;len&lt;/span&gt;(entries))

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(entries[0])

&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pymongo
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; pymongo &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; MongoClient
&lt;span style="color: #BA36A5;"&gt;client&lt;/span&gt; = MongoClient(&lt;span style="color: #008000;"&gt;'localhost'&lt;/span&gt;, 27017)

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;This creates the "entries" collection&lt;/span&gt;
&lt;span style="color: #BA36A5;"&gt;db&lt;/span&gt; = client[&lt;span style="color: #008000;"&gt;'bibtex'&lt;/span&gt;].entries

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;add each entry&lt;/span&gt;
&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; entry &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; entries:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   db.insert_one(entry)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
N =  1671
{'keyword': 'test, word', 'year': '2006', 'publisher': 'American Chemical Society (ACS)', 'title': 'The ACS Style Guide', 'ENTRYTYPE': 'book', 'editor': 'Janet S. Dodd', 'address': 'Washington, D.C.', 'ID': '2006-acs-style-guide', 'doi': '10.1021/bk-2006-styg', 'link': 'http://dx.doi.org/10.1021/bk-2006-STYG', 'date_added': 'Wed Apr  1 10:17:54 2015', 'pages': 'nil'}
&lt;/p&gt;

&lt;p&gt;
That was easy. We have a database with 1671 documents in it, and each document is essentially a dictionary of key-value pairs. You might even argue it was too easy. I didn't specify any structure to the entries at all. No required fields, no validation that the keys are spelled correctly, no validation on the values, e.g. you can see the year looks like a string. The benefit of that is that every entry went in, with no issues. On the other hand, the authors went in as a single string, as did the keywords, which affects our ability to search a little bit later. Note if you run that twice, it will add each entry again, since we do not check if the entry already exists.
&lt;/p&gt;

&lt;p&gt;
A database is only useful though if it is easy to get stuff out of it. So, let's consider some test queries. First we find entries that have years less than 1950. The query is basically a little json bundle that describes a field and condition that we want to match. Here we use a less than operator, ""$lt"The results come back as a list of dictionaries. This is in stark contrast to a SQL query which is an expression in its own declarative language. A query here is a chunk of data that must get converted to code by the server. I am not 100% clear if the less than here is in the string sense or numeric sense, but for years it probably does not matter for a long time.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pymongo
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; pymongo &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; MongoClient
&lt;span style="color: #BA36A5;"&gt;client&lt;/span&gt; = MongoClient(&lt;span style="color: #008000;"&gt;'localhost'&lt;/span&gt;, 27017)

&lt;span style="color: #BA36A5;"&gt;db&lt;/span&gt; = client[&lt;span style="color: #008000;"&gt;'bibtex'&lt;/span&gt;].entries

&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; i, result &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;enumerate&lt;/span&gt;(db.find({&lt;span style="color: #008000;"&gt;"year"&lt;/span&gt; : {&lt;span style="color: #008000;"&gt;"$lt"&lt;/span&gt;: &lt;span style="color: #008000;"&gt;"1950"&lt;/span&gt;}})):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'{i: 2d}. {author}, {title}, {journal}, {year}.'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(i=i+1, **result))
&lt;/pre&gt;
&lt;/div&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Birch, Francis, Finite Elastic Strain of Cubic Crystals, Phys. Rev., 1947.&lt;/li&gt;
&lt;li&gt;Ditchburn, R. W. and Gilmour, J. C., The Vapor Pressures of Monatomic Vapors, Rev. Mod. Phys., 1941.&lt;/li&gt;
&lt;li&gt;J. Korringa, On the Calculation of the Energy of a Bloch Wave in a Metal, Physica, 1947.&lt;/li&gt;
&lt;li&gt;Nix, F. C. and MacNair, D., The Thermal Expansion of Pure Metals. {II}: Molybdenum, Palladium, Silver, Tantalum, Tungsten, Platinum, and Lead, Phys. Rev., 1942.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
That seems easy enough, and those strings could easily be used as candidates for a selection tool like helm.
&lt;/p&gt;

&lt;p&gt;
How about articles published by myself and my student Jacob Boes? This requires "and" logic. Apparently that is the default, so we just add three queries. One is an exact match on articles, and the other two are case-insensitive regular expression matches.  I guess this has to be done on every document, since there probably is no way to index a regex match! This search was very fast, but it is not clear how fast it would be for a million entries. This matching is necessary because we stored all authors in a single field rather than splitting them into an array. We might still have to match strings for this even in an array since an author might then be "John R. Kitchin", rather than further decomposed into first and last names.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pymongo
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; pymongo &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; MongoClient
&lt;span style="color: #BA36A5;"&gt;client&lt;/span&gt; = MongoClient(&lt;span style="color: #008000;"&gt;'localhost'&lt;/span&gt;, 27017)

&lt;span style="color: #BA36A5;"&gt;db&lt;/span&gt; = client[&lt;span style="color: #008000;"&gt;'bibtex'&lt;/span&gt;]
&lt;span style="color: #BA36A5;"&gt;entries&lt;/span&gt; = db[&lt;span style="color: #008000;"&gt;'entries'&lt;/span&gt;]

&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; i, result &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;enumerate&lt;/span&gt;(entries.find({&lt;span style="color: #008000;"&gt;"ENTRYTYPE"&lt;/span&gt;: &lt;span style="color: #008000;"&gt;"article"&lt;/span&gt;,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #008000;"&gt;"author"&lt;/span&gt; : {&lt;span style="color: #008000;"&gt;"$regex"&lt;/span&gt;: &lt;span style="color: #008000;"&gt;"kitchin"&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'$options'&lt;/span&gt; : &lt;span style="color: #008000;"&gt;'i'&lt;/span&gt;},
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #008000;"&gt;"author"&lt;/span&gt; : {&lt;span style="color: #008000;"&gt;"$regex"&lt;/span&gt;: &lt;span style="color: #008000;"&gt;"boes"&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'$options'&lt;/span&gt; : &lt;span style="color: #008000;"&gt;'i'&lt;/span&gt;}})):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; result.get(&lt;span style="color: #008000;"&gt;'doi'&lt;/span&gt;, &lt;span style="color: #D0372D;"&gt;None&lt;/span&gt;):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;result&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'doi'&lt;/span&gt;] = &lt;span style="color: #008000;"&gt;'http://dx.doi.org/{doi}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(doi=result[&lt;span style="color: #008000;"&gt;'doi'&lt;/span&gt;])
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;else&lt;/span&gt;:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;result&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'doi'&lt;/span&gt;] = &lt;span style="color: #008000;"&gt;''&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'{i: 2d}. {author}, {title}, {journal}, {year}. {doi}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(i=i+1, **result).replace(&lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt;, &lt;span style="color: #008000;"&gt;""&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Jacob R. Boes and Peter Kondratyuk and Chunrong Yin and JamesB. Miller and Andrew J. Gellman and John R. Kitchin, Core Level Shifts in {Cu-Pd} Alloys As a Function of BulkComposition and Structure, Surface Science, 2015. &lt;a href="http://dx.doi.org/10.1016/j.susc.2015.02.011"&gt;http://dx.doi.org/10.1016/j.susc.2015.02.011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jacob R. Boes and Gamze Gumuslu and James B. Miller and AndrewJ. Gellman and John R. Kitchin, Estimating Bulk-Composition-Dependent \ce{H2} AdsorptionEnergies on \ce{Cu&lt;sub&gt;x&lt;/sub&gt;Pd&lt;sub&gt;1-x&lt;/sub&gt;} Alloy (111) Surfaces, ACS Catalysis, 2015. &lt;a href="http://dx.doi.org/10.1021/cs501585k"&gt;http://dx.doi.org/10.1021/cs501585k&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jacob R. Boes and Gamze Gumuslu and James B. Miller and AndrewJ. Gellman and John R. Kitchin, Supporting Information: Estimating Bulk-Composition-Dependent\ce{H2} Adsorption Energies on \ce{Cu&lt;sub&gt;x&lt;/sub&gt;Pd&lt;sub&gt;1-x&lt;/sub&gt;} Alloy (111)Surfaces, ACS Catalysis, 2015. &lt;a href="http://dx.doi.org/10.1021/cs501585k"&gt;http://dx.doi.org/10.1021/cs501585k&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;G. Gumuslu and P. Kondratyuk and J. R. Boes and B. Morrealeand J. B. Miller and J. R. Kitchin and A. J. Gellman, Correlation of Electronic Structure With Catalytic Activity:\ce{H2}-\ce{D2} Exchange Across \ce{Cu&lt;sub&gt;x&lt;/sub&gt;Pd&lt;sub&gt;1-x&lt;/sub&gt;}Composition Space, ACS Catalysis, 2015. &lt;a href="http://dx.doi.org/10.1021/cs501586t"&gt;http://dx.doi.org/10.1021/cs501586t&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;John D. Michael and Ethan L. Demeter and Steven M. Illes andQingqi Fan and Jacob R. Boes and John R. Kitchin, Alkaline Electrolyte and {Fe} Impurity Effects on thePerformance and Active-Phase Structure of {NiOOH} Thin Filmsfor {OER} Catalysis Applications, J. Phys. Chem. C, 2015. &lt;a href="http://dx.doi.org/10.1021/acs.jpcc.5b02458"&gt;http://dx.doi.org/10.1021/acs.jpcc.5b02458&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jacob R. Boes and Mitchell C. Groenenboom and John A. Keithand John R. Kitchin, Neural Network and {Reaxff} Comparison for {Au} Properties, Int. J. Quantum Chem., 2016. &lt;a href="http://dx.doi.org/10.1002/qua.25115"&gt;http://dx.doi.org/10.1002/qua.25115&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jacob R. Boes and John R. Kitchin, Neural Network Predictions of Oxygen Interactions on a Dynamic Pd Surface, Molecular Simulation, Accepted 12/2016. &lt;a href="http://dx.doi.org/10.1080/08927022.2016.1274984"&gt;http://dx.doi.org/10.1080/08927022.2016.1274984&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jacob R. Boes and John R. Kitchin, Modeling Segregation on {AuPd}(111) Surfaces With DensityFunctional Theory and Monte Carlo Simulations, Submitted to J. Phys. Chem. C, 2016.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
We can find out how many different entry types we have, as well as how many distinct keyword entries there are. The documents do not separate the keywords though, so this is just the unique strings of comma-separated keywords values. We would have had to split those in advance to have a list of keywords to search for a specific one beyond string matching. Curiously, in my bibtex entries, these are in a field called "keywords". It appears the bibtex parser may have changed the name to "keyword".
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pymongo
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; pymongo &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; MongoClient
&lt;span style="color: #BA36A5;"&gt;client&lt;/span&gt; = MongoClient(&lt;span style="color: #008000;"&gt;'localhost'&lt;/span&gt;, 27017)

&lt;span style="color: #BA36A5;"&gt;db&lt;/span&gt; = client[&lt;span style="color: #008000;"&gt;'bibtex'&lt;/span&gt;]
&lt;span style="color: #BA36A5;"&gt;entries&lt;/span&gt; = db[&lt;span style="color: #008000;"&gt;'entries'&lt;/span&gt;]

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(entries.distinct(&lt;span style="color: #008000;"&gt;"ENTRYTYPE"&lt;/span&gt;))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;len&lt;/span&gt;(entries.distinct(&lt;span style="color: #008000;"&gt;"keyword"&lt;/span&gt;)))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(entries.find({&lt;span style="color: #008000;"&gt;"keyword"&lt;/span&gt;: {&lt;span style="color: #008000;"&gt;"$exists"&lt;/span&gt;: &lt;span style="color: #008000;"&gt;"true"&lt;/span&gt;}})[22][&lt;span style="color: #008000;"&gt;'keyword'&lt;/span&gt;])
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
['book', 'article', 'techreport', 'phdthesis', 'inproceedings', 'inbook', 'mastersthesis', 'misc', 'incollection']
176
Bildungsw{\"a}rmen, Dichtefunktionalrechnungen, Perowskite, Thermochemie
&lt;/p&gt;

&lt;div id="outline-container-org41df17a" class="outline-2"&gt;
&lt;h2 id="org41df17a"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; text searching&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
You can do text search as well. You first have to create an index on one or more fields, and then use the $text and $search operators. Here I made an index on a few fields, and then searched on it. Note that you can only have one text index, so think about it in advance! This simplifies the query a bit, we do not have to use the regex syntax for matching on a field.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pymongo
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; pymongo &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; MongoClient
&lt;span style="color: #BA36A5;"&gt;client&lt;/span&gt; = MongoClient(&lt;span style="color: #008000;"&gt;'localhost'&lt;/span&gt;, 27017)

&lt;span style="color: #BA36A5;"&gt;db&lt;/span&gt; = client[&lt;span style="color: #008000;"&gt;'bibtex'&lt;/span&gt;]
&lt;span style="color: #BA36A5;"&gt;entries&lt;/span&gt; = db[&lt;span style="color: #008000;"&gt;'entries'&lt;/span&gt;]

entries.create_index([(&lt;span style="color: #008000;"&gt;'author'&lt;/span&gt;, pymongo.TEXT),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; (&lt;span style="color: #008000;"&gt;'title'&lt;/span&gt;, pymongo.TEXT),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; (&lt;span style="color: #008000;"&gt;'keyword'&lt;/span&gt;, pymongo.TEXT)], sparse=&lt;span style="color: #D0372D;"&gt;True&lt;/span&gt;)

&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; i, result &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;enumerate&lt;/span&gt;(entries.find({&lt;span style="color: #008000;"&gt;"$text"&lt;/span&gt; : {&lt;span style="color: #008000;"&gt;"$search"&lt;/span&gt;: &lt;span style="color: #008000;"&gt;"kitchin"&lt;/span&gt;, &lt;span style="color: #008000;"&gt;"$search"&lt;/span&gt;: &lt;span style="color: #008000;"&gt;"boes"&lt;/span&gt;}})):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'{i: 2d}. {author}, {title}, {journal}, {year}.'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(i=i, **result).replace(&lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt;, &lt;span style="color: #008000;"&gt;""&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;G. Gumuslu and P. Kondratyuk and J. R. Boes and B. Morrealeand J. B. Miller and J. R. Kitchin and A. J. Gellman, Correlation of Electronic Structure With Catalytic Activity:\ce{H2}-\ce{D2} Exchange Across \ce{Cu&lt;sub&gt;x&lt;/sub&gt;Pd&lt;sub&gt;1-x&lt;/sub&gt;}Composition Space, ACS Catalysis, 2015.&lt;/li&gt;
&lt;li&gt;Jacob R. Boes and Peter Kondratyuk and Chunrong Yin and JamesB. Miller and Andrew J. Gellman and John R. Kitchin, Core Level Shifts in {Cu-Pd} Alloys As a Function of BulkComposition and Structure, Surface Science, 2015.&lt;/li&gt;
&lt;li&gt;Jacob R. Boes and Gamze Gumuslu and James B. Miller and AndrewJ. Gellman and John R. Kitchin, Estimating Bulk-Composition-Dependent \ce{H2} AdsorptionEnergies on \ce{Cu&lt;sub&gt;x&lt;/sub&gt;Pd&lt;sub&gt;1-x&lt;/sub&gt;} Alloy (111) Surfaces, ACS Catalysis, 2015.&lt;/li&gt;
&lt;li&gt;Jacob R. Boes and John R. Kitchin, Neural Network Predictions of Oxygen Interactions on a Dynamic Pd Surface, Molecular Simulation, Accepted 12/2016.&lt;/li&gt;
&lt;li&gt;Jacob R. Boes and John R. Kitchin, Modeling Segregation on {AuPd}(111) Surfaces With DensityFunctional Theory and Monte Carlo Simulations, Submitted to J. Phys. Chem. C, 2016.&lt;/li&gt;
&lt;li&gt;Jacob R. Boes and Gamze Gumuslu and James B. Miller and AndrewJ. Gellman and John R. Kitchin, Supporting Information: Estimating Bulk-Composition-Dependent\ce{H2} Adsorption Energies on \ce{Cu&lt;sub&gt;x&lt;/sub&gt;Pd&lt;sub&gt;1-x&lt;/sub&gt;} Alloy (111)Surfaces, ACS Catalysis, 2015.&lt;/li&gt;
&lt;li&gt;John D. Michael and Ethan L. Demeter and Steven M. Illes andQingqi Fan and Jacob R. Boes and John R. Kitchin, Alkaline Electrolyte and {Fe} Impurity Effects on thePerformance and Active-Phase Structure of {NiOOH} Thin Filmsfor {OER} Catalysis Applications, J. Phys. Chem. C, 2015.&lt;/li&gt;
&lt;li&gt;Jacob R. Boes and Mitchell C. Groenenboom and John A. Keithand John R. Kitchin, Neural Network and {Reaxff} Comparison for {Au} Properties, Int. J. Quantum Chem., 2016.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
We can use this to search for documents with orgmode in a keyword or title too.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pymongo
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; pymongo &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; MongoClient
&lt;span style="color: #BA36A5;"&gt;client&lt;/span&gt; = MongoClient(&lt;span style="color: #008000;"&gt;'localhost'&lt;/span&gt;, 27017)

&lt;span style="color: #BA36A5;"&gt;db&lt;/span&gt; = client[&lt;span style="color: #008000;"&gt;'bibtex'&lt;/span&gt;]
&lt;span style="color: #BA36A5;"&gt;entries&lt;/span&gt; = db[&lt;span style="color: #008000;"&gt;'entries'&lt;/span&gt;]

entries.create_index([(&lt;span style="color: #008000;"&gt;'author'&lt;/span&gt;, pymongo.TEXT),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; (&lt;span style="color: #008000;"&gt;'title'&lt;/span&gt;, pymongo.TEXT),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; (&lt;span style="color: #008000;"&gt;'keyword'&lt;/span&gt;, pymongo.TEXT)], sparse=&lt;span style="color: #D0372D;"&gt;True&lt;/span&gt;)

&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; i, result &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;enumerate&lt;/span&gt;(entries.find({&lt;span style="color: #008000;"&gt;"$text"&lt;/span&gt; : {&lt;span style="color: #008000;"&gt;"$search"&lt;/span&gt;: &lt;span style="color: #008000;"&gt;"orgmode"&lt;/span&gt;}})):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'{i: 2d}. {author}, {title}, {journal}, {year}.'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(i=i, **result).replace(&lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt;, &lt;span style="color: #008000;"&gt;""&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;John R. Kitchin, Data Sharing in Surface Science, Surface Science, 2016.&lt;/li&gt;
&lt;li&gt;Zhongnan Xu and John R. Kitchin, Probing the Coverage Dependence of Site and AdsorbateConfigurational Correlations on (111) Surfaces of LateTransition Metals, J. Phys. Chem. C, 2014.&lt;/li&gt;
&lt;li&gt;Xu, Zhongnan and Rossmeisl, Jan and Kitchin, John R., A Linear Response {DFT}+{U} Study of Trends in the OxygenEvolution Activity of Transition Metal Rutile Dioxides, The Journal of Physical Chemistry C, 2015.&lt;/li&gt;
&lt;li&gt;Prateek Mehta and Paul A. Salvador and John R. Kitchin, Identifying Potential \ce{BO2} Oxide Polymorphs for EpitaxialGrowth Candidates, ACS Appl. Mater. Interfaces, 2015.&lt;/li&gt;
&lt;li&gt;Xu, Zhongnan and Joshi, Yogesh V. and Raman, Sumathy andKitchin, John R., Accurate Electronic and Chemical Properties of 3d TransitionMetal Oxides Using a Calculated Linear Response {U} and a {DFT+ U(V)} Method, The Journal of Chemical Physics, 2015.&lt;/li&gt;
&lt;li&gt;Zhongnan Xu and John R. Kitchin, Relationships Between the Surface Electronic and ChemicalProperties of Doped 4d and 5d Late Transition Metal Dioxides, The Journal of Chemical Physics, 2015.&lt;/li&gt;
&lt;li&gt;Zhongnan Xu and John R Kitchin, Tuning Oxide Activity Through Modification of the Crystal andElectronic Structure: From Strain To Potential Polymorphs, Phys. Chem. Chem. Phys., 2015.&lt;/li&gt;
&lt;li&gt;Jacob R. Boes and Gamze Gumuslu and James B. Miller and AndrewJ. Gellman and John R. Kitchin, Supporting Information: Estimating Bulk-Composition-Dependent\ce{H2} Adsorption Energies on \ce{Cu&lt;sub&gt;x&lt;/sub&gt;Pd&lt;sub&gt;1-x&lt;/sub&gt;} Alloy (111)Surfaces, ACS Catalysis, 2015.&lt;/li&gt;
&lt;li&gt;Kitchin, John R., Examples of Effective Data Sharing in Scientific Publishing, ACS Catalysis, 2015.&lt;/li&gt;
&lt;li&gt;Curnan, Matthew T. and Kitchin, John R., Effects of Concentration, Crystal Structure, Magnetism, andElectronic Structure Method on First-Principles Oxygen VacancyFormation Energy Trends in Perovskites, The Journal of Physical Chemistry C, 2014.&lt;/li&gt;
&lt;li&gt;Kitchin, John R. and Van Gulick, Ana E. and Zilinski, Lisa D., Automating Data Sharing Through Authoring Tools, International Journal on Digital Libraries, 2016.&lt;/li&gt;
&lt;li&gt;Jacob R. Boes and Gamze Gumuslu and James B. Miller and AndrewJ. Gellman and John R. Kitchin, Estimating Bulk-Composition-Dependent \ce{H2} AdsorptionEnergies on \ce{Cu&lt;sub&gt;x&lt;/sub&gt;Pd&lt;sub&gt;1-x&lt;/sub&gt;} Alloy (111) Surfaces, ACS Catalysis, 2015.&lt;/li&gt;
&lt;li&gt;Zhongnan Xu and John R. Kitchin, Relating the Electronic Structure and Reactivity of the 3dTransition Metal Monoxide Surfaces, Catalysis Communications, 2014.&lt;/li&gt;
&lt;li&gt;Spencer D. Miller and Vladimir V. Pushkarev and AndrewJ. Gellman and John R. Kitchin, Simulating Temperature Programmed Desorption of Oxygen on{P}t(111) Using {DFT} Derived Coverage Dependent DesorptionBarriers, Topics in Catalysis, 2014.&lt;/li&gt;
&lt;li&gt;Hallenbeck, Alexander P. and Kitchin, John R., Effects of \ce{O_2} and \ce{SO_2} on the Capture Capacity of aPrimary-Amine Based Polymeric \ce{CO_2} Sorbent, Industrial \&amp;amp; Engineering Chemistry Research, 2013.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6dcd73e" class="outline-2"&gt;
&lt;h2 id="org6dcd73e"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Querying from emacs-lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
It is hard to get too excited about this if it is not easy to query from emacs and get data in a form we can use in emacs ;) The json library allows us to convert lisp data structures to json pretty easily. For example:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;json&lt;/span&gt;)

(json-encode '((ENTRYTYPE . article)
               (author . (($regex . kitchin)
                          ($options . i)))
               (author . (($regex . boes)
                          ($options . i)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
{"ENTRYTYPE":"article","author":{"$regex":"kitchin","$options":"i"},"author":{"$regex":"boes","$options":"i"}}
&lt;/pre&gt;

&lt;p&gt;
So, we can use an a-list syntax to build up the query. Then we can send it to mongo using mongoexport that will return a json string that we can read back into emacs to get lisp data. Here is an example that returns a query. We print the first element here.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(pp
 (aref (json-read-from-string
        (shell-command-to-string
         (format &lt;span style="color: #008000;"&gt;"mongoexport --quiet --jsonArray -d bibtex -c entries -q '%s'"&lt;/span&gt;
                 (json-encode '((ENTRYTYPE . article)
                                (author . (($regex . kitchin)
                                           ($options . i)))
                                (author . (($regex . boes)
                                           ($options . i))))))))
       0))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
((_id
  ($oid . "5878d9644c114f59fe86cb36"))
 (author . "Jacob R. Boes and Peter Kondratyuk and Chunrong Yin and James\nB. Miller and Andrew J. Gellman and John R. Kitchin")
 (year . "2015")
 (title . "Core Level Shifts in {Cu-Pd} Alloys As a Function of Bulk\nComposition and Structure")
 (ENTRYTYPE . "article")
 (ID . "boes-2015-core-cu")
 (keyword . "DESC0004031, early-career")
 (volume . "640")
 (doi . "10.1016/j.susc.2015.02.011")
 (link . "http://dx.doi.org/10.1016/j.susc.2015.02.011")
 (issn . "0039-6028")
 (journal . "Surface Science")
 (pages . "127-132"))
&lt;/pre&gt;

&lt;p&gt;
That is pretty sweet, we get a lisp data structure we can use. We can wrap that into a reasonable looking function here:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-find&lt;/span&gt; (db collection query)
  (json-read-from-string
   (shell-command-to-string
    (format &lt;span style="color: #008000;"&gt;"mongoexport --quiet --jsonArray -d %s -c %s -q '%s'"&lt;/span&gt;
            db collection (json-encode query)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
mongo-find
&lt;/pre&gt;

&lt;p&gt;
Now we can use the function to query the database, and then format the results. Here we look at the example of articles with authors that match "kitchin" and "boes".
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for counter from 1 for entry across
      (mongo-find &lt;span style="color: #008000;"&gt;"bibtex"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"entries"&lt;/span&gt; '((ENTRYTYPE . article)
                                       (author . (($regex . kitchin)
                                                  ($options . i)))
                                       (author . (($regex . boes)
                                                  ($options . i)))))
      do
      (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; entry (append `(,(cons &lt;span style="color: #008000;"&gt;"counter"&lt;/span&gt; counter)) entry))
      &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;make sure we have a doi field.&lt;/span&gt;
      (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (assoc 'doi entry)
          (&lt;span style="color: #0000FF;"&gt;push&lt;/span&gt; (cons &lt;span style="color: #008000;"&gt;"doi"&lt;/span&gt; (format &lt;span style="color: #008000;"&gt;"http://dx.doi.org/%s"&lt;/span&gt; (cdr (assoc 'doi entry)))) entry)
        (&lt;span style="color: #0000FF;"&gt;push&lt;/span&gt; (cons &lt;span style="color: #008000;"&gt;"doi"&lt;/span&gt; &lt;span style="color: #008000;"&gt;""&lt;/span&gt;) entry))
      concat
      (concat (replace-regexp-in-string
               &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt; &lt;span style="color: #008000;"&gt;" "&lt;/span&gt;
               (s-format &lt;span style="color: #008000;"&gt;"${counter}. ${author}, ${title} (${year}). ${doi}"&lt;/span&gt;
                         'aget entry)) &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
1. Jacob R. Boes and Peter Kondratyuk and Chunrong Yin and James B. Miller and Andrew J. Gellman and John R. Kitchin, Core Level Shifts in {Cu-Pd} Alloys As a Function of Bulk Composition and Structure (2015). http://dx.doi.org/10.1016/j.susc.2015.02.011
2. Jacob R. Boes and Gamze Gumuslu and James B. Miller and Andrew J. Gellman and John R. Kitchin, Estimating Bulk-Composition-Dependent \ce{H2} Adsorption Energies on \ce{Cu_{x}Pd_{1-x}} Alloy (111) Surfaces (2015). http://dx.doi.org/10.1021/cs501585k
3. Jacob R. Boes and Gamze Gumuslu and James B. Miller and Andrew J. Gellman and John R. Kitchin, Supporting Information: Estimating Bulk-Composition-Dependent \ce{H2} Adsorption Energies on \ce{Cu_{x}Pd_{1-x}} Alloy (111) Surfaces (2015). http://dx.doi.org/10.1021/cs501585k
4. G. Gumuslu and P. Kondratyuk and J. R. Boes and B. Morreale and J. B. Miller and J. R. Kitchin and A. J. Gellman, Correlation of Electronic Structure With Catalytic Activity: \ce{H2}-\ce{D2} Exchange Across \ce{Cu_{x}Pd_{1-x}} Composition Space (2015). http://dx.doi.org/10.1021/cs501586t
5. John D. Michael and Ethan L. Demeter and Steven M. Illes and Qingqi Fan and Jacob R. Boes and John R. Kitchin, Alkaline Electrolyte and {Fe} Impurity Effects on the Performance and Active-Phase Structure of {NiOOH} Thin Films for {OER} Catalysis Applications (2015). http://dx.doi.org/10.1021/acs.jpcc.5b02458
6. Jacob R. Boes and Mitchell C. Groenenboom and John A. Keith and John R. Kitchin, Neural Network and {Reaxff} Comparison for {Au} Properties (2016). http://dx.doi.org/10.1002/qua.25115
7. Jacob R. Boes and John R. Kitchin, Neural Network Predictions of Oxygen Interactions on a Dynamic Pd Surface (Accepted 12/2016). http://dx.doi.org/10.1080/08927022.2016.1274984
8. Jacob R. Boes and John R. Kitchin, Modeling Segregation on {AuPd}(111) Surfaces With Density Functional Theory and Monte Carlo Simulations (2016). 
&lt;/pre&gt;

&lt;p&gt;
Wow, that looks like a pretty lispy way to query the database and use the results. It is probably pretty easy to do similar things for inserting and updating documents. I will save that for another day.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6d7544a" class="outline-2"&gt;
&lt;h2 id="org6d7544a"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Summary thoughts&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
This is not an exhaustive study of Mongo for a bibtex database. It does illustrate that it is potentially useful. Imagine a group of users can enter bibtex entries, and then share them through a central server. Or you query the server for entries and then select them using helm/ivy. That is probably faster than parsing large bibtex files (note, in org-ref I already cache the files in parsed form for performance reasons!).
&lt;/p&gt;

&lt;p&gt;
It would make sense to split the authors, and keywords in another version of this database. It also could make sense to have a field that is the bibtex string, and to do text search on that string. That way you get everything in the entry for searching, and an easy way to generate bibtex files without having to reconstruct them.
&lt;/p&gt;

&lt;p&gt;
It is especially interesting to run the queries through emacs-lisp since we get the benefit of editing lisp code while writing the query, e.g. parenthesis navigation, less quoting, etc&amp;#x2026; and we get back lisp data that can be used to construct helm/ivy queries, or other emacs things. That makes this look competitive with emacsql at least for the syntax. I predict that there will be more posts on this in the future.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/15/Querying-a-MongoDB-bibtex-database-with-Python-and-emacs-lisp.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[New and improved asynchronous org-babel python blocks]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/11/09/New-and-improved-asynchronous-org-babel-python-blocks" />
    <id>http://jkitchin.github.io/blog/2016/11/09/New-and-improved-asynchronous-org-babel-python-blocks</id>
    <updated>2016-11-09T11:00:01Z</updated>
    <published>2016-11-09T11:00:01Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[New and improved asynchronous org-babel python blocks]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/11/09/New-and-improved-asynchronous-org-babel-python-blocks"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgb1ee49d"&gt;1. autopep8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgcca807a"&gt;2. pylint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
About a year ago I posted some code to run org-babel python blocks &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2015/11/20/Asynchronously-running-python-blocks-in-org-mode/"&gt;asynchronously&lt;/a&gt;. This year, my students asked for some enhancements related to debugging. Basically, they were frustrated by a few things when they got errors. First, they found it difficult to find the line number in the Traceback in the src block because there are no line numbers in the block, and it is annoying to do a special edit just for line numbers.  
&lt;/p&gt;

&lt;p&gt;
I thought about this, and figured out how to significantly improve the situation. The async python code in scimax now has the following features:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;When you get a Traceback, it goes in the results, and each file listed in it is hyperlinked to the source file and line so it is easy to get to them.&lt;/li&gt;
&lt;li&gt;The cursor jumps to the last line in the code block that is listed in the Traceback, and a beacon shines to show you the line&lt;/li&gt;
&lt;li&gt;You can turn on temporary line numbers in the code block to see where the lines are in the block, and these disappear when you start typing. This is done in the variable `org-babel-async-python-show-line-numbers'.&lt;/li&gt;
&lt;li&gt;You can control whether a buffer of the results shows or not via the variable `org-babel-async-python-show-results'.&lt;/li&gt;
&lt;li&gt;When you run the block, you get a clickable link in the RESULTS section to kill the process.&lt;/li&gt;
&lt;li&gt;You may also find the `autopep8' and `pylint' functions helpful.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The code for this is currently found here:
&lt;a href="https://github.com/jkitchin/scimax/blob/org-9/scimax-org-babel-python.el"&gt;https://github.com/jkitchin/scimax/blob/org-9/scimax-org-babel-python.el&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Eventually, I will merge this into master, after I am sure about all the changes needed for org 9.0. That is not likely to happen until the semester ends, so I do not mess up my students who use scimax in class. So, sometime mid-December it will make into master.
&lt;/p&gt;

&lt;p&gt;
To make async the default way to run a python block use this code, so that you can use C-c C-c to run them:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;scimax-org-babel-python&lt;/span&gt;)
(add-to-list 'org-ctrl-c-ctrl-c-hook 'org-babel-async-execute:python)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
As with the past few posts, this video will make it much more clear what the post is about: 
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/m4vCXM7_p_o" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
Here is a prototypical example that shows how it works. While it runs you can view the progress if you click on the link to show the results.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; time

&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; i &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;range&lt;/span&gt;(5):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(i)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   time.sleep(2)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
0
1
2
3
4
Traceback (most recent call last):
  File "Org SRC", line 5, in &amp;lt;module&amp;gt;
    time.sleep(2)
KeyboardInterrupt
&lt;/p&gt;




&lt;p&gt;
This block has a pretty obvious issue when we run it. The cursor jumps right to the problem!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'This line is ok'&lt;/span&gt;)
&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;5 / 0&lt;/span&gt;
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'We will not see this'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This line is ok
We will not see this
&lt;/p&gt;



&lt;p&gt;
This block shows we can access any of the links in the Traceback. Here we have an error in calling a function that is raised in an external file.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; scipy.integrate &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; odeint

&lt;span style="color: #BA36A5;"&gt;Vspan&lt;/span&gt; = np.linspace(0, 2) &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;L&lt;/span&gt;

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;dF/dV = F&lt;/span&gt;
&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;dFdV&lt;/span&gt;(F, V, v0):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; F


&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(odeint(dFdV, 1.0, Vspan))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Traceback (most recent call last):
  File "Org SRC", line 11, in &amp;lt;module&amp;gt;
    print(odeint(dFdV, 1.0, Vspan))
  File "/Users/jkitchin/anaconda3/lib/python3.5/site-packages/scipy/integrate/odepack.py", line 215, in odeint
    ixpr, mxstep, mxhnil, mxordn, mxords)
TypeError: dFdV() missing 1 required positional argument: 'v0'
&lt;/p&gt;


&lt;p&gt;
Here we show how nice it is to be able to kill a process. This block will not end on its own.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;while&lt;/span&gt; &lt;span style="color: #D0372D;"&gt;True&lt;/span&gt;:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;pass&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Traceback (most recent call last):
  File "Org SRC", line 2, in &amp;lt;module&amp;gt;
    pass
KeyboardInterrupt
&lt;/p&gt;

&lt;div id="outline-container-orgb1ee49d" class="outline-2"&gt;
&lt;h2 id="orgb1ee49d"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; autopep8&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
&lt;a href="https://pypi.python.org/pypi/autopep8"&gt;autopep8&lt;/a&gt; is a tool for reformatting Python code. We wrapped this into an Emacs command so you can quickly reformat a Python code block. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #BA36A5;"&gt;a&lt;/span&gt; = 4
&lt;span style="color: #BA36A5;"&gt;b&lt;/span&gt; = 5
&lt;span style="color: #BA36A5;"&gt;c&lt;/span&gt; = a * b  &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;comment&lt;/span&gt;
&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;another comment&lt;/span&gt;


&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;f&lt;/span&gt;(x):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; x
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(f(5))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcca807a" class="outline-2"&gt;
&lt;h2 id="orgcca807a"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; pylint&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
&lt;a href="https://www.pylint.org"&gt;pylint&lt;/a&gt; is a great tool for checking your Python code for errors, style and conventions. We also wrapped this into an Emacs command so you can run it on a Python src block. The report that is generated had clickable links to help you get right to the lines in your code block with problems.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;a&lt;/span&gt; = np.array(5, 5)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;f&lt;/span&gt;(x): &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; x

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(f(6))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2016 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2016/11/09/New-and-improved-asynchronous-org-babel-python-blocks.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Writing lisp code from Python]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/05/30/Writing-lisp-code-from-Python" />
    <id>http://jkitchin.github.io/blog/2016/05/30/Writing-lisp-code-from-Python</id>
    <updated>2016-05-30T12:38:20Z</updated>
    <published>2016-05-30T09:26:05Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="lisp" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Writing lisp code from Python]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/05/30/Writing-lisp-code-from-Python"><![CDATA[



&lt;p&gt;
Some time ago I &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2015/05/16/Python-data-structures-to-lisp/"&gt;wrote about converting python data structures to lisp&lt;/a&gt; . I have expanded on that idea to writing lisp programs from Python! The newly expanded code that makes this possible can be found at &lt;a href="https://github.com/jkitchin/pycse/blob/master/pycse/lisp.py"&gt;https://github.com/jkitchin/pycse/blob/master/pycse/lisp.py&lt;/a&gt; .
&lt;/p&gt;

&lt;p&gt;
Here are the simple data types known to pycse.lisp:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pycse.lisp
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;"a string"&lt;/span&gt;.lisp)
&lt;span style="color: #BA36A5;"&gt;a&lt;/span&gt; = 5
&lt;span style="color: #BA36A5;"&gt;b&lt;/span&gt; = 5.0
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(a.lisp)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(b.lisp)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;([1, 2, 3].lisp)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;((1, 2, 3).lisp)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;({&lt;span style="color: #008000;"&gt;'a'&lt;/span&gt;: 4}.lisp)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(np.array([1, 2, 3]).lisp)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(np.array([1.0, 2.0, 3.0]).lisp)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
"a string"
5
5.0
(1 2 3)
(1 2 3)
(:a 4)
(1 2 3)
(1.0 2.0 3.0)
&lt;/pre&gt;

&lt;p&gt;
There are also some more complex types.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pycse.lisp &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; pl

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(pl.Symbol(&lt;span style="color: #008000;"&gt;'lambda'&lt;/span&gt;))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(pl.Quote(&lt;span style="color: #008000;"&gt;'lambda'&lt;/span&gt;))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(pl.SharpQuote(&lt;span style="color: #008000;"&gt;'lambda'&lt;/span&gt;))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(pl.Cons(&lt;span style="color: #008000;"&gt;"a"&lt;/span&gt;, 5))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(pl.Alist([&lt;span style="color: #008000;"&gt;"a"&lt;/span&gt;, 2, &lt;span style="color: #008000;"&gt;"b"&lt;/span&gt;, 5]))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(pl.Vector([1, 2, 3]))

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(pl.Backquote([]))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(pl.Comma([1, 2, 3]))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(pl.Splice([1, 2, 3]))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
lambda
'lambda
#'lambda
("a" . 5)
(("a" . 2) ("b" . 5))
[1 2 3]
`()
,(1 2 3)
,@(1 2 3)
&lt;/pre&gt;

&lt;p&gt;
You can nest these too.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pycse.lisp &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; pl
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(pl.Quote(pl.Alist([&lt;span style="color: #008000;"&gt;"a"&lt;/span&gt;, 2, &lt;span style="color: #008000;"&gt;"b"&lt;/span&gt;, 5])))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(pl.Backquote([pl.Symbol(&lt;span style="color: #008000;"&gt;'+'&lt;/span&gt;), pl.Comma(pl.Symbol(&lt;span style="color: #008000;"&gt;'b'&lt;/span&gt;)), 5]))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
'(("a" . 2) ("b" . 5))
`(+ ,b 5)
&lt;/pre&gt;

&lt;p&gt;
All that means we can use Python &lt;i&gt;code&lt;/i&gt; to generate lisp programs. Here is an example where we make two sub-programs, and combine them into an overall program, then add one more subprogram to it. We wrap the results in an emacs-lisp block, then actually run the block!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pycse.lisp &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; pl

&lt;span style="color: #BA36A5;"&gt;p1&lt;/span&gt; = [pl.Symbol(&lt;span style="color: #008000;"&gt;'mapcar'&lt;/span&gt;),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; [pl.Symbol(&lt;span style="color: #008000;"&gt;'lambda'&lt;/span&gt;),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  [pl.Symbol(&lt;span style="color: #008000;"&gt;'x'&lt;/span&gt;)],
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  [pl.Symbol(&lt;span style="color: #008000;"&gt;'*'&lt;/span&gt;),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   pl.Symbol(&lt;span style="color: #008000;"&gt;'x'&lt;/span&gt;),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   pl.Symbol(&lt;span style="color: #008000;"&gt;'x'&lt;/span&gt;)]],
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; pl.Quote([1, 2, 3, 4])]

&lt;span style="color: #BA36A5;"&gt;p2&lt;/span&gt; = [pl.Symbol(&lt;span style="color: #008000;"&gt;'princ'&lt;/span&gt;), &lt;span style="color: #008000;"&gt;"Hello world"&lt;/span&gt;]

&lt;span style="color: #BA36A5;"&gt;p&lt;/span&gt; = [pl.Symbol(&lt;span style="color: #008000;"&gt;'list'&lt;/span&gt;), p1, p2]
p.append([pl.Symbol(&lt;span style="color: #008000;"&gt;'+'&lt;/span&gt;), 5, 5])

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(p.lisp)
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(list (mapcar (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (x) (* x x)) '(1 2 3 4)) (princ &lt;span style="color: #008000;"&gt;"Hello world"&lt;/span&gt;) (+ 5 5))
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;(1 4 9 16)&lt;/td&gt;
&lt;td class="left"&gt;Hello world&lt;/td&gt;
&lt;td class="right"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Wow, it worked! Here is another example of setting up a macro and then running it.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pycse.lisp &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; pl
&lt;span style="color: #BA36A5;"&gt;s&lt;/span&gt; = pl.Symbol
&lt;span style="color: #BA36A5;"&gt;bq&lt;/span&gt; = pl.Backquote
&lt;span style="color: #BA36A5;"&gt;c&lt;/span&gt; = pl.Comma

&lt;span style="color: #BA36A5;"&gt;p1&lt;/span&gt; = [s(&lt;span style="color: #008000;"&gt;'defmacro'&lt;/span&gt;), s(&lt;span style="color: #008000;"&gt;'f'&lt;/span&gt;), [s(&lt;span style="color: #008000;"&gt;'x'&lt;/span&gt;)],
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #008000;"&gt;"A docstring"&lt;/span&gt;,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; bq([s(&lt;span style="color: #008000;"&gt;'*'&lt;/span&gt;), c(s(&lt;span style="color: #008000;"&gt;'x'&lt;/span&gt;)), 5])]


&lt;span style="color: #BA36A5;"&gt;p2&lt;/span&gt; = [s(&lt;span style="color: #008000;"&gt;'f'&lt;/span&gt;), 5]

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(p1.lisp)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(p2.lisp)
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defmacro&lt;/span&gt; &lt;span style="color: #006699;"&gt;f&lt;/span&gt; (x) &lt;span style="color: #036A07;"&gt;"A docstring"&lt;/span&gt; `(* ,x 5))
(&lt;span style="color: #0000FF;"&gt;f&lt;/span&gt; 5)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
25
&lt;/pre&gt;

&lt;p&gt;
I am not too sure where this will be super useful, but it is an interesting proof of concept. I haven't tested this much beyond the original post and this one. Let me know if you find issues with it.&lt;/p&gt;
&lt;p&gt;Copyright (C) 2016 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2016/05/30/Writing-lisp-code-from-Python.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 8.2.10&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Expanding orgmode.py to get better org-python integration]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/05/29/Expanding-orgmode-py-to-get-better-org-python-integration" />
    <id>http://jkitchin.github.io/blog/2016/05/29/Expanding-orgmode-py-to-get-better-org-python-integration</id>
    <updated>2016-05-29T15:51:52Z</updated>
    <published>2016-05-29T14:03:34Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Expanding orgmode.py to get better org-python integration]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/05/29/Expanding-orgmode-py-to-get-better-org-python-integration"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. A Figure from Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. An example table.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. Miscellaneous outputs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
I have only ever been about 80% satisfied with Python/org-mode integration. I have developed a particular workflow that I like a lot, and works well for solving scientific and engineering problems. I typically use stand-alone Python blocks, i.e. not sessions. I tend to use print statements to create output that I want to see, e.g. the value of a calculation. I also tend to create multiple figures in a single block, which I want to display in the buffer. This workflow is represented extensively in &lt;a href="http://kitchingroup.cheme.cmu.edu/pycse/"&gt;PYCSE&lt;/a&gt; and &lt;a href="https://github.com/jkitchin/dft-book"&gt;dft-book&lt;/a&gt; which collectively have 700+ src blocks! So I use it alot ;)
&lt;/p&gt;

&lt;p&gt;
There are some deficiencies though. For one, I have had to hand build any figures/tables that are generated from the code blocks. That means duplicating filenames, adding the captions, etc&amp;#x2026; It is not that easy to update captions from the code blocks, and there has been limited ability to use markup in the output.
&lt;/p&gt;

&lt;p&gt;
Well finally I had some ideas to change this. The ideas are:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Patch matplotlib so that savefig actually returns a figure link that can be printed to the output. savefig works the same otherwise.
&lt;/li&gt;

&lt;li&gt;Patch matplotlib.pyplot.show to save the figure, and print a figure link in thhe output.
&lt;/li&gt;

&lt;li&gt;Create special functions to generate org tables and figures.
&lt;/li&gt;

&lt;li&gt;Create some other functions to generate some blocks and elements.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Then we could just import the library in our Python scripts (or add it as a prologue) and get this nice functionality. You can find the code for this here:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/jkitchin/pycse/blob/master/pycse/orgmode.py"&gt;https://github.com/jkitchin/pycse/blob/master/pycse/orgmode.py&lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;
Finally, it seems like a good idea to specify that we want our results to be an org drawer. This makes the figures/tables export, and allows us to generate math and other markup in our programs. That has the downside of making exported results not be in the "verbatim" markup I am used to, but that may be solvable in other ways. We can make the org drawer output the default like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; org-babel-default-header-args:python
      (cons '(&lt;span style="color: #006FE0;"&gt;:results&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"output org drawer replace"&lt;/span&gt;)
            (assq-delete-all &lt;span style="color: #006FE0;"&gt;:results&lt;/span&gt; org-babel-default-header-args)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
With these, using Python blocks in org-mode gets quite a bit better!
&lt;/p&gt;

&lt;p&gt;
Here is the first example, with savefig. I have the savefig function return the link, so we have to print it. We use this feature later. The figure is automatically inserted to the buffer. Like magic!
&lt;/p&gt;

&lt;p&gt;
Here is a fun figure from &lt;a href="http://matplotlib.org/xkcd/examples/pie_and_polar_charts/polar_scatter_demo.html"&gt;http://matplotlib.org/xkcd/examples/pie_and_polar_charts/polar_scatter_demo.html&lt;/a&gt; 
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pycse.orgmode

&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
plt.xkcd()

&lt;span style="color: #BA36A5;"&gt;N&lt;/span&gt; = 150
&lt;span style="color: #BA36A5;"&gt;r&lt;/span&gt; = 2 * np.random.rand(N)
&lt;span style="color: #BA36A5;"&gt;theta&lt;/span&gt; = 2 * np.pi * np.random.rand(N)
&lt;span style="color: #BA36A5;"&gt;area&lt;/span&gt; = 200 * r**2 * np.random.rand(N)
&lt;span style="color: #BA36A5;"&gt;colors&lt;/span&gt; = theta

&lt;span style="color: #BA36A5;"&gt;ax&lt;/span&gt; = plt.subplot(111, polar=&lt;span style="color: #D0372D;"&gt;True&lt;/span&gt;)
&lt;span style="color: #BA36A5;"&gt;c&lt;/span&gt; = plt.scatter(theta, r, c=colors, s=area, cmap=plt.cm.hsv)
c.set_alpha(0.75)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(plt.savefig(&lt;span style="color: #008000;"&gt;'test.png'&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="/media/2016-05-29-Expanding-orgmode.py-to-get-better-org-python-integration/test.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
How about another example with show. This just prints the link directly. It seems to make sense to do it that way. This is from &lt;a href="http://matplotlib.org/xkcd/examples/showcase/xkcd.html"&gt;http://matplotlib.org/xkcd/examples/showcase/xkcd.html&lt;/a&gt; .
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pycse.orgmode &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; org

&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; matplotlib &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

plt.xkcd()

&lt;span style="color: #BA36A5;"&gt;fig&lt;/span&gt; = plt.figure()
&lt;span style="color: #BA36A5;"&gt;ax&lt;/span&gt; = fig.add_subplot(1, 1, 1)
ax.spines[&lt;span style="color: #008000;"&gt;'right'&lt;/span&gt;].set_color(&lt;span style="color: #008000;"&gt;'none'&lt;/span&gt;)
ax.spines[&lt;span style="color: #008000;"&gt;'top'&lt;/span&gt;].set_color(&lt;span style="color: #008000;"&gt;'none'&lt;/span&gt;)
plt.xticks([])
plt.yticks([])
ax.set_ylim([-30, 10])

&lt;span style="color: #BA36A5;"&gt;data&lt;/span&gt; = np.ones(100)
&lt;span style="color: #BA36A5;"&gt;data&lt;/span&gt;[70:] -= np.arange(30)

plt.annotate(
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #008000;"&gt;'THE DAY I REALIZED\nI COULD COOK BACON\nWHENEVER I WANTED'&lt;/span&gt;,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   xy=(70, 1), arrowprops=&lt;span style="color: #006FE0;"&gt;dict&lt;/span&gt;(arrowstyle=&lt;span style="color: #008000;"&gt;'-&amp;gt;'&lt;/span&gt;), xytext=(15, -10))

plt.plot(data)

plt.xlabel(&lt;span style="color: #008000;"&gt;'time'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'my overall health'&lt;/span&gt;)
plt.show()

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;An intermediate result&lt;/span&gt;
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'Some intermediate result for x - 4 = 6:'&lt;/span&gt;)
&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = 6 + 4
org.fixed_width(&lt;span style="color: #008000;"&gt;'x = {}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(x))

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;And another figure&lt;/span&gt;
&lt;span style="color: #BA36A5;"&gt;fig&lt;/span&gt; = plt.figure()
&lt;span style="color: #BA36A5;"&gt;ax&lt;/span&gt; = fig.add_subplot(1, 1, 1)
ax.bar([-0.125, 1.0-0.125], [0, 100], 0.25)
ax.spines[&lt;span style="color: #008000;"&gt;'right'&lt;/span&gt;].set_color(&lt;span style="color: #008000;"&gt;'none'&lt;/span&gt;)
ax.spines[&lt;span style="color: #008000;"&gt;'top'&lt;/span&gt;].set_color(&lt;span style="color: #008000;"&gt;'none'&lt;/span&gt;)
ax.xaxis.set_ticks_position(&lt;span style="color: #008000;"&gt;'bottom'&lt;/span&gt;)
ax.set_xticks([0, 1])
ax.set_xlim([-0.5, 1.5])
ax.set_ylim([0, 110])
ax.set_xticklabels([&lt;span style="color: #008000;"&gt;'CONFIRMED BY\nEXPERIMENT'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'REFUTED BY\nEXPERIMENT'&lt;/span&gt;])
plt.yticks([])

plt.title(&lt;span style="color: #008000;"&gt;"CLAIMS OF SUPERNATURAL POWERS"&lt;/span&gt;)

plt.show()
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/2016-05-29-Expanding-orgmode.py-to-get-better-org-python-integration/56bc77cfebd90f8a1cb22421c1c4f2c4a05fedeb.png"&gt; 
Some intermediate result for x - 4 = 6:
&lt;/p&gt;
&lt;pre class="example"&gt;
x = 10
&lt;/pre&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="/media/2016-05-29-Expanding-orgmode.py-to-get-better-org-python-integration/2daee706d3b906a25914a6ca975906047af7fa35.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
See, the figures show where they belong, with intermediate results that have some formatting, and they export correctly. Nice.
&lt;/p&gt;


&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; A Figure from Python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
It has been a long desire of mine to generate full figures with captions from code blocks, and to get them where I want like this one:
&lt;/p&gt;


&lt;div id="fig:1" class="figure"&gt;
&lt;p&gt;&lt;img src="/media/2016-05-29-Expanding-orgmode.py-to-get-better-org-python-integration/smarts.png"&gt; 
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 3:&lt;/span&gt; An italicized &lt;i&gt;histogram&lt;/i&gt; of 10000 points&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Here is the code to generate the full figure. Note we use the output of savefig as the filename. That lets us save some intermediate variable construction. That seems nice.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python" id="fig-1"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pycse.orgmode &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; org
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
plt.xkcd()

&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.mlab &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; mlab
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;example data&lt;/span&gt;
&lt;span style="color: #BA36A5;"&gt;mu&lt;/span&gt; = 100 &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;mean of distribution&lt;/span&gt;
&lt;span style="color: #BA36A5;"&gt;sigma&lt;/span&gt; = 15 &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;standard deviation of distribution&lt;/span&gt;
&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = mu + sigma * np.random.randn(10000)

&lt;span style="color: #BA36A5;"&gt;num_bins&lt;/span&gt; = 50
&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;the histogram of the data&lt;/span&gt;
&lt;span style="color: #BA36A5;"&gt;n&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;bins&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;patches&lt;/span&gt; = plt.hist(x, num_bins, normed=1, facecolor=&lt;span style="color: #008000;"&gt;'green'&lt;/span&gt;, alpha=0.5)
&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;add a 'best fit' line&lt;/span&gt;
&lt;span style="color: #BA36A5;"&gt;y&lt;/span&gt; = mlab.normpdf(bins, mu, sigma)
plt.plot(bins, y, &lt;span style="color: #008000;"&gt;'r--'&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #008000;"&gt;'Smarts'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'Probability'&lt;/span&gt;)
plt.title(r&lt;span style="color: #008000;"&gt;'Histogram of IQ: $\mu=100$, $\sigma=15$'&lt;/span&gt;)

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Tweak spacing to prevent clipping of ylabel&lt;/span&gt;
plt.subplots_adjust(left=0.15)

org.figure(plt.savefig(&lt;span style="color: #008000;"&gt;'smarts.png'&lt;/span&gt;),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  label=&lt;span style="color: #008000;"&gt;'fig:1'&lt;/span&gt;,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  caption=&lt;span style="color: #008000;"&gt;'An italicized /histogram/ of {} points'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;len&lt;/span&gt;(x)),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  attributes=[(&lt;span style="color: #008000;"&gt;'LATEX'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;':width 3in'&lt;/span&gt;),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  (&lt;span style="color: #008000;"&gt;'HTML'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;':width 300'&lt;/span&gt;),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  (&lt;span style="color: #008000;"&gt;'ORG'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;':width 300'&lt;/span&gt;)])
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
That is pretty awesome. You cannot put figures in more than one place like this, and you might not want to mix results with this, but it is still pretty awesome!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; An example table.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Finally, I have wanted the same thing for tables. Here is the resulting table.
&lt;/p&gt;

&lt;table id="table-1" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;
&lt;caption class="t-above"&gt;&lt;span class="table-number"&gt;Table 1:&lt;/span&gt; Dependence of the energy on the encut value.&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class="right" /&gt;

&lt;col  class="right" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="right"&gt;ENCUT&lt;/th&gt;
&lt;th scope="col" class="right"&gt;Energy (eV)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="right"&gt;100&lt;/td&gt;
&lt;td class="right"&gt;11.233&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;200&lt;/td&gt;
&lt;td class="right"&gt;21.233&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;300&lt;/td&gt;
&lt;td class="right"&gt;31.233&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;400&lt;/td&gt;
&lt;td class="right"&gt;41.233&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;500&lt;/td&gt;
&lt;td class="right"&gt;51.233&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here is the code block that generated it.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python" id="table-1"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pycse.orgmode &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; org

&lt;span style="color: #BA36A5;"&gt;data&lt;/span&gt; = [[&lt;span style="color: #008000;"&gt;'&amp;lt;5&amp;gt;'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'&amp;lt;11&amp;gt;'&lt;/span&gt;],  &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Column aligners&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   [&lt;span style="color: #008000;"&gt;'ENCUT'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'Energy (eV)'&lt;/span&gt;],
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #D0372D;"&gt;None&lt;/span&gt;]

&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; encut &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; [100, 200, 300, 400, 500]:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;data&lt;/span&gt; += [[encut, 1.233 + 0.1 * encut]]

org.table(data,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; name=&lt;span style="color: #008000;"&gt;'table-1'&lt;/span&gt;,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; caption=&lt;span style="color: #008000;"&gt;'Dependence of the energy on the encut value.'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
The only obvious improvement on this is similar to getting images to redisplay after running a code block, it might be nice to reformat tables to make sure they are pretty looking. Otherwise this is good.
&lt;/p&gt;


&lt;p&gt;
Let's go ahead and try that. Here we narrow down to the results, and align the tables in that region.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;org-align-visible-tables&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Align all the tables in the results."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((location (org-babel-where-is-src-block-result)) start)
    (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; location
      (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; start (- location 1))
      (&lt;span style="color: #0000FF;"&gt;save-restriction&lt;/span&gt;
        (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt;
          (goto-char location) (forward-line 1)
          (narrow-to-region start (org-babel-result-end))
          (goto-char (point-min))
          (&lt;span style="color: #0000FF;"&gt;while&lt;/span&gt; (re-search-forward org-table-any-line-regexp nil t)
            (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt; (org-table-align))
            (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; (looking-at org-table-line-regexp)
                (forward-char 1)))
          (re-search-forward org-table-any-border-regexp nil 1))))))

(add-hook 'org-babel-after-execute-hook
          (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; () (org-align-visible-tables)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;lambda&lt;/td&gt;
&lt;td class="left"&gt;nil&lt;/td&gt;
&lt;td class="left"&gt;(org-align-visible-tables)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;lambda&lt;/td&gt;
&lt;td class="left"&gt;nil&lt;/td&gt;
&lt;td class="left"&gt;(org-refresh-images)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
And that seems to solve that problem now too!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Miscellaneous outputs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Here are some examples of getting org-output from the pycse.orgmode module.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pycse.orgmode &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; org

org.verbatim(&lt;span style="color: #008000;"&gt;'One liner verbatim'&lt;/span&gt;)

org.verbatim(&lt;span style="color: #008000;"&gt;'''multiline&lt;/span&gt;
&lt;span style="color: #008000;"&gt;output&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #008000;"&gt;  with indentation&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #008000;"&gt;   &lt;/span&gt;&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #008000;"&gt;  at a few levels&lt;/span&gt;
&lt;span style="color: #008000;"&gt;that is verbatim.'''&lt;/span&gt;)

org.fixed_width(&lt;span style="color: #008000;"&gt;'your basic result'&lt;/span&gt;)

org.fixed_width(&lt;span style="color: #008000;"&gt;'''your&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #008000;"&gt; basic&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #008000;"&gt;   result&lt;/span&gt;
&lt;span style="color: #008000;"&gt;on a few lines.'''&lt;/span&gt;)

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;A latex block&lt;/span&gt;
org.latex(&lt;span style="color: #008000;"&gt;'\(e^{i\pi} - 1 = 0\)'&lt;/span&gt;)

org.org(r&lt;span style="color: #008000;"&gt;'The equation is \(E = h \nu\).'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;code&gt;One liner&lt;/code&gt;
&lt;/p&gt;

&lt;pre class="example"&gt;
multiline
output
   with indentation
       at a few levels
that is verbatim.
&lt;/pre&gt;

&lt;pre class="example"&gt;
your basic result
your
  basic
    result
on a few lines.
&lt;/pre&gt;

&lt;p&gt;
The equation is \(E = h \nu\).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
This looks promising to me. There are a few things to get used to, like always having org output, and some minor differences in making figures. On the whole this looks like a big improvement though! I look forward to working with it more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2016 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2016/05/29/Expanding-orgmode.py-to-get-better-org-python-integration.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 8.2.10&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[When in python do as Pythonistas unless...]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/05/06/When-in-python-do-as-Pythonistas-unless" />
    <id>http://jkitchin.github.io/blog/2016/05/06/When-in-python-do-as-Pythonistas-unless</id>
    <updated>2016-05-06T19:46:51Z</updated>
    <published>2016-05-06T19:46:51Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[When in python do as Pythonistas unless...]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/05/06/When-in-python-do-as-Pythonistas-unless"><![CDATA[



&lt;p&gt;
Many lisps have a when/unless conditional syntax that works like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; t (print &lt;span style="color: #008000;"&gt;"when evaluated"&lt;/span&gt;))

(&lt;span style="color: #0000FF;"&gt;unless&lt;/span&gt; nil (print &lt;span style="color: #008000;"&gt;"unless evaluated"&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
"when evaluated"

"unless evaluated"
&lt;/pre&gt;

&lt;p&gt;
Those are actually just macros that expand to the more verbose if function:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(macroexpand '(unless nil (print &lt;span style="color: #008000;"&gt;"unless evaluated"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; nil nil
  (print &lt;span style="color: #008000;"&gt;"unless evaluated"&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
In Python, we only have this syntax for this kind of construct:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; &lt;span style="color: #D0372D;"&gt;True&lt;/span&gt;: &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt; &lt;span style="color: #008000;"&gt;"when equivalent"&lt;/span&gt;

&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; &lt;span style="color: #0000FF;"&gt;not&lt;/span&gt; &lt;span style="color: #D0372D;"&gt;False&lt;/span&gt;: &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt; &lt;span style="color: #008000;"&gt;"unless equivalent"&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
when equivalent
unless equivalent
&lt;/pre&gt;

&lt;p&gt;
I thought is would be fun to get as close as possible to the lisp syntax in Python. It is not that easy though. The benefit of a macro is we do not evaluate the arguments until they need to be evaluated. In Python, all arguments of functions are immediately evaluated.
&lt;/p&gt;

&lt;p&gt;
One way to avoid this is to put code inside a function. Then it will not be executed until the function is called. So, here is an example of how to get an unless function in Python that conditionally evaluates a function.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;unless&lt;/span&gt;(condition, f):
    &lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; &lt;span style="color: #0000FF;"&gt;not&lt;/span&gt; condition:
        &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; f()

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;func&lt;/span&gt;():
    &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; &lt;span style="color: #008000;"&gt;"executed. Condition was not true."&lt;/span&gt;


&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt; unless(1 &amp;gt; 0, func)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt; unless(1 &amp;lt; 0, func)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
None
executed. Condition was not true.
&lt;/pre&gt;

&lt;p&gt;
That is close, but requires us to wrap our code in a function. There does not seem to be any alternative though. It thought maybe a context manager could be used, but there does not seem to be a way to bypass the execution of the code (&lt;a href="https://www.python.org/dev/peps/pep-0377/"&gt;https://www.python.org/dev/peps/pep-0377/&lt;/a&gt; ). Still, it might be a useful way to change how to think about doing some things differently in Python.
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2016 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2016/05/06/When-in-python-do-as-Pythonistas-unless....org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 8.2.10&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Automatic decorating of class methods to run them in a context]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/05/01/Automatic-decorating-of-class-methods-to-run-them-in-a-context" />
    <id>http://jkitchin.github.io/blog/2016/05/01/Automatic-decorating-of-class-methods-to-run-them-in-a-context</id>
    <updated>2016-05-01T09:16:29Z</updated>
    <published>2016-05-01T09:16:29Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Automatic decorating of class methods to run them in a context]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/05/01/Automatic-decorating-of-class-methods-to-run-them-in-a-context"><![CDATA[



&lt;p&gt;
We &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2016/04/28/Managing-contexts-Python-vs-hy/"&gt;previously examined&lt;/a&gt; approaches to running code in a context. With hy, we even managed to remove the need for a with statement through the use of a macro that expanded behind the scenes to manage the context. In our jasp code, we frequently need a context manager that temporarily changes the working directory to run some code, then changes back. The use of the context manager was a design decision to avoid decorating every single function. Why? There are a lot of functions that need decorating, and they are spread over a lot of files. Not all of the entries from the next block are methods, but most of them are.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; jasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; *

&lt;span style="color: #BA36A5;"&gt;c&lt;/span&gt; = Vasp()
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;dir&lt;/span&gt;(c))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
['__doc__', '__init__', '__module__', '__repr__', '__str__', 'add_to_db', 'archive', 'atoms', 'bader', 'bool_params', 'calculate', 'calculation_required', 'check_state', 'chgsum', 'clean', 'clone', 'create_metadata', 'dict', 'dict_params', 'exp_params', 'float_params', 'get_atoms', 'get_beefens', 'get_bz_k_points', 'get_charge_density', 'get_default_number_of_electrons', 'get_dipole_moment', 'get_eigenvalues', 'get_elapsed_time', 'get_electronic_temperature', 'get_elf', 'get_energy_components', 'get_fermi_level', 'get_forces', 'get_ibz_k_points', 'get_ibz_kpoints', 'get_infrared_intensities', 'get_k_point_weights', 'get_local_potential', 'get_magnetic_moment', 'get_magnetic_moments', 'get_name', 'get_nearest_neighbor_table', 'get_neb', 'get_nonselfconsistent_energies', 'get_number_of_bands', 'get_number_of_electrons', 'get_number_of_grid_points', 'get_number_of_ionic_steps', 'get_number_of_iterations', 'get_number_of_spins', 'get_occupation_numbers', 'get_orbital_occupations', 'get_potential_energy', 'get_property', 'get_pseudo_density', 'get_pseudo_wavefunction', 'get_pseudopotentials', 'get_required_memory', 'get_spin_polarized', 'get_stress', 'get_valence_electrons', 'get_version', 'get_vibrational_frequencies', 'get_vibrational_modes', 'get_xc_functional', 'initialize', 'input_params', 'int_params', 'is_neb', 'job_in_queue', 'json', 'list_params', 'name', 'nbands', 'org', 'output_template', 'plot_neb', 'positions', 'post_run_hooks', 'prepare_input_files', 'pretty_json', 'python', 'read', 'read_convergence', 'read_default_number_of_electrons', 'read_dipole', 'read_eigenvalues', 'read_electronic_temperature', 'read_energy', 'read_fermi', 'read_forces', 'read_ibz_kpoints', 'read_incar', 'read_k_point_weights', 'read_kpoints', 'read_ldau', 'read_magnetic_moment', 'read_magnetic_moments', 'read_metadata', 'read_nbands', 'read_number_of_electrons', 'read_number_of_iterations', 'read_occupation_numbers', 'read_outcar', 'read_potcar', 'read_relaxed', 'read_stress', 'read_version', 'read_vib_freq', 'register_post_run_hook', 'register_pre_run_hook', 'restart', 'restart_load', 'results', 'run', 'run_counts', 'set', 'set_atoms', 'set_nbands', 'set_results', 'special_params', 'string_params', 'strip', 'strip_warnings', 'todict', 'track_output', 'update', 'write_incar', 'write_kpoints', 'write_metadata', 'write_potcar', 'write_sort_file', 'xml']
&lt;/pre&gt;

&lt;p&gt;
The use of a context manager is really useful for a single calculation, and it saves us a lot of boilerplate code to manage changing directories. It limits us though for looping through calculations. We are stuck with traditional for loops that have the with statement embedded in them. We also cannot get too functional, e.g. with list comprehension.
&lt;/p&gt;

&lt;p&gt;
In other words, this is ok:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #BA36A5;"&gt;E&lt;/span&gt; = []
&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; d &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; np.linspace(1, 1.5):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;atoms&lt;/span&gt; = Atoms(...,d)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;with&lt;/span&gt; jasp(&lt;span style="color: #008000;"&gt;'calculated-name-{}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(d),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; ...,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; atoms=atoms) &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; calc:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   E.append(atoms.get_potential_energy())
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
But this code is not possible:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #BA36A5;"&gt;bond_lengths&lt;/span&gt; = np.linspace(1, 1.5)

&lt;span style="color: #BA36A5;"&gt;A&lt;/span&gt; = [Atoms(...,d) &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; d &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; bond_lengths]

&lt;span style="color: #BA36A5;"&gt;calcs&lt;/span&gt; = [JASP(&lt;span style="color: #008000;"&gt;'calculated-name-{}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(d),...,atoms=atoms)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; d, atoms &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;zip&lt;/span&gt;(bond-lengths, A)]

&lt;span style="color: #BA36A5;"&gt;E&lt;/span&gt; = [atoms.get_potential_energy() &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; atoms &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; A]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It is not legal syntax to embed a with statement inside a list comprehension. The code will not work because to get the potential energy we have to switch into the calculation directory and read it from a file there, then switch back.
&lt;/p&gt;

&lt;p&gt;
To make that possible, we need to decorate the class functions so that the right thing happens when needed. I still do not want to decorate each function manually. Although there is a case to make for it, as I mentioned earlier, the functions are all over the place, and numerous. Now is not the time to fix it.
&lt;/p&gt;

&lt;p&gt;
Instead, we consider a solution that will automatically decorate class functions for us! Enter the Metaclass. This is a class that modifies how classes are created. The net effect of the code below is our Calculator class now has all functions automatically decorated with a function that changes to the working directory, runs the function, and then ensures we change back even in the event of an exception. This approach is adapted from &lt;a href="http://stackoverflow.com/questions/3467526/attaching-a-decorator-to-all-functions-within-a-class"&gt;http://stackoverflow.com/questions/3467526/attaching-a-decorator-to-all-functions-within-a-class&lt;/a&gt; .
&lt;/p&gt;

&lt;p&gt;
I am pretty sure this is the right way to do this. We cannot simply decorate the functions of ase.calculators.vasp.Vasp because our decorator needs access to the directory defined in a &lt;i&gt;class instance&lt;/i&gt;. That is what the &lt;span class="underline"&gt;&lt;span class="underline"&gt;init&lt;/span&gt;&lt;/span&gt; method of the metaclass enables.
&lt;/p&gt;

&lt;p&gt;
We will put this code into a library called meta_calculator.py for reuse in later examples.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; os
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; types

&lt;span style="color: #0000FF;"&gt;class&lt;/span&gt; &lt;span style="color: #6434A3;"&gt;WithCurrentDirectory&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;type&lt;/span&gt;):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #036A07;"&gt;"""Metaclass that decorates all of its methods except __init__."""&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;__new__&lt;/span&gt;(cls, name, bases, attrs):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;super&lt;/span&gt;(WithCurrentDirectory, cls).__new__(cls, name, bases, attrs)

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;__init__&lt;/span&gt;(cls, name, bases, attrs):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #036A07;"&gt;"""Decorate all the methods of the class instance with the classmethod cd.&lt;/span&gt;

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   &lt;/span&gt;&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt; We skip __init__ because that is where the attributes are actually set.&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   &lt;/span&gt;&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt; It is an error to access them before they are set.&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   &lt;/span&gt;&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt; """&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; attr_name, attr_value &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; attrs.iteritems():
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; attr_name != &lt;span style="color: #008000;"&gt;'__init__'&lt;/span&gt; &lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;isinstance&lt;/span&gt;(attr_value, types.FunctionType):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #006FE0;"&gt;setattr&lt;/span&gt;(cls, attr_name, cls.cd(attr_value))


&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #6434A3;"&gt;@classmethod&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;cd&lt;/span&gt;(cls, func):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #036A07;"&gt;"""Decorator to temporarily run cls.func in the directory stored in cls.wd.&lt;/span&gt;

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   &lt;/span&gt;&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt; The working directory is restored to the original directory afterwards.&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   &lt;/span&gt;&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt; """&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;wrapper&lt;/span&gt;(&lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;, *args, **kwargs):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; &lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;.verbose:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'\nRunning {}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(func.&lt;span style="color: #006FE0;"&gt;__name__&lt;/span&gt;))
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;"Started in {}"&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(os.getcwd()))
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;os.chdir(&lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;.wd)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; &lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;.verbose:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;"  Entered {}"&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(os.getcwd()))
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;try&lt;/span&gt;:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;result&lt;/span&gt; = func(&lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;, *args, **kwargs)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; &lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;.verbose:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'  {}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(result))
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; result
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;except&lt;/span&gt; &lt;span style="color: #6434A3;"&gt;Exception&lt;/span&gt;, e:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;this is where you would use an exception handling function&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'  Caught {}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(e))
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;pass&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;finally&lt;/span&gt;:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   os.chdir(&lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;.owd)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; &lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;.verbose:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;"  Exited to {}\n"&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(os.getcwd()))

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; wrapper.&lt;span style="color: #006FE0;"&gt;__name__&lt;/span&gt; = func.&lt;span style="color: #006FE0;"&gt;__name__&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; wrapper.&lt;span style="color: #006FE0;"&gt;__doc__&lt;/span&gt; = func.&lt;span style="color: #006FE0;"&gt;__doc__&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; wrapper


&lt;span style="color: #0000FF;"&gt;class&lt;/span&gt; &lt;span style="color: #6434A3;"&gt;Calculator&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;object&lt;/span&gt;):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #036A07;"&gt;"""Class we use for a calculator.&lt;/span&gt;

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;  Every method is decorated by the metaclass so it runs in the working&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;  directory defined by the class instance.&lt;/span&gt;

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;  """&lt;/span&gt;

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #BA36A5;"&gt;__metaclass__&lt;/span&gt; = WithCurrentDirectory

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;__init__&lt;/span&gt;(&lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;, wd, verbose=&lt;span style="color: #D0372D;"&gt;False&lt;/span&gt;):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;.owd = os.getcwd()
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;.wd = wd
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;.verbose = verbose
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; &lt;span style="color: #0000FF;"&gt;not&lt;/span&gt; os.path.isdir(wd):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;os.makedirs(wd)


&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;create_input&lt;/span&gt;(&lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;, **kwargs):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #0000FF;"&gt;with&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;open&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'INCAR'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'w'&lt;/span&gt;) &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; f:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; key, val &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; kwargs.iteritems():
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   f.write(&lt;span style="color: #008000;"&gt;'{} = {}\n'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(key, val))


&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;exc&lt;/span&gt;(&lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #036A07;"&gt;"This raises an exception to see what happens"&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; 1 / 0

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;read_input&lt;/span&gt;(&lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #0000FF;"&gt;with&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;open&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'INCAR'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'r'&lt;/span&gt;) &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; f:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; f.read()

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;__str__&lt;/span&gt;(&lt;span style="color: #0000FF;"&gt;self&lt;/span&gt;):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; &lt;span style="color: #008000;"&gt;'In {}. Contains: {}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(os.getcwd(),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; os.listdir(&lt;span style="color: #008000;"&gt;'.'&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here is how we might use it.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; meta_calculator &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; *

&lt;span style="color: #BA36A5;"&gt;c&lt;/span&gt; = Calculator(&lt;span style="color: #008000;"&gt;'/tmp/calc-1'&lt;/span&gt;, verbose=&lt;span style="color: #D0372D;"&gt;True&lt;/span&gt;)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt; c.create_input(xc=&lt;span style="color: #008000;"&gt;'PBE'&lt;/span&gt;, encut=450)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt; c.read_input()
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt; c.exc()
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt; c
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
Running create_input
Started in /Users/jkitchin/blogofile-jkitchin.github.com/_blog
  Entered /private/tmp/calc-1
  None
  Exited to /Users/jkitchin/blogofile-jkitchin.github.com/_blog

None

Running read_input
Started in /Users/jkitchin/blogofile-jkitchin.github.com/_blog
  Entered /private/tmp/calc-1
  xc = PBE
encut = 450

  Exited to /Users/jkitchin/blogofile-jkitchin.github.com/_blog

xc = PBE
encut = 450


Running exc
Started in /Users/jkitchin/blogofile-jkitchin.github.com/_blog
  Entered /private/tmp/calc-1
  Caught integer division or modulo by zero
  Exited to /Users/jkitchin/blogofile-jkitchin.github.com/_blog

None

Running __str__
Started in /Users/jkitchin/blogofile-jkitchin.github.com/_blog
  Entered /private/tmp/calc-1
  In /private/tmp/calc-1. Contains: ['INCAR']
  Exited to /Users/jkitchin/blogofile-jkitchin.github.com/_blog

In /private/tmp/calc-1. Contains: ['INCAR']
&lt;/pre&gt;

&lt;p&gt;
As we can see, in each function call, we evidently do change into the path that /tmp/calc-1 points to (it is apparently /private/tmp on Mac OSX), runs the method, and then changes back out, even when exceptions occur.
&lt;/p&gt;

&lt;p&gt;
Here is a functional approach to using our new calculator.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; meta_calculator &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; *

&lt;span style="color: #BA36A5;"&gt;encuts&lt;/span&gt; = [100, 200, 300, 400]
&lt;span style="color: #BA36A5;"&gt;calcs&lt;/span&gt; = [Calculator(&lt;span style="color: #008000;"&gt;'encut-{}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(encut)) &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; encut &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; encuts]

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;list-comprehension for the side-effect&lt;/span&gt;
[calc.create_input(encut=encut) &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; calc,encut &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;zip&lt;/span&gt;(calcs, encuts)]

&lt;span style="color: #BA36A5;"&gt;inputs&lt;/span&gt; = [calc.read_input() &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; calc &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; calcs]

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(inputs)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;([calc.wd &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; calc &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; calcs])
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
['encut = 100\n', 'encut = 200\n', 'encut = 300\n', 'encut = 400\n']
['encut-100', 'encut-200', 'encut-300', 'encut-400']
&lt;/pre&gt;

&lt;p&gt;
Sweet. And here is our evidence that the directories got created and have the files in them.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;find . -type f -print | grep &lt;span style="color: #008000;"&gt;"encut-[1-4]00"&lt;/span&gt; | xargs -n 1 -I {} -i bash -c &lt;span style="color: #008000;"&gt;'echo {}; cat {}; echo'&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
./encut-100/INCAR
encut = 100

./encut-200/INCAR
encut = 200

./encut-300/INCAR
encut = 300

./encut-400/INCAR
encut = 400
&lt;/pre&gt;

&lt;p&gt;
This looks like another winner that will be making its way into &lt;a href="https://github.com/jkitchin/jasp"&gt;jasp&lt;/a&gt; soon. I guess it will require at least some minor surgery on a class in ase.calculators.vasp. It might be time to move a copy of it all the way into jasp.&lt;/p&gt;
&lt;p&gt;Copyright (C) 2016 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2016/05/01/Automatic-decorating-of-class-methods-to-run-them-in-a-context.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 8.2.10&lt;/p&gt;]]></content>
  </entry>
</feed>
