<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <atom:link href="http://kitchingroup.cheme.cmu.edu/blog/feed/index.xml" rel="self" type="application/rss+xml" />
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Thu, 04 May 2017 23:34:03 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    
    <item>
      <title>An emacs-lisp dsl for gnuplot</title>
      <link>http://jkitchin.github.io/blog/2017/05/04/An-emacs-lisp-dsl-for-gnuplot</link>
      <pubDate>Thu, 04 May 2017 19:33:55 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[lisp]]></category>
      <category><![CDATA[plotting]]></category>
      <guid isPermaLink="false">0UZjXdfBOloIK7bnw4odvEI2ep0=</guid>
      <description>An emacs-lisp dsl for gnuplot</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orge24f7e9"&gt;1. Embedding Python or gnuplot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgfe7800b"&gt;2. An alternative approach using a DSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga773a9d"&gt;3. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Plotting is a pretty general feature we need in scientific work. In this post we examine a way we could get at least minimal plotting into Emacs-lisp with as lispy a syntax as reasonable.
&lt;/p&gt;

&lt;div id="outline-container-orge24f7e9" class="outline-2"&gt;
&lt;h2 id="orge24f7e9"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Embedding Python or gnuplot&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
With org-mode we can fluidly integrate many languages in one document. That is not the goal here, where I want to integrate plotting into a program. You certainly could go this route to embed python programs in your lisp programs for plotting.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;python&lt;/span&gt; (code)
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((temporary-file-directory &lt;span style="color: #008000;"&gt;"."&lt;/span&gt;)
        (tmpfile (make-temp-file &lt;span style="color: #008000;"&gt;"py-"&lt;/span&gt; nil &lt;span style="color: #008000;"&gt;".py"&lt;/span&gt;)))
    (&lt;span style="color: #0000FF;"&gt;with-temp-file&lt;/span&gt; tmpfile
      (insert code))
    (shell-command-to-string (format &lt;span style="color: #008000;"&gt;"python %s"&lt;/span&gt; tmpfile))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here is that function in action.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(python &lt;span style="color: #008000;"&gt;"import matplotlib.pyplot as plt&lt;/span&gt;
&lt;span style="color: #008000;"&gt;import numpy as np&lt;/span&gt;
&lt;span style="color: #008000;"&gt;x = np.linspace(0, 1)&lt;/span&gt;
&lt;span style="color: #008000;"&gt;y = np.exp(x)&lt;/span&gt;
&lt;span style="color: #008000;"&gt;plt.plot(x, y, label='data')&lt;/span&gt;
&lt;span style="color: #008000;"&gt;plt.title('A Title')&lt;/span&gt;
&lt;span style="color: #008000;"&gt;plt.xlim([0, 1])&lt;/span&gt;
&lt;span style="color: #008000;"&gt;plt.ylim([1, 2.75])&lt;/span&gt;
&lt;span style="color: #008000;"&gt;plt.xlabel('x')&lt;/span&gt;
&lt;span style="color: #008000;"&gt;plt.ylabel('y')&lt;/span&gt;
&lt;span style="color: #008000;"&gt;plt.legend()&lt;/span&gt;
&lt;span style="color: #008000;"&gt;plt.savefig('figpy.png')"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And the corresponding figure:
&lt;img src="/media/figpy.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
This is irritating for a few reasons. One is it is annoying to write python programs in string form; you don't get much editor support for indentation or syntax highlighting, and you have to be careful with quotes. It is not that easy to switch that snippet to Python mode either. You are pretty limited in writing programs that expand and modify the code too. Basically you have to do that all by string manipulation.
&lt;/p&gt;

&lt;p&gt;
Along these lines, you could imagine a gnuplot function. It ends up not being much better.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;gnuplot&lt;/span&gt; (cmds)
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((temporary-file-directory &lt;span style="color: #008000;"&gt;"."&lt;/span&gt;)
         (cmdfile (make-temp-file &lt;span style="color: #008000;"&gt;"gnuplot-cmds-"&lt;/span&gt; nil &lt;span style="color: #008000;"&gt;".gpl"&lt;/span&gt;))
         (shellcmd (format &lt;span style="color: #008000;"&gt;"gnuplot --persist -c \"%s\""&lt;/span&gt; cmdfile)))
    (&lt;span style="color: #0000FF;"&gt;with-temp-file&lt;/span&gt; cmdfile
      (insert cmds))
    (shell-command shellcmd)
    (delete-file cmdfile)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You use this the same way.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;gnuplot&lt;/span&gt; &lt;span style="color: #008000;"&gt;"set title \"Simple Plots\" font \",20\"&lt;/span&gt;
&lt;span style="color: #008000;"&gt;set key left box&lt;/span&gt;
&lt;span style="color: #008000;"&gt;set samples 50&lt;/span&gt;
&lt;span style="color: #008000;"&gt;set style data points&lt;/span&gt;
&lt;span style="color: #008000;"&gt;set terminal png&lt;/span&gt;
&lt;span style="color: #008000;"&gt;set output \"gnuplot.png\"&lt;/span&gt;

&lt;span style="color: #008000;"&gt;plot [-10:10] sin(x),atan(x),cos(atan(x))"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/gnuplot.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
It has the same limitations as our string-based Python solution. The benefit of them is the native command structure for Python or gnuplot is used, so anything they can do you can too.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfe7800b" class="outline-2"&gt;
&lt;h2 id="orgfe7800b"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; An alternative approach using a DSL&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
As an alternative, we consider here a domain specific language (DSL) that maps onto gnuplot. Suppose we could do this instead.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;gnuplot&lt;/span&gt;
 (set terminal png)
 (set output &lt;span style="color: #008000;"&gt;"test.png"&lt;/span&gt;)
 (set title &lt;span style="color: #008000;"&gt;"Simple Plots"&lt;/span&gt; font &lt;span style="color: #008000;"&gt;",20"&lt;/span&gt;)
 (set key left box)
 (set samples 50)
 (set style data points)

 (&lt;span style="color: #0000FF;"&gt;plot&lt;/span&gt; [-10:10] sin\(x\) \,atan\(x\) \,cos\(atan\(x\)\)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here is the figure from that code. The most annoying part of this is in the plot function we have to escape all the parentheses and commas, but otherwise it looks pretty lispy. The output of that program is the gnuplot commands that were generated for making the plot.
&lt;img src="/media/test.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
This retains a lot of benefits of programming in lisp. &lt;code&gt;gnuplot&lt;/code&gt; has to be a macro though because we do not want to evaluate the s-expressions inside as lisp. For starters they just look lispy, I don't actually use them as lisp at all. Instead we transform them to the gnuplot code.
&lt;/p&gt;

&lt;p&gt;
In the following code, I will develop the gnuplot macro. It has some sticky and tricky points, and it is not obvious it will support all the features of gnuplot, but I learned a lot doing it that I will share here.
&lt;/p&gt;

&lt;p&gt;
Starting with a simple form inside the macro, I wanted to convert (set output "test.png") to "set output \"test.png\"". For this DSL, I want to treat every symbol in the form as if it should be turned into a string, anything that is a string should be quoted, and anything that is in parentheses (i.e. it passes listp) should be evaluated and converted to a string. Then all those strings should be joined by spaces. Here is a macro that does that (adapted from a solution at &lt;a href="https://emacs.stackexchange.com/questions/32558/eval-some-arguments-in-a-macro/32570?noredirect=1#comment50186_32570"&gt;https://emacs.stackexchange.com/questions/32558/eval-some-arguments-in-a-macro/32570?noredirect=1#comment50186_32570&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
There are a couple of corner cases that are handled here. If the arg is a string, we quote it.  If the arg is not a symbol or string, then it is evaluated and converted to a string. Importantly, this is done in the run environment though, so we can inject variables into the gnuplot code.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defmacro&lt;/span&gt; &lt;span style="color: #006699;"&gt;gargs&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; args)
  &lt;span style="color: #036A07;"&gt;"Convert symbols to strings, quote strings, and (expr) to what they evaluate to."&lt;/span&gt;
  `(s-join &lt;span style="color: #008000;"&gt;" "&lt;/span&gt; (list ,@(cl-mapcan
                        (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (s)
                          (list
                           (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
                            ((symbolp s)
                             (symbol-name s))
                            ((stringp s)
                             (format &lt;span style="color: #008000;"&gt;"\"%s\""&lt;/span&gt; s))
                            (t
                             `(&lt;span style="color: #0000FF;"&gt;with-output-to-string&lt;/span&gt;
                                (princ ,s))))))
                        args))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here are a few examples of how it works. The loop is just to get a vertical table in org-mode for the blog post.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for s in
      (list (&lt;span style="color: #0000FF;"&gt;gargs&lt;/span&gt; set key title &lt;span style="color: #008000;"&gt;"before fit"&lt;/span&gt; size \, (+ 5 5))
            (&lt;span style="color: #0000FF;"&gt;gargs&lt;/span&gt; set title &lt;span style="color: #008000;"&gt;"red"&lt;/span&gt;)
            (&lt;span style="color: #0000FF;"&gt;gargs&lt;/span&gt; set yrange [0:*])
            (&lt;span style="color: #0000FF;"&gt;gargs&lt;/span&gt; &lt;span style="color: #008000;"&gt;"5"&lt;/span&gt;)
            (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((x 6)) (&lt;span style="color: #0000FF;"&gt;gargs&lt;/span&gt; (identity x)))
            (&lt;span style="color: #0000FF;"&gt;gargs&lt;/span&gt; 'x)
            (&lt;span style="color: #0000FF;"&gt;gargs&lt;/span&gt; '(x))
            (&lt;span style="color: #0000FF;"&gt;gargs&lt;/span&gt; set label 1 &lt;span style="color: #008000;"&gt;"plot for [n=2:10] sin(x*n)/n"&lt;/span&gt; at graph .95\, graph .92 right))
      collect
      (list s))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
A limitation of this is that we either have quote things like parentheses, commas, semi-colons and sometimes square brackets:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;gargs&lt;/span&gt; plot for [n=2:10] sin\(x*n\)/n notitle lw \(13-n\)/2)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Or we have to use the string form instead; we can always fall back to that.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;gargs&lt;/span&gt; &lt;span style="color: #008000;"&gt;"plot for [n=2:10] sin(x*n)/n notitle lw (13-n)/2"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The macro above will do the grunt work on each form in the gnuplot macro. Finally, for the gnuplot macro, I want to take all the forms, convert them to gnuplot commands, write them to a temporary file, and then run gnuplot on the file, and finally delete the temp file. I assume we start with a gui terminal so graphs pop up unless you change it in your macro body. Here is that macro. It returns the generated code so it easy to see if you got the right program.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defmacro&lt;/span&gt; &lt;span style="color: #006699;"&gt;gnuplot&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; forms)
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((temporary-file-directory &lt;span style="color: #008000;"&gt;"."&lt;/span&gt;)
         (cmdfile (make-temp-file &lt;span style="color: #008000;"&gt;"gnuplot-cmds-"&lt;/span&gt; nil &lt;span style="color: #008000;"&gt;".gpl"&lt;/span&gt;))
         (shellcmd (format &lt;span style="color: #008000;"&gt;"gnuplot --persist -c \"%s\""&lt;/span&gt; cmdfile))
         (cmd-string))
    `(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((cmd-string (s-join &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt; (list ,@(mapcar (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (x)
                                                      (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (stringp x)
                                                          x
                                                        `(&lt;span style="color: #0000FF;"&gt;gargs&lt;/span&gt; ,@x)))
                                                    forms)))))
       (&lt;span style="color: #0000FF;"&gt;with-temp-file&lt;/span&gt; ,cmdfile
         (insert &lt;span style="color: #008000;"&gt;"set terminal qt\n"&lt;/span&gt;)
         (insert cmd-string)
         (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; cmd-string (buffer-string)))
       (shell-command ,shellcmd)
       (delete-file ,cmdfile)
       cmd-string)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here is a figure adapted from &lt;a href="http://gnuplot.sourceforge.net/demo/iterate.html"&gt;http://gnuplot.sourceforge.net/demo/iterate.html&lt;/a&gt;. I use the string form for the last line to avoid escaping all the special characters.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;gnuplot&lt;/span&gt;
 (set terminal png)
 (set output &lt;span style="color: #008000;"&gt;"iteration.png"&lt;/span&gt;)
 (set title &lt;span style="color: #008000;"&gt;"Iteration within plot command"&lt;/span&gt;)
 (set xrange [0:3])
 (set label 1 &lt;span style="color: #008000;"&gt;"plot for [n=2:10] sin(x*n)/n"&lt;/span&gt; at graph .95\, graph .92 right)
 &lt;span style="color: #008000;"&gt;"plot for [n=2:10] sin(x*n)/n notitle lw (13-n)/2"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here is the resulting figure.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="/media/iteration.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
That is overall pretty sweet. There is a little dissonance between the strings, escaped comma, etc.., and it is not terribly ideal for integrating with regular lisp code inside the macro yet. That seems to be a feature of my choice to use (expr) as the syntax to evaluate a form. It means you have to do some gymnastics to get some s-expressions into the graphs. For example below I use a couple of variables to inject values. To get a string I have to use format to add the extra quotes, and to get the number I have to use the identity function. I also used escaped characters in the last line to see the difference.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((ts &lt;span style="color: #008000;"&gt;"Iteration and substitution"&lt;/span&gt;)
      (x0 0)
      (xf 3)
      (g1 0.95)
      (g2 0.92))
  (&lt;span style="color: #0000FF;"&gt;gnuplot&lt;/span&gt;
   (set terminal png)
   (set output &lt;span style="color: #008000;"&gt;"iteration-2.png"&lt;/span&gt;)
   (set title (format &lt;span style="color: #008000;"&gt;"\"%s\""&lt;/span&gt; ts))
   &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Note the escaped square brackets&lt;/span&gt;
   (set xrange \[ (identity x0) : (identity xf) \])
   (set label 1 &lt;span style="color: #008000;"&gt;"plot for [n=2:10] sin(x*n)/n"&lt;/span&gt; at graph (identity g1) \, graph (identity g2) right)
   &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;note here I escaped the parentheses!&lt;/span&gt;
   (&lt;span style="color: #0000FF;"&gt;plot&lt;/span&gt; for [n=2:10] sin\(x*n\)/n notitle lw \(13-n\)/2)))
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
&lt;img src="/media/iteration-2.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id="outline-container-orga773a9d" class="outline-2"&gt;
&lt;h2 id="orga773a9d"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
For the simple plots here, my DSL worked ok. There is a tradeoff in the syntax I chose that has some consequences. We cannot use the values of symbols in this DSL without resorting to hackery like (identity sym). We also cannot use the infix notation for sin(x) without quoting it as "sin(x)" or escaping the parentheses, e.g. &lt;code&gt;sin\(x\)&lt;/code&gt;, likewise square brackets which lisp will read  as a vector. Commas have to be escaped, which is probably an emacs-lisp issue. To address that would require a reader macro which emacs-lisp does not have great support for. I am calling this experiment done for now. I have another syntax idea to try out another day.
&lt;/p&gt;

&lt;p&gt;
Here is a preview of what it might look like. It is basically the same but I reuse keywords to indicate that :x0 should be replaced by whatever x0 evaluates to, and (: - 1 0.05) should be evaluated. The special character escaping is still there of course, since that is a limitation of the emacs lisp reader I think. I might try using x0? and (? - 1 0.05) instead. That might be less confusing. I like that the keywords are syntax highlighted for free though, and you can't use them for anything else.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((ts &lt;span style="color: #008000;"&gt;"Iteration and substitution"&lt;/span&gt;)
      (x0 0)
      (xf 3)
      (g2 0.92))
  (&lt;span style="color: #0000FF;"&gt;gnuplot&lt;/span&gt;
   (set terminal png)
   (set output &lt;span style="color: #008000;"&gt;"iteration-2.png"&lt;/span&gt;)
   (set title &lt;span style="color: #006FE0;"&gt;:ts&lt;/span&gt;)
   &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Note the escaped square brackets&lt;/span&gt;
   (set xrange \[ &lt;span style="color: #006FE0;"&gt;:x0&lt;/span&gt; : &lt;span style="color: #006FE0;"&gt;:xf&lt;/span&gt; \])
   (set label 1 &lt;span style="color: #008000;"&gt;"plot for [n=2:10] sin(x*n)/n"&lt;/span&gt; at graph (&lt;span style="color: #0000FF;"&gt;:&lt;/span&gt; - 1 0.05) \, graph &lt;span style="color: #006FE0;"&gt;:g2&lt;/span&gt; right)
   &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;note here I escaped the parentheses!&lt;/span&gt;
   (&lt;span style="color: #0000FF;"&gt;plot&lt;/span&gt; for [n=2:10] sin(x*n)/n notitle lw (13-n)/2)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This has the benefit of a little cleaner injection of variables and selective execution of parenthetical expressions, we will just ignore any that don't pass (= (car expr) :). That May not work for sin((: + 1 1) x) though, unless I escape the outer parentheses too.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/05/04/An-emacs-lisp-dsl-for-gnuplot.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Emulating Sparql queries in emacs-lisp with pattern matching</title>
      <link>http://jkitchin.github.io/blog/2017/04/30/Emulating-Sparql-queries-in-emacs-lisp-with-pattern-matching</link>
      <pubDate>Sun, 30 Apr 2017 13:46:47 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[lisp]]></category>
      <guid isPermaLink="false">R3y1c_-hnfEQdQtr5ieB1MNVUk8=</guid>
      <description>Emulating Sparql queries in emacs-lisp with pattern matching</description>
      <content:encoded><![CDATA[


&lt;p&gt;
Sqarql is a query language for RDF triples. A triple is a data structure that consists of a (subject predicate object). Sparql lets you query the triples to extract data from them. I have been interested in using these to augment the &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/03/Find-stuff-in-org-mode-anywhere/"&gt;SQL databases I generate&lt;/a&gt; from my org-files to be able to infer relationships between subjects and objects. For example, I could encode relationships into the contact database I use, and then infer new information that is not encoded explicitly. So far though I haven't found a good Sparql database that I can easily integrate into Emacs (or even play around with). I am reading On Lisp these days and chapters 18 and 19 talk about destructuring and pattern matching, and I realized these can be used to implement something like Sparql queries on simple lisp data structures. In this post I explore what it looks like and how to do it.
&lt;/p&gt;

&lt;p&gt;
Let's consider a small database of triples that codify relationships between two people. For example, we can codify that Ann is Bob's mother with (Bob mother Ann). Here is our little database.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; triples '((Bob mother Ann)
                (Bill father Bob)
                (Lucy mother Jane)
                (Bob wife Jane)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We can filter out facts from the database with a -filter. Here we filter out triples about Bob. Emacs has nice pattern matching in the pcase macro (see &lt;a href="http://www.wilfred.me.uk/blog/2017/03/19/pattern-matching-in-emacs-lisp/"&gt;http://www.wilfred.me.uk/blog/2017/03/19/pattern-matching-in-emacs-lisp/&lt;/a&gt; and &lt;a href="http://newartisans.com/2016/01/pattern-matching-with-pcase/"&gt;http://newartisans.com/2016/01/pattern-matching-with-pcase/&lt;/a&gt; for example). It turns out this is an amazing way to solve this problem. Here we look at triples with the pattern that they start with Bob.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(-filter (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (triple) (&lt;span style="color: #0000FF;"&gt;pcase&lt;/span&gt; triple (`(Bob ,_ ,_) t))) triples)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And here we get all the mothers.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(-filter (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (triple) (&lt;span style="color: #0000FF;"&gt;pcase&lt;/span&gt; triple (`(,_ mother ,_) t))) triples)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We can infer some facts about these people from the database by using some "rules". For example, there is not an entry that tells us directly who Bill's grandmother is. If we assume that the mother of a person's father is their grandmother, then we can infer Bill's grandmother is Ann. In this post, we examine how to write code that can find that answer. We will use pattern matching on pairs of triples to do it.
&lt;/p&gt;

&lt;p&gt;
We can enumerate pairs of triples, and use pattern matching to find the pair of triples that meet the criteria we specify. The criteria we want to match is (in pseudo-sparql):
&lt;/p&gt;

&lt;pre class="example"&gt;
(Bill father ?dad) (?dad mother ?grandmother)
&lt;/pre&gt;

&lt;p&gt;
In other words, we want to find a triple that contains Bill as the subject, father as the predication, and then his father will be the object, and then find another triple that matches a predicate of mother with the subject equal to the father object we found in the first triple, and the object of the second triple will be Bill's grandmother. We enumerate pairs of triples for the comparison. Here is a way to do that. It is not a very efficient way to do it; it would be better to first filter out the triples that match (Bill father &lt;i&gt;something&lt;/i&gt;) and then filter out the triples that match (&lt;i&gt;anything&lt;/i&gt; mother &lt;i&gt;any other thing&lt;/i&gt;) &lt;i&gt;and&lt;/i&gt; then consider the pairs of those triples. I will save that for another day; efficiency is not the point today ;)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for i below (length triples)
      append
      (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt;
       for j below (length triples)
       if (not (= i j))
       collect
       (list (nth i triples) (nth j triples))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You can see the pair that matches is the fourth one down (actually the first one matches too, but not exactly in the order of the pattern we specified). Next, we use pcase for the pattern matching. This amazing macro allows you to specify a pattern in terms of reusable variables so we can specify that the same value exists in multiple places. We will use this pattern (in pcase syntax):
&lt;/p&gt;

&lt;pre class="example"&gt;
`((Bill father ,dad) (,dad mother ,grandmother))
&lt;/pre&gt;

&lt;p&gt;
That means match a list that has the first element of (Bill father &lt;i&gt;something&lt;/i&gt;) and store the value of &lt;i&gt;something&lt;/i&gt; in the variable dad. The second element of the list must match (&lt;i&gt;something&lt;/i&gt; mother &lt;i&gt;another thing&lt;/i&gt;) and store the value of &lt;i&gt;another thing&lt;/i&gt; in the variable grandmother. The two variables dad and grandmother are then available in the body of the pcase statement. Here is the code to loop over the triples and return the result when we find a match.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;catch&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;result&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for i below (length triples)
        do
        (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt;
         for j below (length triples)
         if (not (= i j))
         collect
         (&lt;span style="color: #0000FF;"&gt;pcase&lt;/span&gt; (list (nth i triples) (nth j triples))
           (`((Bill father ,dad) (,dad mother ,grandmother))
            (&lt;span style="color: #0000FF;"&gt;throw&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;result&lt;/span&gt; (format &lt;span style="color: #008000;"&gt;"Bill's dad is %s and his grandmother is %s"&lt;/span&gt; dad grandmother)))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Not bad. It would be worthwhile to encapsulate that into a macro perhaps, so you could just write something like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;select&lt;/span&gt; (dad grandmother) from triples where `((Bill father ,dad) (,dad mother ,grandmother)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
For fun I implemented a limited version of this below. It is fairly limited, and lightly tested. The biggest limitation is we hard-coded the search over pairs of triples. This version searches by brute force too, because I don't know how to build in filtering yet. It is another exercise for another day to remove these limitations. Here I just want to try out the macro with the syntactic sugar of "from" and "where" (which are totally ignored) as well at the backquoted query.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defmacro&lt;/span&gt; &lt;span style="color: #006699;"&gt;select&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; args)
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((values (first args))
        (db (third args))
        (query (fifth args)))
    `&lt;span style="color: #D0372D;"&gt;(catch &lt;/span&gt;'&lt;span style="color: #D0372D;"&gt;result&lt;/span&gt;
       (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for i below (length ,db)
             do
             (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt;
              for j below (length ,db)
              if (not (= i j))
              do
              (&lt;span style="color: #0000FF;"&gt;pcase&lt;/span&gt; (list (nth i triples) (nth j triples))
                (,query
                 (&lt;span style="color: #0000FF;"&gt;throw&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;result&lt;/span&gt; (list ,@values)))))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here is a fun way to write the query that finds the grandmother of the person named Bill with variable capture.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;select&lt;/span&gt; (person dad grandmother) from triples
        where `((,(&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; person (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; Bill person)) father ,dad) (,dad mother ,grandmother)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We can see the grandmother is Ann, as we found before.
&lt;/p&gt;

&lt;p&gt;
Let's have a look at the macro expansion. Clearly our macro hides a lot of work from us!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(macroexpand '(select (person dad grandmother) from triples
        where `((,(&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; person (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; Bill person)) father ,dad) (,dad mother ,grandmother))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Bill&lt;/td&gt;
&lt;td class="org-left"&gt;Bob&lt;/td&gt;
&lt;td class="org-left"&gt;Ann&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
How about another example query. Who is Lucy's dad? The most direct query would be `(Lucy father ,dad), but a) that fact is not in the database, and b) our select macro won't search a single query anyway. So, let's examine how to find the answer by inference.
&lt;/p&gt;

&lt;p&gt;
Let's assume that Lucy's dad is also the husband of her mother. Let's also assume that we can infer that if we know Jane is the wife of Bob, then Bob is the husband of Jane, and so we can infer from our database that Bob is Lucy's dad. This results in a query on a pair of triples that matches a pattern like:
&lt;/p&gt;

&lt;pre class="example"&gt;
(Lucy mother ?mom) (?dad wife ?mom)
&lt;/pre&gt;

&lt;p&gt;
Here is that query in our select macro.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;select&lt;/span&gt; (person mom dad) from triples
        where `((,(&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; person (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; Lucy person)) mother ,mom) (,dad wife ,mom)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Pretty cool! Clearly there is still a lot to do to make this practical. The implementation I used here wouldn't scale well with large numbers of triples, and its limited to a single kind of query. Chapters 18 and 19 in On Lisp address the query limitation (and they are not even limited to triples) and a different syntax style that is more Sparql like. When I get through them, I will probably add a new post on it. There are a lot of interesting problems to solve here including what to do if there are multiple matches, or inconsistent data? The Sparql select command allows you to group, order and limit the results which would be increasingly useful with larger triple stores. That would definitely add a lot of code to the macro!
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/30/Emulating-Sparql-queries-in-emacs-lisp-with-pattern-matching.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>A callable plist data structure for Emacs</title>
      <link>http://jkitchin.github.io/blog/2017/04/16/A-callable-plist-data-structure-for-Emacs</link>
      <pubDate>Sun, 16 Apr 2017 16:44:53 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[macro]]></category>
      <category><![CDATA[elisp]]></category>
      <guid isPermaLink="false">g-L-SDSuJKkcZwHQyGqqiWpzU7k=</guid>
      <description>A callable plist data structure for Emacs</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgbe53949"&gt;1. An update &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2017-04-21 Fri&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Emacs lisp has a few data structures that store key-value pairs. Here are some canonical examples of these data structures and the way to get data out of them.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;a-lists&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((data '((key1 . 4)
              (key2 . &lt;span style="color: #008000;"&gt;"tree"&lt;/span&gt;))))
  (cdr (assoc 'key2 data)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;p-lists&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((data '(&lt;span style="color: #006FE0;"&gt;:key1&lt;/span&gt; 4 &lt;span style="color: #006FE0;"&gt;:key2&lt;/span&gt; &lt;span style="color: #008000;"&gt;"tree"&lt;/span&gt;)))
  (plist-get data &lt;span style="color: #006FE0;"&gt;:key2&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;A hash table&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((data #s(hash-table data (key1 4 key2 &lt;span style="color: #008000;"&gt;"tree"&lt;/span&gt;))))
  (gethash 'key2 data))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Each of these uses some function to get data out of them. I have been learning about closures today, and realized a way you can make a "callable" data structure using them. In a closure, the data is stored as part of a function. We will use a &lt;a href="http://letoverlambda.com"&gt;"let over lambda"&lt;/a&gt; with a defalias in a lexical environment to achieve this. I will wrap a p-list with this approach, but it could work with any of the examples above. We will make the function have a few behaviors that allow us to see the whole data structure with no args, to get a value with one arg that is a key, and to set a value if there are more than two args add them as key-val pairs to the data structure. This block binds the function to the symbol "d" which is then a callable function.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((data '(&lt;span style="color: #006FE0;"&gt;:key1&lt;/span&gt; 4 &lt;span style="color: #006FE0;"&gt;:key2&lt;/span&gt; &lt;span style="color: #008000;"&gt;"tree"&lt;/span&gt;)))
  (&lt;span style="color: #0000FF;"&gt;defalias&lt;/span&gt; '&lt;span style="color: #006699;"&gt;d&lt;/span&gt;
    (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; key-vals)
      (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
       &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;no args, return data&lt;/span&gt;
       ((= 0 (length key-vals))
        data)
       &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;just a key, get val&lt;/span&gt;
       ((= 1 (length key-vals))
        (plist-get data (car key-vals)))
       (t
        (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for key in (-slice key-vals 0 nil 2)
              for val in (-slice key-vals 1 nil 2)
              do
              (plist-put data key val))
        data)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now we can use it like to get some data out:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(d &lt;span style="color: #006FE0;"&gt;:key2&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And add new values like:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(d &lt;span style="color: #006FE0;"&gt;:key3&lt;/span&gt; &lt;span style="color: #008000;"&gt;"oak"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You can update a value with this too:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(d &lt;span style="color: #006FE0;"&gt;:key3&lt;/span&gt; &lt;span style="color: #008000;"&gt;"pine"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
or add multiple values like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(d &lt;span style="color: #006FE0;"&gt;:key4&lt;/span&gt; 0 &lt;span style="color: #006FE0;"&gt;:key5&lt;/span&gt; 9)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And see the whole plist with no args:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(d)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Pretty nice! It seems like there ought to be a macro to facilitate creating those. Here is one.
This macro basically expands to the same code as above, but for fun I add a default value option.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defmacro&lt;/span&gt; &lt;span style="color: #006699;"&gt;default-dict&lt;/span&gt; (var &lt;span style="color: #6434A3;"&gt;&amp;amp;optional&lt;/span&gt; default &lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; key-vals)
  &lt;span style="color: #036A07;"&gt;"Bind a callable plist to VAR that contains KEY-VALS."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ()
    `&lt;span style="color: #D0372D;"&gt;(let ((data &lt;/span&gt;',key-vals))
       (&lt;span style="color: #0000FF;"&gt;defalias&lt;/span&gt; ',var
         (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; key-vals)
           (message &lt;span style="color: #008000;"&gt;"%s"&lt;/span&gt; key-vals)
           (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
            &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;no args, return data&lt;/span&gt;
            ((= 0 (length key-vals))
             data)
            &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;just a key, get val&lt;/span&gt;
            ((= 1 (length key-vals))
             (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt;  (plist-get data (car key-vals)) ,default))
            (t
             (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for key in (-slice key-vals 0 nil 2)
                   for val in (-slice key-vals 1 nil 2)
                   do
                   (plist-put data key val))
             data)))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here is an instance of it.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;default-dict&lt;/span&gt; d2 &lt;span style="color: #008000;"&gt;"None"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:key1&lt;/span&gt; 4 &lt;span style="color: #006FE0;"&gt;:key2&lt;/span&gt; &lt;span style="color: #008000;"&gt;"tree"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And here it is in use.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(d2 &lt;span style="color: #006FE0;"&gt;:key1&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(d2 &lt;span style="color: #006FE0;"&gt;:new-key&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Not bad. If you come from Python, you might find this style of data structure to be more similar to what you are used to seeing. It sure seems less verbose than the usual plist boilerplate I have used before.
&lt;/p&gt;

&lt;div id="outline-container-orgbe53949" class="outline-2"&gt;
&lt;h2 id="orgbe53949"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; An update &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2017-04-21 Fri&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
One (perhaps undesirable even) feature of the approach above is that it creates a function in the global namespace. This might have unintended consequences with name clashes or shadowing, and if you later use the same variable name for a plist, you would change the function behavior. Here we consider a way to limit the scope of where these functions exist and work. The labels macro provides one way to do this, we just create temporary functions that only exist within a scope. There is a lot of backticking and comma operators in this, and it took quite a few iterations to get it working!
&lt;/p&gt;

&lt;p&gt;
This macro creates temporary functions for each keyword that return the value in the plist.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defmacro&lt;/span&gt; &lt;span style="color: #006699;"&gt;with-dict&lt;/span&gt; (key-vals &lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; body)
  &lt;span style="color: #036A07;"&gt;"A context-manager for a plist where each key is a callable&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;function that returns the value."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;declare&lt;/span&gt; (indent 1))
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((g (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (symbolp key-vals)
                (symbol-value key-vals)
              key-vals))
         (keys (-slice g 0 nil 2)))
    `(&lt;span style="color: #0000FF;"&gt;labels&lt;/span&gt; ,(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for key in keys
                    collect
                    (list key '() `&lt;span style="color: #D0372D;"&gt;(plist-get &lt;/span&gt;',g  ,key)))
       ,@body)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here is how we use it:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;with-dict&lt;/span&gt; (&lt;span style="color: #006FE0;"&gt;:a&lt;/span&gt; 1 &lt;span style="color: #006FE0;"&gt;:b&lt;/span&gt; 'some-symbol &lt;span style="color: #006FE0;"&gt;:c&lt;/span&gt; 3)
  (&lt;span style="color: #006FE0;"&gt;:b&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We can also use it with variables that hold mappings like this.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((d '(&lt;span style="color: #006FE0;"&gt;:key1&lt;/span&gt; 1 &lt;span style="color: #006FE0;"&gt;:key2&lt;/span&gt; some-other-symbol &lt;span style="color: #006FE0;"&gt;:key3&lt;/span&gt; 3)))
  (&lt;span style="color: #0000FF;"&gt;with-dict&lt;/span&gt; d
    (format &lt;span style="color: #008000;"&gt;"We got %s"&lt;/span&gt; (&lt;span style="color: #006FE0;"&gt;:key2&lt;/span&gt;))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
That is pretty interesting! In case that looks similar to a context manager in Python, now you know where Python got that idea ;)
&lt;/p&gt;

&lt;p&gt;
Another related idea is to let-bind the values to variables withing a scope. We can't use the keywords directly here, so I use some hackery to strip off the colon so it is a regular symbol. That is not quite as nice I guess since you have to remember to remove the : from the symbols in the body of your code.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defmacro&lt;/span&gt; &lt;span style="color: #006699;"&gt;with-plist-vals&lt;/span&gt; (plist &lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; body)
  &lt;span style="color: #036A07;"&gt;"Bind the values of a plist to variables with the name of the keys."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;declare&lt;/span&gt; (indent 1))
  `(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ,(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for key in (-slice plist 0 nil 2)
               for val in (-slice plist 1 nil 2)
               collect (list (intern
                              (substring (symbol-name key) 1))
                             val))
     ,@body))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here is an example usage.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;with-plist-vals&lt;/span&gt; (&lt;span style="color: #006FE0;"&gt;:a&lt;/span&gt; 4 &lt;span style="color: #006FE0;"&gt;:b&lt;/span&gt; 6)
 (* 2 a))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Obviously that is just an alternate syntax for the let statement, but it lets you leverage the plist syntax for multiple purposes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/16/A-callable-plist-data-structure-for-Emacs.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>A new org-mode exporter to Word for scimax</title>
      <link>http://jkitchin.github.io/blog/2017/04/15/A-new-org-mode-exporter-to-Word-for-scimax</link>
      <pubDate>Sat, 15 Apr 2017 16:19:05 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[export]]></category>
      <guid isPermaLink="false">G2OqnAq_1YfN4yGs1NWp5LH4yQc=</guid>
      <description>A new org-mode exporter to Word for scimax</description>
      <content:encoded><![CDATA[


&lt;p&gt;
I am continuing to chip away to getting a reasonable export behavior for org-mode to MS Word. I have previously made some progress with Pandoc &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2015/01/29/Export-org-mode-to-docx-with-citations-via-pandoc/"&gt;here&lt;/a&gt; and &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2015/06/11/ox-pandoc-org-mode-+-org-ref-to-docx-with-bibliographies/"&gt;here&lt;/a&gt;, but those solutions never stuck with me. So here is another go. Here I leverage Pandoc again, but use a path through LaTeX to get citations without modifying the org-ref cite link syntax. The code for this can be found here: &lt;a href="https://github.com/jkitchin/scimax/blob/master/ox-word.el"&gt;https://github.com/jkitchin/scimax/blob/master/ox-word.el&lt;/a&gt;. The gist is you use org-ref like you always do, and you specify the bibliography style for Pandoc like this:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="/media/date-15-04-2017-time-16-06-53.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
You can download other csl files at &lt;a href="https://www.zotero.org/styles"&gt;https://www.zotero.org/styles&lt;/a&gt;. Then you can simply export the org-doc to a Word document with the key-binding C-c C-e w p.
&lt;/p&gt;

&lt;p&gt;
Here is an example document to illustrate the exporter. I have written about data sharing in catalysis &lt;a class='org-ref-reference' href="#kitchin-2015-examp"&gt;kitchin-2015-examp&lt;/a&gt; and surface science &lt;a class='org-ref-reference' href="#kitchin-2015-data-surfac-scien"&gt;kitchin-2015-data-surfac-scien&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Here is an example source block.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%matplotlib inline
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt

plt.plot([1, 2, 3, 4, 5, 6])
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/ob-ipython-b8591826ba9e316738705d03264316a5.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
See Ref. &lt;a href="#fig:line"&gt;fig:line&lt;/a&gt; for example. These do not work. That might require additional pre-processing to replace them with numbers.
&lt;/p&gt;

&lt;p&gt;
Here is the Word document that is generated: &lt;a href="/media/2017-04-15.docx"&gt;2017-04-15.docx&lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;
As a penultimate result it might be ok. The references are reasonably formatted, but not compatible with Endnote, or other bibliography manager software. There are still some issues with Figure numbering and cross-references, but it is not too bad. The main benefit of this seems to be that one source generates HTML and the Word document.
&lt;/p&gt;

&lt;p&gt;

&lt;h1 class='org-ref-bib-h1'&gt;Bibliography&lt;/h1&gt;
&lt;ul class='org-ref-bib'&gt;&lt;li&gt;&lt;a id="kitchin-2015-examp"&gt;[kitchin-2015-examp] Kitchin, Examples of Effective Data Sharing in Scientific Publishing, &lt;i&gt;ACS Catalysis&lt;/i&gt;, &lt;b&gt;5(6)&lt;/b&gt;, 3894-3899 (2015). &lt;a href=" http://dx.doi.org/10.1021/acscatal.5b00538 "&gt;link&lt;/a&gt;. &lt;a href="http://dx.doi.org/10.1021/acscatal.5b00538"&gt;doi&lt;/a&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id="kitchin-2015-data-surfac-scien"&gt;[kitchin-2015-data-surfac-scien] "John Kitchin", Data Sharing in Surface Science, &lt;i&gt;"Surface Science "&lt;/i&gt;, &lt;b&gt;647&lt;/b&gt;, 103-107 (2016). &lt;a href="http://www.sciencedirect.com/science/article/pii/S0039602815001326"&gt;link&lt;/a&gt;. &lt;a href="http://dx.doi.org/10.1016/j.susc.2015.05.007"&gt;doi&lt;/a&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/15/A-new-org-mode-exporter-to-Word-for-scimax.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Autoformatting ordinal numbers and fractions in orgmode</title>
      <link>http://jkitchin.github.io/blog/2017/04/11/Autoformatting-ordinal-numbers-and-fractions-in-orgmode</link>
      <pubDate>Tue, 11 Apr 2017 15:05:56 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[orgmode]]></category>
      <guid isPermaLink="false">aBxgPZr2cpO_yP5zCdWuoaXpm7Y=</guid>
      <description>Autoformatting ordinal numbers and fractions in orgmode</description>
      <content:encoded><![CDATA[


&lt;p&gt;
MS Word has a &lt;i&gt;few&lt;/i&gt; things I like. One of them is the ability to autoformat things to make an ordinal number string like 1st to the superscripted version 1&lt;sup&gt;st&lt;/sup&gt; while you type or a 1/2 to ½.  I thought it would be pretty easy to implement that for org-mode. It turns out it was not so easy!
&lt;/p&gt;

&lt;p&gt;
There does not appear to be a way to specify a regexp pattern as an abbreviation, or an abbrev that starts with a number. What we need for ordinal numbers is to recognize a sequence of numbers followed by "st", "nd", "rd" or "th" followed by a space or punctuation, and then superscript the letters. In case you didn't want the replacement to occur, you should be able to undo it and get back the original string. This addition was a little hard won, so I am sharing the lessons here.
&lt;/p&gt;

&lt;p&gt;
The logic I used is to put a function in the post-self-insert-hook. The function only works in org-mode, when not in a codeblock and when looking back at a regexp that matches a pattern to be replaced. Getting it to undo was trickier than expected. Eventually I worked out that you put an undo boundary in place before the change, and then it seems like you can undo the changes. I created a minor mode so it is easy to toggle this on and off.
&lt;/p&gt;

&lt;p&gt;
Here is the implementation:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defcustom&lt;/span&gt; &lt;span style="color: #BA36A5;"&gt;scimax-autoformat-ordinals&lt;/span&gt; t
  &lt;span style="color: #036A07;"&gt;"Determines if scimax autoformats ordinal numbers."&lt;/span&gt;
  &lt;span style="color: #006FE0;"&gt;:group&lt;/span&gt; 'scimax)

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-org-autoformat-ordinals&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Expand ordinal words to superscripted versions in org-mode.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;1st to 1^{st}.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;2nd to 2^{nd}&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;3rd to 3^{rd}&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;4th to 4^{th}"&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; scimax-autoformat-ordinals
             (eq major-mode 'org-mode)
             (not (org-in-src-block-p))
             (looking-back &lt;span style="color: #008000;"&gt;"&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?3:&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\&amp;lt;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?1:&lt;/span&gt;&lt;span style="color: #008000;"&gt;[0-9]+&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?2:&lt;/span&gt;&lt;span style="color: #008000;"&gt;st&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;nd&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;rd&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;th&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\&amp;gt;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?:&lt;/span&gt;&lt;span style="color: #008000;"&gt;[[:punct:]]&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;[[:space:]]&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;"&lt;/span&gt;
                           (line-beginning-position)))
    (undo-boundary)
    (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt;
      (replace-match &lt;span style="color: #008000;"&gt;"\\1^{\\2}"&lt;/span&gt; nil nil nil 3))))


(&lt;span style="color: #0000FF;"&gt;defcustom&lt;/span&gt; &lt;span style="color: #BA36A5;"&gt;scimax-autoformat-fractions&lt;/span&gt; t
  &lt;span style="color: #036A07;"&gt;"Determines if scimax autoformats fractions."&lt;/span&gt;
  &lt;span style="color: #006FE0;"&gt;:group&lt;/span&gt; 'scimax)


(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-org-autoformat-fractions&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Expand fractions to take up space."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; scimax-autoformat-fractions
             (eq major-mode 'org-mode)
             (not (org-in-src-block-p))
             (looking-back &lt;span style="color: #008000;"&gt;"&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?3:&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\&amp;lt;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(&lt;/span&gt;&lt;span style="color: #008000;"&gt;1/4&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;1/2&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;3/4&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\&amp;gt;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?:&lt;/span&gt;&lt;span style="color: #008000;"&gt;[[:punct:]]&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;[[:space:]]&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;"&lt;/span&gt;
                           (line-beginning-position)))
    (undo-boundary)
    (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt;
      (replace-match (cdr (assoc (match-string 3) '((&lt;span style="color: #008000;"&gt;"1/4"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"&amp;#188;"&lt;/span&gt;)
                                                    (&lt;span style="color: #008000;"&gt;"1/2"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"&amp;#189;"&lt;/span&gt;)
                                                    (&lt;span style="color: #008000;"&gt;"3/4"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"&amp;#190;"&lt;/span&gt;))))
                     nil nil nil 3))))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-org-autoformat&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Autoformat functions."&lt;/span&gt;
  (scimax-org-autoformat-ordinals)
  (scimax-org-autoformat-fractions))

(&lt;span style="color: #0000FF;"&gt;define-minor-mode&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-autoformat-mode&lt;/span&gt;
  &lt;span style="color: #036A07;"&gt;"Toggle `&lt;/span&gt;&lt;span style="color: #D0372D;"&gt;scimax-autoformat-mode&lt;/span&gt;&lt;span style="color: #036A07;"&gt;'.  Converts 1st to 1^{st} as you type."&lt;/span&gt;
  &lt;span style="color: #006FE0;"&gt;:init-value&lt;/span&gt; nil
  &lt;span style="color: #006FE0;"&gt;:lighter&lt;/span&gt; (&lt;span style="color: #008000;"&gt;" om"&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; scimax-ordinal-mode
      (add-hook 'post-self-insert-hook #'scimax-org-autoformat nil 'local)
    (remove-hook 'post-self-insert-hook #'scimax-org-autoformat 'local)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This is now a feature in scimax. This marks the 500&lt;sup&gt;th&lt;/sup&gt; blog post! That is ½ way to 1000. At the current rate of posting, it will be at least 5 years until I hit that!
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/11/Autoformatting-ordinal-numbers-and-fractions-in-orgmode.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>A better return in org-mode</title>
      <link>http://jkitchin.github.io/blog/2017/04/09/A-better-return-in-org-mode</link>
      <pubDate>Sun, 09 Apr 2017 10:56:42 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[orgmode]]></category>
      <guid isPermaLink="false">0iu8sLfQQWT9g84NGKEsM4n2ffg=</guid>
      <description>A better return in org-mode</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org774898d"&gt;1. a subheading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4f302f8"&gt;2. another Subheading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Over on &lt;a href="http://emacs.stackexchange.com/questions/24574/org-mode-default-to-alt-enter-for-bullets"&gt;Stackoverflow&lt;/a&gt; someone wanted a better return in org-mode. They wanted return to add items in a list (instead of M-Ret). Someone posted a partial solution, and here I improve on it to add new items to lists, new headings after a heading, and new rows to tables. In each case, a double return on an empty item, headline or table row will delete that line, and terminate the list, headlines or table. You can still use M-Ret, and this function falls through to org-return like it did before. You can use a prefix arg to get a regular return if you want one (e.g. you want to press enter on a headline to push it down).
&lt;/p&gt;

&lt;p&gt;
Here is the function. Give it a try. It is a small but helpful addition I think. I have not used it for long, so if you come across issues leave a comment!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;org-inlinetask&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax/org-return&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;optional&lt;/span&gt; ignore)
  &lt;span style="color: #036A07;"&gt;"Add new list item, heading or table row with RET.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;A double return on an empty element deletes it.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;Use a prefix arg to get regular RET. "&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt; &lt;span style="color: #008000;"&gt;"P"&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; ignore
      (org-return)
    (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;

     ((eq 'line-break (car (org-element-context)))
      (org-return-indent))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Open links like usual, unless point is at the end of a line.&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;and if at beginning of line, just press enter.&lt;/span&gt;
     ((&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (eq 'link (car (org-element-context))) (not (eolp)))
          (bolp))
      (org-return))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;It doesn't make sense to add headings in inline tasks. Thanks Anders&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Johansson!&lt;/span&gt;
     ((org-inlinetask-in-task-p)
      (org-return))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;checkboxes too&lt;/span&gt;
     ((org-at-item-checkbox-p)
      (org-insert-todo-heading nil))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;lists end with two blank lines, so we need to make sure we are also not&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;at the beginning of a line to avoid a loop where a new entry gets&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;created with only one blank line.&lt;/span&gt;
     ((org-in-item-p)
      (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt; (beginning-of-line) (org-element-property &lt;span style="color: #006FE0;"&gt;:contents-begin&lt;/span&gt; (org-element-context)))
          (org-insert-heading)
        (beginning-of-line)
        (delete-region (line-beginning-position) (line-end-position))
        (org-return)))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;org-heading&lt;/span&gt;
     ((org-at-heading-p)
      (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (not (string= &lt;span style="color: #008000;"&gt;""&lt;/span&gt; (org-element-property &lt;span style="color: #006FE0;"&gt;:title&lt;/span&gt; (org-element-context))))
          (&lt;span style="color: #0000FF;"&gt;progn&lt;/span&gt; (org-end-of-meta-data)
                 (org-insert-heading-respect-content)
                 (outline-show-entry))
        (beginning-of-line)
        (&lt;span style="color: #0000FF;"&gt;setf&lt;/span&gt; (buffer-substring
               (line-beginning-position) (line-end-position)) &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;tables&lt;/span&gt;
     ((org-at-table-p)
      (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (-any?
           (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (x) (not (string= &lt;span style="color: #008000;"&gt;""&lt;/span&gt; x)))
           (nth
            (- (org-table-current-dline) 1)
            (org-table-to-lisp)))
          (org-return)
        &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;empty row&lt;/span&gt;
        (beginning-of-line)
        (&lt;span style="color: #0000FF;"&gt;setf&lt;/span&gt; (buffer-substring
               (line-beginning-position) (line-end-position)) &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)
        (org-return)))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;fall-through case&lt;/span&gt;
     (t
      (org-return)))))


(define-key org-mode-map (kbd &lt;span style="color: #008000;"&gt;"RET"&lt;/span&gt;)
  'scimax/org-return)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here are a few tests:
&lt;/p&gt;


&lt;ol class="org-ol"&gt;
&lt;li&gt;numbered item&lt;/li&gt;
&lt;li&gt;second item
&lt;ol class="org-ol"&gt;
&lt;li&gt;nested number&lt;/li&gt;
&lt;li&gt;second number&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;unordered 1&lt;/li&gt;
&lt;li&gt;unordered 2
&lt;ul class="org-ul"&gt;
&lt;li&gt;nested&lt;/li&gt;
&lt;li&gt;nested 2
&lt;ul class="org-ul"&gt;
&lt;li&gt;nested with link: &lt;a href="http://emacs.stackexchange.com"&gt;http://emacs.stackexchange.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class="org-ul"&gt;
&lt;li class="off"&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; check 1&lt;/li&gt;
&lt;li class="off"&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; check 2&lt;/li&gt;
&lt;li class="off"&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; check 3&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="inlinetask"&gt;
&lt;b&gt;an inline task&lt;/b&gt;&lt;br /&gt;
&lt;p&gt;
With some content
&lt;/p&gt;
&lt;/div&gt;


&lt;div id="outline-container-org774898d" class="outline-2"&gt;
&lt;h2 id="org774898d"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; a subheading&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4f302f8" class="outline-2"&gt;
&lt;h2 id="org4f302f8"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; another Subheading&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/09/A-better-return-in-org-mode.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Object-oriented font-locking in emacs-lisp</title>
      <link>http://jkitchin.github.io/blog/2017/04/07/Object-oriented-font-locking-in-emacs-lisp</link>
      <pubDate>Fri, 07 Apr 2017 15:00:54 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[fontlock]]></category>
      <guid isPermaLink="false">1WygBs0ML7IO8fyyXao5G7m0YWQ=</guid>
      <description>Object-oriented font-locking in emacs-lisp</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga752041"&gt;1. Font-locking the elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4b6ed31"&gt;2. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I have been interested in functional text for a long time. With functional text you can read it, but also interact with it &lt;a class='org-ref-reference' href="#kitchin-2015-examp"&gt;kitchin-2015-examp&lt;/a&gt;. Lately I have been thinking about how to use some features of object-oriented programming to functional text. The premise is to use an object hierarchy to encapsulate some knowledge, and provide &lt;i&gt;functionality&lt;/i&gt; on the objects. We can use inheritance to customize some of this knowledge and functionality.
&lt;/p&gt;

&lt;p&gt;
The example I will work out here is to provide functional text for chemical elements. The goal is to define some objects that represent elements, and construct font-lock rules from the objects to make the text functional in Emacs. Functional here means it stands out so we know there is something special about it, it has a tooltip to get some information (like what type of element it is, and its atomic mass), and it is clickable to get more functionality.
&lt;/p&gt;

&lt;p&gt;
This post will make a lot more sense in this video: &lt;a href="https://www.youtube.com/watch?v=IWxCj5cr8rY"&gt;https://www.youtube.com/watch?v=IWxCj5cr8rY&lt;/a&gt;
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/IWxCj5cr8rY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
First, we create a base class of an Element. I use an instance tracker for this to make book keeping easy later. The base class will have a name, synonyms for the name, and a default face to color it. We define a few methods to get an atomic mass and search google for the element. Finally, we provide a function to generate a tooltip, and a font-lock rule.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defvar&lt;/span&gt; &lt;span style="color: #BA36A5;"&gt;atomic-masses&lt;/span&gt; '((&lt;span style="color: #008000;"&gt;"Hydrogen"&lt;/span&gt; . 1.008)
                        (&lt;span style="color: #008000;"&gt;"Argon"&lt;/span&gt; . 39.948)
                        (&lt;span style="color: #008000;"&gt;"Sodium"&lt;/span&gt; . 22.989)
                        (&lt;span style="color: #008000;"&gt;"Palladium"&lt;/span&gt; . 106.42))
  &lt;span style="color: #036A07;"&gt;"a-list of atomic masses."&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defvar&lt;/span&gt; &lt;span style="color: #BA36A5;"&gt;elements&lt;/span&gt; '() &lt;span style="color: #036A07;"&gt;"List of known elements"&lt;/span&gt;)
(&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; elements '()) &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;this is to start over&lt;/span&gt;

(&lt;span style="color: #0000FF;"&gt;defclass&lt;/span&gt; &lt;span style="color: #6434A3;"&gt;element&lt;/span&gt; (eieio-instance-tracker)
  ((tracking-symbol &lt;span style="color: #006FE0;"&gt;:initform&lt;/span&gt; elements
                    &lt;span style="color: #006FE0;"&gt;:documentation&lt;/span&gt; &lt;span style="color: #036A07;"&gt;"Variable that holds all class instances."&lt;/span&gt;)
   (name &lt;span style="color: #006FE0;"&gt;:initarg&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt;
         &lt;span style="color: #006FE0;"&gt;:documentation&lt;/span&gt; &lt;span style="color: #036A07;"&gt;"The name of the element"&lt;/span&gt;)
   (synonyms &lt;span style="color: #006FE0;"&gt;:initarg&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:synonyms&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:initform&lt;/span&gt; '()
             &lt;span style="color: #006FE0;"&gt;:documentation&lt;/span&gt; &lt;span style="color: #036A07;"&gt;"List of regular expressions that match the element."&lt;/span&gt;)
   (face &lt;span style="color: #006FE0;"&gt;:initarg&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:initform&lt;/span&gt; 'font-lock-type-face
         &lt;span style="color: #006FE0;"&gt;:documentation&lt;/span&gt; &lt;span style="color: #036A07;"&gt;"The face to use with font-lock."&lt;/span&gt;))
  &lt;span style="color: #036A07;"&gt;"Base class for a chemical element."&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;element-atomic-mass&lt;/span&gt; ((x element))
  &lt;span style="color: #036A07;"&gt;"Return atomic mass from `&lt;/span&gt;&lt;span style="color: #D0372D;"&gt;atomic-masses&lt;/span&gt;&lt;span style="color: #036A07;"&gt;'."&lt;/span&gt;
  (cdr (assoc (&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt;) atomic-masses)))

(&lt;span style="color: #0000FF;"&gt;defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;element-help-echo&lt;/span&gt; ((x element))
  &lt;span style="color: #036A07;"&gt;"A tooltip for the element.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;It will look like class (inherited classes) mass=atomic-mass"&lt;/span&gt;
  (format &lt;span style="color: #008000;"&gt;"%s %s: mass=%s"&lt;/span&gt;
          (eieio-object-class x)
          (mapcar 'eieio-class-name (eieio-class-parents (eieio-object-class x)))
          (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; (element-atomic-mass x) &lt;span style="color: #008000;"&gt;"unknown"&lt;/span&gt;)))

(&lt;span style="color: #0000FF;"&gt;defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;element-search&lt;/span&gt; ((x element))
  &lt;span style="color: #036A07;"&gt;"Search google for the element"&lt;/span&gt;
  (google-this-string nil (&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt;) t))

(&lt;span style="color: #0000FF;"&gt;defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;element-font-lock-rule&lt;/span&gt; ((x element))
  &lt;span style="color: #036A07;"&gt;"Return font-lock rule for the element."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((map (make-sparse-keymap)))
    (define-key map [mouse-1]
      (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; ()
        &lt;span style="color: #036A07;"&gt;"Construct the object and run `&lt;/span&gt;&lt;span style="color: #D0372D;"&gt;element-search&lt;/span&gt;&lt;span style="color: #036A07;"&gt;' on it."&lt;/span&gt;
        (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
        (element-search
         (eieio-instance-tracker-find
          (get-text-property (point) 'element-name)
          &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt; 'elements))))

    (list
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Construct the pattern to match&lt;/span&gt;
     (rx-to-string `(: bow
                       (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt;  ,(&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt;)
                            ,@(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for sy in (&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:synonyms&lt;/span&gt;)
                                    collect `(regexp ,sy)))
                       eow))
     0  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;font-lock the whole match&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;These are the properties to put on the matches&lt;/span&gt;
     `(&lt;span style="color: #0000FF;"&gt;quote&lt;/span&gt; (face ,(&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt;)
                   element-name ,(&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt;)
                   local-map ,map
                   mouse-face 'highlight
                   help-echo ,(element-help-echo x))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now, we can define some sub-classes. These are families of elements. For a metal, we change the face. For noble gases, we override the help-echo function, and for alkali metals we override the search function. The point is that we can customize the behavior for different classes.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defclass&lt;/span&gt; &lt;span style="color: #6434A3;"&gt;metal&lt;/span&gt; (element)
  ((face &lt;span style="color: #006FE0;"&gt;:initform&lt;/span&gt; '(&lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; &lt;span style="color: #008000;"&gt;"orange"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:underline&lt;/span&gt; t)))
  &lt;span style="color: #036A07;"&gt;"Metal"&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defclass&lt;/span&gt; &lt;span style="color: #6434A3;"&gt;noble-gas&lt;/span&gt; (element)
  ()
  &lt;span style="color: #036A07;"&gt;"A noble gas"&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;element-help-echo&lt;/span&gt; ((x noble-gas))
  &lt;span style="color: #036A07;"&gt;"I am not a common element."&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defclass&lt;/span&gt; &lt;span style="color: #6434A3;"&gt;alkali&lt;/span&gt; (element metal)
  ()
  &lt;span style="color: #036A07;"&gt;"Alkali metal"&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;element-search&lt;/span&gt; ((x alkali))
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((visible-bell t))
    (beep)
    (message &lt;span style="color: #008000;"&gt;"You clicked on an alkali metal: %s."&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;oref&lt;/span&gt; x &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt;))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now we can define some elements. These are all instances of each class. For some, we define synonyms, and alternate appearances. Note the synonyms are regular expressions.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(element &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Hydrogen"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:synonyms&lt;/span&gt; '(&lt;span style="color: #008000;"&gt;"H"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"[hH]ydrogen"&lt;/span&gt;))

(noble-gas &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Argon"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:synonyms&lt;/span&gt; '(&lt;span style="color: #008000;"&gt;"Ar"&lt;/span&gt;))

(alkali &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Sodium"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:synonyms&lt;/span&gt; '(&lt;span style="color: #008000;"&gt;"Na"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"[nN]atrium"&lt;/span&gt;))
(alkali &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Potassium"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:synonyms&lt;/span&gt; '(&lt;span style="color: #008000;"&gt;"K"&lt;/span&gt;) &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt; '(&lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; &lt;span style="color: #008000;"&gt;"red"&lt;/span&gt;))

(metal &lt;span style="color: #006FE0;"&gt;:name&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Palladium"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The instance tracker shows us the defined objects.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;elements
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga752041" class="outline-2"&gt;
&lt;h2 id="orga752041"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Font-locking the elements&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Here we generate font-lock rules from the set of objects. Each object will return its font-lock rule, so we just map over each object to get the list of rules.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(font-lock-add-keywords
 nil
 (mapcar 'element-font-lock-rule elements))

(font-lock-fontify-buffer)
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
Now any time we have Palladium or Hydrogen it will be highlighted.  And Sodium and Argon.
&lt;/p&gt;

&lt;p&gt;
Here are some synonyms: hydrogen H Natrium natrium.
&lt;/p&gt;

&lt;p&gt;
Potassium has a different color than Na.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4b6ed31" class="outline-2"&gt;
&lt;h2 id="org4b6ed31"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
This seems like a pretty useful way to encapsulate functionality for functional text. Clearly most of the work should go in the base class, and the inheritance model, so you do not have to repeat things unnecessarily. Some features are missing, like conveniently adding synonyms and regenerating the font-lock rules. It is also the case that we do not persist these objects. They could be written to disk so that they can be reloaded later.
&lt;/p&gt;

&lt;p&gt;
The actions you can use on a highlighted word are pretty limited in this implementation. It would be nice if you got a menu of options that was user extendable and dynamic. Either a popup menu, or a hydra would be fine.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/07/Object-oriented-font-locking-in-emacs-lisp.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>A better defun for emacs-lisp</title>
      <link>http://jkitchin.github.io/blog/2017/03/22/A-better-defun-for-emacs-lisp</link>
      <pubDate>Wed, 22 Mar 2017 16:30:33 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[macro]]></category>
      <category><![CDATA[elisp]]></category>
      <guid isPermaLink="false">RoQ2wpVtnKbGMQqdpFrDLjXCPWw=</guid>
      <description>A better defun for emacs-lisp</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org56963be"&gt;1. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I have been thinking of better ways to write code that is more likely to have decent docstrings that are up to date, and maybe that enable automatic validation. One strategy is to keep documentation and code together, and by together I mean &lt;i&gt;close together&lt;/i&gt;. The closer the better.  I made some interesting progress in the &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/03/19/A-Hy-macro-for-defining-functions-with-docstrings-on-each-argument/"&gt;last post&lt;/a&gt;, where I used a macro to let me put argument specific documentation in the same place that the argument is defined. Here I expand the idea to also provide argument default values, and validation code where the argument is defined inside the function, in addition to generating docstrings. This post is written in Emacs-lisp, mostly because I am more familiar with the macro language. The idea should apply to other lisps too.
&lt;/p&gt;

&lt;p&gt;
Let's consider this prototypical, vanilla function definition, usage, and docstring.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;f1&lt;/span&gt; (arg1 arg2)
  &lt;span style="color: #036A07;"&gt;"Add two numbers."&lt;/span&gt;
  (+ arg1 arg2))

&lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;usage&lt;/span&gt;
(f1 3 4)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here is what the help looks like from emacs.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(describe-function 'f1)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It is clear I was lazy in writing the docstring; it does not even mention the arguments. There is also no validation of the arguments so if you pass a string and a number, you will get an error. There are no defaults either, so you have to provide both arguments. It seems like there could be significant room for improvement. Of course, I could bite the bullet and write a better function like this one:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;f1a&lt;/span&gt; (arg1 &lt;span style="color: #6434A3;"&gt;&amp;amp;optional&lt;/span&gt; arg2)
  &lt;span style="color: #036A07;"&gt;"Add ARG1 and ARG2 together.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;ARG1 and  ARG2 should both be numbers."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (null arg2) (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; arg2 2))
  (&lt;span style="color: #0000FF;"&gt;unless&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (numberp arg1) (numberp arg2)) (&lt;span style="color: #ff0000; font-weight: bold;"&gt;error&lt;/span&gt; &lt;span style="color: #008000;"&gt;"arg1 and arg2 should both be numbers"&lt;/span&gt;))
  (+ arg1 arg2))

(list (f1a 3 4) (f1a 3))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Yes, I could do that, but it is tedious to do it all the time. And it still leaves something to be desired for me. The docstring does not say what the default value is for example, and that is hard-coded in the code, i.e. not introspectible until you look at the code.  Next we consider an alternative way to write the function. Compare that to this function definition, usage and documentation. The function definition is a little more verbose. Providing documentation, defaults and validation code in any form would make it that way no matter what.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defn&lt;/span&gt; f2 ((arg1 &lt;span style="color: #008000;"&gt;"A number"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:validate&lt;/span&gt; numberp)
          (arg2 &lt;span style="color: #008000;"&gt;"A number"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:validate&lt;/span&gt; numberp &lt;span style="color: #006FE0;"&gt;:default&lt;/span&gt; 2))
  &lt;span style="color: #008000;"&gt;"Add the arguments."&lt;/span&gt;
  (+ arg1 arg2))

&lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;usage&lt;/span&gt;
(list (f2 3 4) (f2 3))
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(describe-function 'f2)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The documentation is built up from the information in the function definition, in a form that is mostly consistent with emacs-lisp documentation standards. &lt;code&gt;defn&lt;/code&gt; is not a regular emacs-lisp function; it is a macro I developed to generate the function code. It turned out to be long, but the gist of it is that before defining the function I loop through the arguments and collect the docstrings, along with any information about default values and/or validation functions. Then I build up the list of arguments to put in the function. Then if any default values are set, I generate some code to set those values if they are not set in the function call, and finally a similar block of validation code. At the end, I construct the defun and return it. You can check out the code if you want here: &lt;a href="https://github.com/jkitchin/scimax/blob/master/scimax-macros.el"&gt;https://github.com/jkitchin/scimax/blob/master/scimax-macros.el&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Let's take a look at what this code expands to.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(macroexpand-1
 '(defn f2 ((arg1 &lt;span style="color: #008000;"&gt;"A number"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:validate&lt;/span&gt; numberp)
            (arg2 &lt;span style="color: #008000;"&gt;"A number"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:validate&lt;/span&gt; numberp &lt;span style="color: #006FE0;"&gt;:default&lt;/span&gt; 2))
    &lt;span style="color: #008000;"&gt;"Add the arguments."&lt;/span&gt;
    (+ arg1 arg2)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You can see it expands to a regular defun, with a generated docstring, generated default settings code block, and generated validation code. Pretty nice.
&lt;/p&gt;

&lt;p&gt;
Let's see what happens with a function that fails the validation. We should get an error. Here we capture the error so we can see it in the post.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;condition-case&lt;/span&gt; err
    (f2 &lt;span style="color: #008000;"&gt;"oak"&lt;/span&gt;)
  (&lt;span style="color: #ff0000; font-weight: bold;"&gt;error&lt;/span&gt;
   (error-message-string err)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
So we even get a useful error message when the wrong type of argument is provided. Compare that to the error message from the original version of this function. It tells us we got the wrong type, but not which argument.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;condition-case&lt;/span&gt; err
    (f1 &lt;span style="color: #008000;"&gt;"oak"&lt;/span&gt; 4)
  (&lt;span style="color: #ff0000; font-weight: bold;"&gt;error&lt;/span&gt;
   (error-message-string err)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
One last example to check out the &amp;amp;rest argument, with validation that every arg is a number.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defn&lt;/span&gt; f4 ((rarg &lt;span style="color: #006FE0;"&gt;:rest&lt;/span&gt;
                &lt;span style="color: #006FE0;"&gt;:validate&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (x)
                            (-all-p 'identity (mapcar 'numberp x)))))
  &lt;span style="color: #008000;"&gt;"multiply all the arguments."&lt;/span&gt;
  (apply '* rarg))

(f4 1 2 3)
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;condition-case&lt;/span&gt; err
    (f4 &lt;span style="color: #008000;"&gt;"oak"&lt;/span&gt; 4)
  (&lt;span style="color: #ff0000; font-weight: bold;"&gt;error&lt;/span&gt;
   (error-message-string err)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(describe-function 'f4)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
That looks ok too.
&lt;/p&gt;

&lt;div id="outline-container-org56963be" class="outline-2"&gt;
&lt;h2 id="org56963be"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
The motivation for this was to help me write better code with better documentation. Better code in the sense that it can provide run-time validation, with better feedback, and automatic documentation, including that there is none if that is the case. It is basically compatible with the regular defun, but enhances what kind of documentation is possible with less work on my part. I think it will make it easier to keep documentation in sync, since the argument documentation would be kept near the argument, and you can build in validation if you want to.
&lt;/p&gt;

&lt;p&gt;
It is no news to lispers that macros are good for this kind of application.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/03/22/A-better-defun-for-emacs-lisp.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Exporting org-mode to Jupyter notebooks</title>
      <link>http://jkitchin.github.io/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks</link>
      <pubDate>Sat, 21 Jan 2017 19:51:23 EST</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[python]]></category>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[jupyter]]></category>
      <guid isPermaLink="false">zZOrvYL2jKCFugy8FnPHFwU_I_Y=</guid>
      <description>Exporting org-mode to Jupyter notebooks</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orge344b68"&gt;1. Solve a nonlinear problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgdcea869"&gt;2. Benefits of export to ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org26076b0"&gt;3. Limitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgfe4c8f7"&gt;4. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I am going to use Jupyter notebooks to teach from this semester. I really dislike preparing notebooks though. A browser is a really poor editor, and I really dislike Markdown. Notebooks do not seem to have any real structure in them, e.g. the collapsible outline that I am used to in org-mode, so for long notebooks, it is difficult to get a sense for the structure. I am anticipating spending up to 80 hours preparing notebooks this semester, so today I worked out some code to export org-mode to an ipython notebook! 
&lt;/p&gt;

&lt;p&gt;
This will let me use the power tools I am accustomed to for the creation of IPython notebooks for my students, and perhaps others who do not use org-mode. 
&lt;/p&gt;

&lt;p&gt;
Jupyter notebooks are just json files, so all we need to do is generate it from an org document. The basic strategy was to build up a lisp data structure that represents the notebook and then just convert that data structure to json. I split the document up into sequential markdown and code cells, and then encode those in the format required for the notebook (json).
&lt;/p&gt;

&lt;p&gt;
So, here is an example of what can be easily written in org-mode, posted to this blog, and exported to an IPython notebook, all from one org-document.
&lt;/p&gt;

&lt;p&gt;
Check out the notebook:  &lt;a href="/media/exporting-orgmode-to-ipynb.ipynb"&gt;exporting-orgmode-to-ipynb.ipynb&lt;/a&gt; . 
&lt;/p&gt;

&lt;div id="outline-container-orge344b68" class="outline-2"&gt;
&lt;h2 id="orge344b68"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Solve a nonlinear problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Consider the equation \(x^2 = 4\). Find a solution to it in Python using a nonlinear solver. 
&lt;/p&gt;

&lt;p&gt;
To do that, we need to define an objective function that will be equal to zero at the solution. Here is the function:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;objective&lt;/span&gt;(x):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; x**2 - 4
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Next, we use fsolve with an initial guess. We get fsolve from &lt;a href="https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve"&gt;scipy.optimize&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; scipy.optimize &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; fsolve

&lt;span style="color: #BA36A5;"&gt;ans&lt;/span&gt; = fsolve(objective, 3)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[ 2.]
&lt;/pre&gt;

&lt;p&gt;
That should have been an obvious answer. The answer is in brackets because fsolve returns an array. In the next block we will unpack the solution into the answer using the comma operator. Also, we can see that using a different guess leads to a different answer. There are, of course, two answers: \(x = \pm 2\)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;ans, = fsolve(objective, -3)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
-2.0
&lt;/pre&gt;

&lt;p&gt;
Now you see we get a float answer!
&lt;/p&gt;

&lt;p&gt;
Here are some other ways to get a float:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #BA36A5;"&gt;ans&lt;/span&gt; = fsolve(objective, -3)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;float&lt;/span&gt;(ans))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans[0])
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
-2.0000000000000084
-2.0
&lt;/pre&gt;

&lt;p&gt;
It is worth noting from the first result that fsolve is iterative and stops when it reaches zero within a tolerance. That is why it is not exactly -2.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdcea869" class="outline-2"&gt;
&lt;h2 id="orgdcea869"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Benefits of export to ipynb&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;I can use org-mode&lt;/li&gt;
&lt;li&gt;And emacs&lt;/li&gt;
&lt;li&gt;and ipynb for teaching.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The export supports org-markup: &lt;b&gt;bold&lt;/b&gt;, &lt;i&gt;italic&lt;/i&gt;, &lt;span class="underline"&gt;underlined&lt;/span&gt;, and ~~strike~~.
&lt;/p&gt;

&lt;p&gt;
We can use tables:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;
&lt;caption class="t-above"&gt;&lt;span class="table-number"&gt;Table 1:&lt;/span&gt; A table of squares.&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;x&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
We can make plots.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;t&lt;/span&gt; = np.linspace(0, 2 * np.pi)

&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = np.cos(t)
&lt;span style="color: #BA36A5;"&gt;y&lt;/span&gt; = np.sin(t)

&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
plt.plot(x, y)
plt.axis(&lt;span style="color: #008000;"&gt;'equal'&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #008000;"&gt;'x'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'y'&lt;/span&gt;)
plt.savefig(&lt;span style="color: #008000;"&gt;'circle.png'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/circle.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
Even include HTML:
&amp;lt;font color="red"&amp;gt;Pay special attention to the axis labels!&amp;lt;/font&amp;gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org26076b0" class="outline-2"&gt;
&lt;h2 id="org26076b0"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Limitations&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Only supports iPython blocks&lt;/li&gt;
&lt;li&gt;Does not do inline images in results&lt;/li&gt;
&lt;li&gt;Will not support src-block variables&lt;/li&gt;
&lt;li&gt;Currently only supports vanilla output results&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgfe4c8f7" class="outline-2"&gt;
&lt;h2 id="orgfe4c8f7"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
The code that does this is here: &lt;a href="/media/ox-ipynb.el"&gt;ox-ipynb.el&lt;/a&gt; . After I use it a while I will put it in scimax. There are some tricks in it to fix up some markdown export of latex fragments and links with no descriptions.
&lt;/p&gt;

&lt;p&gt;
I just run this command in Emacs to get the notebook. Even it renders reasonably in the notebook.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(export-ipynb-buffer)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Overall, this looks extremely promising to develop lecture notes and assignments in org-mode, but export them to Ipython notebooks for the students.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>A simple emacs-lisp interface to CRUD operations in mongodb</title>
      <link>http://jkitchin.github.io/blog/2017/01/16/A-simple-emacs-lisp-interface-to-CRUD-operations-in-mongodb</link>
      <pubDate>Mon, 16 Jan 2017 09:44:16 EST</pubDate>
      <category><![CDATA[database]]></category>
      <category><![CDATA[mongodb]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[emacslisp]]></category>
      <guid isPermaLink="false">RYjjiQpLtNAakQHa8WQBr3x1-_s=</guid>
      <description>A simple emacs-lisp interface to CRUD operations in mongodb</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgf43163b"&gt;1. Inserting entries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbec2cf8"&gt;2. Finding a document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7279625"&gt;3. Updating an entry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org769cf9d"&gt;4. Deleting a document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0cb9437"&gt;5. Generic commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org512e4fe"&gt;6. A MongoDB contacts database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org97edcbc"&gt;7. Text searching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org04fa0df"&gt;8. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In this &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/15/Querying-a-MongoDB-bibtex-database-with-Python-and-emacs-lisp/"&gt;post&lt;/a&gt; I showed that MongoDB is pretty easy to use for simple database applications. I showed a way to get data out of the database that is native to Emacs, but to use Mongo in emacs applications comfortably, it would be really helpful to be able to create, read, update and delete (CRUD) entries. There is a minimal interface to mongodb for emacs-lisp here: &lt;a href="https://github.com/m2ym/mongo-el"&gt;https://github.com/m2ym/mongo-el&lt;/a&gt;. From what I can see, it seems limited to simple, single queries, and it is written with advanced features of emacs-lisp I do not understand enough to extend it. In the last post, I showed an easy way to use mongoexport to get data from a query out of a mongo database. Here I explore a similar approach to round out the CRUD (create, read, update and delete) operations for using emacs-lisp to work with mongodb. This will enable Emacs to easily use MongoDB in applications.
&lt;/p&gt;

&lt;p&gt;
We use the mongo cli with the &amp;#x2013;eval option, which allows you to run commands on the database. The basic idea is to generate the json we need from a lisp data structure, and use that json in mongo commands as needed. This sounds simple, but below you will see there are plenty of corners to take care of.
&lt;/p&gt;

&lt;p&gt;
The goal here is to get something that is pretty functional. It will not be able to support all the capabilities of MongoDB and the options available in the cli.
&lt;/p&gt;

&lt;div id="outline-container-orgf43163b" class="outline-2"&gt;
&lt;h2 id="orgf43163b"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Inserting entries&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Here we insert a document into the contacts collection of the contacts database. As in the Python example we considered earlier, this database is automatically created when we run this command. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;json&lt;/span&gt;))
(&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((json (json-encode '((first-name . &lt;span style="color: #008000;"&gt;"John"&lt;/span&gt;)
                            (last-name . &lt;span style="color: #008000;"&gt;"Kitchin"&lt;/span&gt;)
                            (email . &lt;span style="color: #008000;"&gt;"jkitchin@cmu.edu"&lt;/span&gt;))))
       (cmd (format &lt;span style="color: #008000;"&gt;"mongo 127.0.0.1/contacts --quiet --eval 'db.contacts.insert(%s)'"&lt;/span&gt;
                    json)))
  (shell-command-to-string cmd))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
json
&lt;/pre&gt;

&lt;p&gt;
Here is a function we can use for inserting, and as you can see it works for multiple inserts too. There is a limit on how long the json string can be for this, so you cannot add too many entries at once with this. I do not know what the limit is, and suspect it is related to using a shell command. When this succeeds there is data returned about what happened, which we try to get in lisp form. Also, I noticed I had to do a little bit of escaping, especially for entries containing a single quote, which messes up the quoting on the shell command, and for non-ascii characters which the shell did not handle well. Maybe this could be avoided with a file-based approach, or if we used a pipe to a process.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-insert&lt;/span&gt; (db collection document)
  &lt;span style="color: #036A07;"&gt;"Insert into DB.COLLECTION the DOCUMENT.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;DOCUMENT will be some lisp structure that is converted to json."&lt;/span&gt;
  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;we have to escape quote any single quotes. This came from&lt;/span&gt;
  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;http://stackoverflow.com/questions/1250079/how-to-escape-single-quotes-within-single-quoted-strings&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((json (replace-regexp-in-string &lt;span style="color: #008000;"&gt;"'"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"'\"'\"'"&lt;/span&gt; (json-encode document)))
         &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;it seems utf-8 characters may cause issues. Let's just remove them.&lt;/span&gt;
         (json (replace-regexp-in-string &lt;span style="color: #008000;"&gt;"[&lt;/span&gt;&lt;span style="color: #008000;"&gt;^&lt;/span&gt;&lt;span style="color: #008000;"&gt;[:ascii:]]"&lt;/span&gt; &lt;span style="color: #008000;"&gt;""&lt;/span&gt; json))
         (cmd (format &lt;span style="color: #008000;"&gt;"mongo %s --quiet --eval 'db.%s.insert(%s)'"&lt;/span&gt;
                      db collection
                      json))
         (output (shell-command-to-string cmd)))
    (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
     ((string-match &lt;span style="color: #008000;"&gt;"BulkWriteResult("&lt;/span&gt; output)
      (json-read-from-string (substring output 16 -2)))
     ((string-match &lt;span style="color: #008000;"&gt;"WriteResult("&lt;/span&gt; output)
      (json-read-from-string (substring output 12 -2)))
     (t
      output))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
mongo-insert
&lt;/pre&gt;

&lt;p&gt;
Here it is in action.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-insert &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
              '(((first-name . &lt;span style="color: #008000;"&gt;"John"&lt;/span&gt;)
                 (last-name . &lt;span style="color: #008000;"&gt;"Kitchin"&lt;/span&gt;)
                 (email . &lt;span style="color: #008000;"&gt;"jkitchin@cmu.edu"&lt;/span&gt;))
                ((first-name . &lt;span style="color: #008000;"&gt;"Someone"&lt;/span&gt;)
                 (last-name . &lt;span style="color: #008000;"&gt;"Else"&lt;/span&gt;)
                 (&lt;span style="color: #008000;"&gt;"email"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"someone@out.there"&lt;/span&gt;))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
((writeErrors . []) (writeConcernErrors . []) (nInserted . 2) (nUpserted . 0) (nMatched . 0) (nModified . 0) (nRemoved . 0) (upserted . []))
&lt;/pre&gt;

&lt;p&gt;
Seems like an ok way to get data from Emacs into a Mongo DB, and we get lisp data returned telling us what happened.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbec2cf8" class="outline-2"&gt;
&lt;h2 id="orgbec2cf8"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Finding a document&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
To update documents we need to find them. We would like to find a document by the _id, but we have a small dilemma. The json we need for that needs to look like: {"_id": ObjectId("587babfaef131d0d4603b3ad")}, where the ObjectId is not quoted. The json library does not seem to be able to do that. So, we have to modify our find code to do this. This is possible by manipulating the json string after it is generated with regular expression replacement. It feels hacky, and hopefully there are not many more examples of that. If there are, we will need another approach to generating the json data. Here is the modified find function, also with the projection option. Here is another place we have to tread somewhat lightly with the _id, in this case we have to requote it so that it can be read by emacs. It might make sense to just replace it with the quoted _id string, rather than the ObjectId call. Time will tell.
&lt;/p&gt;

&lt;p&gt;
Here we create two helper functions to unquote input, and requote output. We also need some code to make an array of all the results, and put commas between all the results so that we end up with valid json in the output.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-unquote-query&lt;/span&gt; (query)
  &lt;span style="color: #036A07;"&gt;"Json encodes QUERY, and unquotes any ObjectId calls.&lt;/span&gt;

&lt;span style="color: #036A07;"&gt;We don't have syntax for the ObjectId call that mongo wants in&lt;/span&gt;
&lt;span style="color: #036A07;"&gt; lisp, so a query has to look like this:&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;'((_id .  \"ObjectId(\"587babfaef131d0d4603b3ad\")\"))&lt;/span&gt;

&lt;span style="color: #036A07;"&gt;Mongo can't have the quotes around the call, so this function&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;removes them.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;"&lt;/span&gt;
  (replace-regexp-in-string &lt;span style="color: #008000;"&gt;"\"&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(&lt;/span&gt;&lt;span style="color: #008000;"&gt;ObjectID(\\\\\"&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(&lt;/span&gt;&lt;span style="color: #008000;"&gt;.*?&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\\\\")&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;\""&lt;/span&gt;
                            &lt;span style="color: #008000;"&gt;"ObjectId(\"\\2\")"&lt;/span&gt;
                            (json-encode query)))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-requote-output&lt;/span&gt; (output)
  &lt;span style="color: #036A07;"&gt;"Adds quotes around ObjectId in OUTPUT.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;When mongo outputs json, it has unquoted ObjectIds in it that&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;emacs cannot interpret as json. "&lt;/span&gt;
  (replace-regexp-in-string
   &lt;span style="color: #008000;"&gt;"ObjectId(\"&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(&lt;/span&gt;&lt;span style="color: #008000;"&gt;.*?&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;\")"&lt;/span&gt;
   &lt;span style="color: #008000;"&gt;"\"ObjectId(\\\\\"\\1\\\\\")\""&lt;/span&gt;
   output))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-find&lt;/span&gt; (db collection query &lt;span style="color: #6434A3;"&gt;&amp;amp;optional&lt;/span&gt; projection)
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((query-json (mongo-unquote-query query))
         (projection-json
          (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; projection (json-encode projection)))
         (output (mongo-requote-output
                  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;add [] to make an array of output in json,&lt;/span&gt;
                  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;and separate results by a comma&lt;/span&gt;
                  (concat &lt;span style="color: #008000;"&gt;"["&lt;/span&gt;
                          (replace-regexp-in-string
                           &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt; &lt;span style="color: #008000;"&gt;""&lt;/span&gt;
                           (shell-command-to-string
                            (format &lt;span style="color: #008000;"&gt;"mongo %s --quiet --eval 'db.%s.find(%s).forEach(function(myDoc) { printjsononeline(myDoc); print( \",\"); })'"&lt;/span&gt;
                                    db collection
                                    (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; projection
                                        (format &lt;span style="color: #008000;"&gt;"%s, %s"&lt;/span&gt; query-json projection-json)
                                      query-json))))
                          &lt;span style="color: #008000;"&gt;"]"&lt;/span&gt;)))) 
    (json-read-from-string output)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
mongo-find
&lt;/pre&gt;

&lt;p&gt;
So, finally we can run something like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '((email . &lt;span style="color: #008000;"&gt;"someone@out.there"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[((_id . "ObjectId(\"587c166cdfcd649d3acf99fd\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there")) ((_id . "ObjectId(\"587c16ad410565dd4c16c748\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there")) ((_id . "ObjectId(\"587c17550e586b4f8df21de0\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there")) ((_id . "ObjectId(\"587c1764d75279a55ffec483\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there")) ((_id . "ObjectId(\"587c17743281f1e9d5054396\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there")) ((_id . "ObjectId(\"587c178ad92706d2bd5a6e3c\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there")) ((_id . "ObjectId(\"587c1794756bb2bd0f0ac499\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there"))]
&lt;/pre&gt;

&lt;p&gt;
Here is an example usage with a projection that returns only the information you want, in this case, just the id.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '((email . &lt;span style="color: #008000;"&gt;"someone@out.there"&lt;/span&gt;))
            '((_id . 1)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[((_id . "ObjectId(\"587c166cdfcd649d3acf99fd\")")) ((_id . "ObjectId(\"587c16ad410565dd4c16c748\")")) ((_id . "ObjectId(\"587c17550e586b4f8df21de0\")")) ((_id . "ObjectId(\"587c1764d75279a55ffec483\")")) ((_id . "ObjectId(\"587c17743281f1e9d5054396\")")) ((_id . "ObjectId(\"587c178ad92706d2bd5a6e3c\")")) ((_id . "ObjectId(\"587c1794756bb2bd0f0ac499\")"))]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7279625" class="outline-2"&gt;
&lt;h2 id="org7279625"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Updating an entry&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Ok, back to the update. To make sure that we update exactly the document we want, we will use the document _id. First, we define an update command.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-update&lt;/span&gt; (db collection query $set)
  &lt;span style="color: #036A07;"&gt;"In DB.COLLECTION update records matching QUERY with the contents of $SET."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((query-json (mongo-encode-query query))
         ($set-json (mongo-encode-query $set))
         (cmd (format &lt;span style="color: #008000;"&gt;"mongo %s --quiet --eval 'db.%s.update(%s, %s)'"&lt;/span&gt;
                      db collection
                      query-json $set-json))
         (output (shell-command-to-string cmd)))
    (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (string-match &lt;span style="color: #008000;"&gt;"WriteResult("&lt;/span&gt; output)
        (json-read-from-string
         (substring output 12 -2))
      output)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
mongo-update
&lt;/pre&gt;

&lt;p&gt;
First a reminder of what is in this record.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '((_id . &lt;span style="color: #008000;"&gt;"ObjectId(\"587c16ad410565dd4c16c748\")"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[((_id . "ObjectId(\"587c16ad410565dd4c16c748\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there"))]
&lt;/pre&gt;

&lt;p&gt;
Here we set the email field to a new address. Without $set, the whole document gets replaced.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-update &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
              '((_id . &lt;span style="color: #008000;"&gt;"ObjectId(\"587c16ad410565dd4c16c748\")"&lt;/span&gt;))
              '(($set . ((email . &lt;span style="color: #008000;"&gt;"someone@out.there.com"&lt;/span&gt;)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
((nMatched . 1) (nUpserted . 0) (nModified . 1))
&lt;/pre&gt;

&lt;p&gt;
Finally, let's see the document again to verify it is modified.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '((_id . &lt;span style="color: #008000;"&gt;"ObjectId(\"587c16ad410565dd4c16c748\")"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[((_id . "ObjectId(\"587c16ad410565dd4c16c748\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there.com"))]
&lt;/pre&gt;

&lt;p&gt;
Looks good, you can see it got changed. There is a potential gotcha though. This next command looks like it should do the same thing, but it does not. The whole document gets replaced!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-update &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
              '((_id . &lt;span style="color: #008000;"&gt;"ObjectId(\"587c16ad410565dd4c16c748\")"&lt;/span&gt;))
              '((email . &lt;span style="color: #008000;"&gt;"someone@out.there.com"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
((nMatched . 1) (nUpserted . 0) (nModified . 1))
&lt;/pre&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '((_id . &lt;span style="color: #008000;"&gt;"ObjectId(\"587c16ad410565dd4c16c748\")"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[((_id . "ObjectId(\"587c16ad410565dd4c16c748\")") (email . "someone@out.there.com"))]
&lt;/pre&gt;

&lt;p&gt;
Do not forget the $set operator if you just want to update some fields!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org769cf9d" class="outline-2"&gt;
&lt;h2 id="org769cf9d"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Deleting a document&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
Next, let's get a delete function. I will only implement the deleteMany function here since you can give it a document id to delete only one, and usually I would want to delete all documents that meet a criteria anyway.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-deleteMany&lt;/span&gt; (db collection filter)
  &lt;span style="color: #036A07;"&gt;"Delete records in DB.COLLECTION matched by FILTER.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;TODO: add write concern."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((filter-json (mongo-encode-query filter)) 
         (cmd (format &lt;span style="color: #008000;"&gt;"mongo %s --quiet --eval 'db.%s.deleteMany(%s)'"&lt;/span&gt;
                      db collection
                      filter-json))
         (output (shell-command-to-string cmd)))
    (json-read-from-string output)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
mongo-deleteMany
&lt;/pre&gt;

&lt;p&gt;
Since we borked that last document, let's just delete it.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-deleteMany &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '((_id . &lt;span style="color: #008000;"&gt;"ObjectId(\"587be3fa6009a569a277b680\")"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
((acknowledged . t) (deletedCount . 0))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0cb9437" class="outline-2"&gt;
&lt;h2 id="org0cb9437"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Generic commands&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
We may want some flexibility to run collection commands.  The most generic command will simply be to write the shell-command completely. We can keep a little syntax by encapsulating most of the boilerplate though. Here is a function for that.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-cmd&lt;/span&gt; (db collection cmd &lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; args)
  &lt;span style="color: #036A07;"&gt;"In DB.COLLECTION run CMD. &lt;/span&gt;
&lt;span style="color: #036A07;"&gt;ARGS if present will be used to format CMD."&lt;/span&gt;
  (shell-command-to-string
   (format &lt;span style="color: #008000;"&gt;"mongo %s --quiet --eval 'db.%s.%s'"&lt;/span&gt;
           db collection
           (apply #'format cmd args))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
mongo-cmd
&lt;/pre&gt;

&lt;p&gt;
We can get the number of documents with this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"count()"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
4341
&lt;/pre&gt;

&lt;p&gt;
Or run a more sophisticated command with arguments like this.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"explain().remove(%s)"&lt;/span&gt; (json-encode '((&lt;span style="color: #008000;"&gt;"category"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"enemy"&lt;/span&gt;))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
{
	"queryPlanner" : {
		"plannerVersion" : 1,
		"namespace" : "contacts.contacts",
		"indexFilterSet" : false,
		"parsedQuery" : {
			"category" : {
				"$eq" : "enemy"
			}
		},
		"winningPlan" : {
			"stage" : "DELETE",
			"inputStage" : {
				"stage" : "COLLSCAN",
				"filter" : {
					"category" : {
						"$eq" : "enemy"
					}
				},
				"direction" : "forward"
			}
		},
		"rejectedPlans" : [ ]
	},
	"serverInfo" : {
		"host" : "Johns-MacBook-Air.local",
		"port" : 27017,
		"version" : "3.4.1",
		"gitVersion" : "5e103c4f5583e2566a45d740225dc250baacfbd7"
	},
	"ok" : 1
}
&lt;/pre&gt;

&lt;p&gt;
Or, drop the collection with:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"drop()"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
true
&lt;/pre&gt;

&lt;p&gt;
All gone! Note, we do not try to handle the output of any of those, and they are returned as strings.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org512e4fe" class="outline-2"&gt;
&lt;h2 id="org512e4fe"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; A MongoDB contacts database&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
Now, let's re-populate it for real. I store my contacts in a variable called "contacts" as a list of a descriptive string and then cons cells. These are actually harvested from a set of org-files. It is way to slow to parse these files each time, so I keep the contacts cached in memory and only update them if a file changes.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(length contacts)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
6047
&lt;/pre&gt;

&lt;p&gt;
There are over 6000 contacts. Let's put them in a MongoDB.
&lt;/p&gt;

&lt;p&gt;
Here is a limitation of our approach. This will not work because the generated shell command ends up being too long for the shell.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-insert &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
              (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for contact in contacts
                    collect
                    (append `((desc . ,(car contact))) (cdr contact))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
So, we do them one at time here:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((ct (current-time)))
  (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for contact in contacts
        do
        (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((output (mongo-insert &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
                                    (append `((desc . ,(car contact))) (cdr contact)))))
          (&lt;span style="color: #0000FF;"&gt;unless&lt;/span&gt; (= 1 (cdr (assoc 'nInserted output)))
            (&lt;span style="color: #ff0000; font-weight: bold;"&gt;warn&lt;/span&gt; &lt;span style="color: #008000;"&gt;"error: %S for %S"&lt;/span&gt; (cdr (assoc 'nInserted output)) contact))))
  (message &lt;span style="color: #008000;"&gt;"Elapsed time %.02f seconds"&lt;/span&gt; (float-time (time-since ct))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Elapsed time 762.95 seconds
&lt;/pre&gt;

&lt;p&gt;
That took a little over 10 minutes to add. That seems long to me. This next step confirms that they were added.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"count()"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
6047
&lt;/pre&gt;

&lt;p&gt;
Next we will compare some timing of finding data in the database vs looping through the cached contacts. Here is a timing macro to measure how long it takes to run a bit of code.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;&lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;http://stackoverflow.com/questions/23622296/emacs-timing-execution-of-function-calls-in-emacs-lisp&lt;/span&gt;
(&lt;span style="color: #0000FF;"&gt;defmacro&lt;/span&gt; &lt;span style="color: #006699;"&gt;measure-time&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; body)
  &lt;span style="color: #036A07;"&gt;"Measure the time it takes to evaluate BODY."&lt;/span&gt;
  `(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((time (current-time)))
     ,@body
     (message &lt;span style="color: #008000;"&gt;"%.06f seconds elapsed"&lt;/span&gt; (float-time (time-since time)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
measure-time
&lt;/pre&gt;

&lt;p&gt;
Here is the old way I would extract data. Many contacts I have are academics, and I have stored their academic ranks in each contact.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for contact in contacts
      if (string= &lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt; (cdr (assoc &lt;span style="color: #008000;"&gt;"RANK"&lt;/span&gt; (cdr contact))))
      collect contact into professors
      if (string= &lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; (cdr (assoc &lt;span style="color: #008000;"&gt;"RANK"&lt;/span&gt; (cdr contact))))
      collect contact into associate-professors
      if (string= &lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; (cdr (assoc &lt;span style="color: #008000;"&gt;"RANK"&lt;/span&gt; (cdr contact))))
      collect contact into assistant-professors
      finally return `((&lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; ,(length assistant-professors))
                       (&lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; ,(length associate-professors))
                       (&lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt; ,(length professors))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Assistant Professor&lt;/td&gt;
&lt;td class="org-right"&gt;313&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Associate Professor&lt;/td&gt;
&lt;td class="org-right"&gt;283&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Professor&lt;/td&gt;
&lt;td class="org-right"&gt;879&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
How long did it take to do that?
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;measure-time&lt;/span&gt;
 (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for contact in contacts
       if (string= &lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt; (cdr (assoc &lt;span style="color: #008000;"&gt;"RANK"&lt;/span&gt; (cdr contact))))
       collect contact into professors
       if (string= &lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; (cdr (assoc &lt;span style="color: #008000;"&gt;"RANK"&lt;/span&gt; (cdr contact))))
       collect contact into associate-professors
       if (string= &lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; (cdr (assoc &lt;span style="color: #008000;"&gt;"RANK"&lt;/span&gt; (cdr contact))))
       collect contact into assistant-professors
       finally return (list (length assistant-professors)
                            (length associate-professors)
                            (length professors))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
0.008772 seconds elapsed
&lt;/pre&gt;

&lt;p&gt;
Not long at all! Comparatively, it is very slow to get this information out of the mongodb, although considerably less code is required. That might not be surprising, considering the json parsing that has to get done here.
&lt;/p&gt;

&lt;p&gt;
Here is the equivalent code to extract that data from the database.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for rank in '(&lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt;)
       collect (list rank (length (mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
                                              `((RANK . ,rank))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Assistant Professor&lt;/td&gt;
&lt;td class="org-right"&gt;313&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Associate Professor&lt;/td&gt;
&lt;td class="org-right"&gt;283&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Professor&lt;/td&gt;
&lt;td class="org-right"&gt;879&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
It is comparatively slow to do this. This requires three json parses, and profiling indicates that alot of the work is done in parsing the json. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;measure-time&lt;/span&gt;
 (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for rank in '(&lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt;)
       collect (list rank (length (mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
                                              `((RANK . ,rank)))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
1.914817 seconds elapsed
&lt;/pre&gt;

&lt;p&gt;
Here is smarter way to do it that avoids the json parsing.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for rank in '(&lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt;)
      collect (list rank (mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"count(%s)"&lt;/span&gt;
                                    (json-encode `((RANK . ,rank))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Assistant Professor&lt;/td&gt;
&lt;td class="org-right"&gt;313&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Associate Professor&lt;/td&gt;
&lt;td class="org-right"&gt;283&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Professor&lt;/td&gt;
&lt;td class="org-right"&gt;879&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
And you can see here it is about 10 times faster, but not nearly as fast as running the lisp code on the cache.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;measure-time&lt;/span&gt;
 (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for rank in '(&lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt;)
       collect (list rank (mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"count(%s)"&lt;/span&gt;
                                     (json-encode `((RANK . ,rank)))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
0.349413 seconds elapsed
&lt;/pre&gt;

&lt;p&gt;
This is how you might integrate this into a completion command:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(ivy-read &lt;span style="color: #008000;"&gt;"choose: "&lt;/span&gt;
          (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for c across (mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)
                collect
                (list (cdr (assoc 'desc c)) c)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This is basically unusable though, because it takes so long to generate the candidates (over six seconds).
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;measure-time&lt;/span&gt;
 (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for c across (mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)
       collect
       (list (cdr (assoc 'desc c)) c)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
6.228225 seconds elapsed
&lt;/pre&gt;

&lt;p&gt;
We can get back to usable by making the database do more work for us. Here, we simply make the database print a list of cons cells that we can read into lisp. We have to use a javascript function, with some escaping and quoting. The escaping was necessary because there is some bad data in the email field that messed up the cons cells, e.g. some things like "name" &amp;lt;email&amp;gt; with nested single and double quoting, etc., and the quoting was necessary to get cons cells of the form ("desc" . "email"), and finally we wrap them in parentheses and read back the list of cons cells. At about a quarter of a second, this is very usable to get a list of over 6000 candidates. It is still many times slower than working on the contacts list in memory though. I am not a super fan of the one-line javascript, and if it was much more complicated than this another strategy would probably be desirable.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;measure-time&lt;/span&gt;
 (read
  (concat
   &lt;span style="color: #008000;"&gt;"("&lt;/span&gt;
   (shell-command-to-string &lt;span style="color: #008000;"&gt;"mongo contacts --quiet --eval 'db.contacts.find().forEach(function (doc) {print(\"(\\\"\" + doc.desc + \"\\\" . \\\"\" + escape(doc.EMAIL) +\"\\\")\");})'"&lt;/span&gt;)
   &lt;span style="color: #008000;"&gt;")"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
0.284730 seconds elapsed
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org97edcbc" class="outline-2"&gt;
&lt;h2 id="org97edcbc"&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; Text searching&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;p&gt;
Finally, let us make a text index to make searching easy. This allows us a very flexible search where we do not have to specify what field or use regular expressions. We setup the index on all the fields, so we can find entries that match even on fields that do not exist in all documents.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"createIndex(%s)"&lt;/span&gt; (json-encode '((&lt;span style="color: #008000;"&gt;"$**"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"text"&lt;/span&gt;))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
&lt;/pre&gt;

&lt;p&gt;
Now, let's use that to find the GOOGLE-SCHOLAR url of contacts matching the following query.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '(($text . (($search . &lt;span style="color: #008000;"&gt;"\"Carnegie Mellon\""&lt;/span&gt;)))
                                    ($text . (($search . &lt;span style="color: #008000;"&gt;"\"John Kitchin\""&lt;/span&gt;))))
            '((GOOGLE-SCHOLAR . 1) (_id . 0)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;[((GOOGLE-SCHOLAR . &lt;span style="color: #008000;"&gt;"https://scholar.google.com/citations?hl=en&amp;amp;user=jD_4h7sAAAAJ"&lt;/span&gt;))
 nil nil]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
So, you can see there were three contacts, and one of them lists my google-scholar url.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org04fa0df" class="outline-2"&gt;
&lt;h2 id="org04fa0df"&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;p&gt;
This looks like the foundation of a mongo/emacs-lisp interface. This interface is not that fast though, and suffers from some limitations related to the use of the shell. Depending on the actual use, it is clear you can gain performance by passing some work on the database, which requires some javascript coding. Even that revealed some subtlety, e.g. making sure the database output text that was compatible with the lisp reader. That mostly means taking care of quotes, and other special characters, which I managed with a simple escape mechanism. It is probably worth investing a few more days in building an interface that uses a process and communicates with the mongo cli directly before moving forward with any significant application that uses Mongo in emacs. There are many good ideas for that:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Index all your org files (e.g. &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/03/Find-stuff-in-org-mode-anywhere/"&gt;http://kitchingroup.cheme.cmu.edu/blog/2017/01/03/Find-stuff-in-org-mode-anywhere/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Index all your bibtex files (e.g. &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/15/Querying-a-MongoDB-bibtex-database-with-Python-and-emacs-lisp/"&gt;http://kitchingroup.cheme.cmu.edu/blog/2017/01/15/Querying-a-MongoDB-bibtex-database-with-Python-and-emacs-lisp/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Download RSS feeds into a searchable database&lt;/li&gt;
&lt;li&gt;Manage your contacts&lt;/li&gt;
&lt;li&gt;Index your email? mu and notmuch use xapian for this, but I have found they cannot search for things like hashtags. Maybe MongoDB would be better?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The tradeoffs between this and sqlite are more clear now. With Mongo we do not have to create the normalized tables (although it is still a good idea to think about how to structure the documents, and if they should be a little normalized). It is &lt;i&gt;much&lt;/i&gt; easier to map lisp data structures to Mongo queries than it is to do that with SQL queries. On the other hand, it is necessary to do some javascript programming with Mongo to get some desired output. It still seems worth exploring further.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/16/A-simple-emacs-lisp-interface-to-CRUD-operations-in-mongodb.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content:encoded>
    </item>
  </channel>
</rss>
